
RTOS_S7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dac  08009dac  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009dac  08009dac  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dac  08009dac  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dac  08009dac  00019dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201cc  2**0
                  CONTENTS
 10 .bss          00001488  200001cc  200001cc  000201cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001654  20001654  000201cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017ac4  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b4e  00000000  00000000  00037d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014f8  00000000  00000000  0003b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001019  00000000  00000000  0003cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000212e8  00000000  00000000  0003dd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c908  00000000  00000000  0005f051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba9ad  00000000  00000000  0007b959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005c8c  00000000  00000000  00136308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0013bf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cd4 	.word	0x08009cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08009cd4 	.word	0x08009cd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b09a      	sub	sp, #104	; 0x68
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb6d 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f829 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f907 	bl	80004a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000292:	f000 f887 	bl	80003a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000296:	f000 f8c5 	bl	8000424 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800029a:	f008 fac5 	bl	8008828 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t data[100];
	  sprintf((char *) data, "Counter = %d\r\n", count);
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <main+0x58>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	490d      	ldr	r1, [pc, #52]	; (80002dc <main+0x5c>)
 80002a6:	4618      	mov	r0, r3
 80002a8:	f009 f870 	bl	800938c <siprintf>
	  CDC_Transmit_FS((uint8_t *) data, strlen((char *)data));
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ff8e 	bl	80001d0 <strlen>
 80002b4:	4603      	mov	r3, r0
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4611      	mov	r1, r2
 80002bc:	4618      	mov	r0, r3
 80002be:	f008 fc59 	bl	8008b74 <CDC_Transmit_FS>
	  count++;
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <main+0x58>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	3301      	adds	r3, #1
 80002c8:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <main+0x58>)
 80002ca:	6013      	str	r3, [r2, #0]
	  HAL_Delay(2000);
 80002cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002d0:	f000 fb7e 	bl	80009d0 <HAL_Delay>
  {
 80002d4:	e7e3      	b.n	800029e <main+0x1e>
 80002d6:	bf00      	nop
 80002d8:	200002a0 	.word	0x200002a0
 80002dc:	08009cec 	.word	0x08009cec

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b09e      	sub	sp, #120	; 0x78
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ea:	2228      	movs	r2, #40	; 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f009 f86c 	bl	80093cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	223c      	movs	r2, #60	; 0x3c
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f009 f85e 	bl	80093cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000310:	2303      	movs	r3, #3
 8000312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000314:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000318:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	2310      	movs	r3, #16
 8000324:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000334:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fbe0 	bl	8002b00 <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000346:	f000 f93b 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000364:	2101      	movs	r1, #1
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fc08 	bl	8003b7c <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000372:	f000 f925 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <SystemClock_Config+0xc0>)
 8000378:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800037e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000382:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fe3e 	bl	8004008 <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000392:	f000 f915 	bl	80005c0 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3778      	adds	r7, #120	; 0x78
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	00020020 	.word	0x00020020

080003a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_I2C1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <MX_I2C1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_I2C1_Init+0x74>)
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <MX_I2C1_Init+0x7c>)
 80003b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <MX_I2C1_Init+0x74>)
 80003bc:	2201      	movs	r2, #1
 80003be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_I2C1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_I2C1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003de:	480e      	ldr	r0, [pc, #56]	; (8000418 <MX_I2C1_Init+0x74>)
 80003e0:	f000 fd8e 	bl	8000f00 <HAL_I2C_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ea:	f000 f8e9 	bl	80005c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ee:	2100      	movs	r1, #0
 80003f0:	4809      	ldr	r0, [pc, #36]	; (8000418 <MX_I2C1_Init+0x74>)
 80003f2:	f000 fe14 	bl	800101e <HAL_I2CEx_ConfigAnalogFilter>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003fc:	f000 f8e0 	bl	80005c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000400:	2100      	movs	r1, #0
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_I2C1_Init+0x74>)
 8000404:	f000 fe56 	bl	80010b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 f8d7 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200001e8 	.word	0x200001e8
 800041c:	40005400 	.word	0x40005400
 8000420:	2000090e 	.word	0x2000090e

08000424 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_SPI1_Init+0x74>)
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <MX_SPI1_Init+0x78>)
 800042c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_SPI1_Init+0x74>)
 8000430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_SPI1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_SPI1_Init+0x74>)
 800043e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000442:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_SPI1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_SPI1_Init+0x74>)
 8000452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000456:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_SPI1_Init+0x74>)
 800045a:	2208      	movs	r2, #8
 800045c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_SPI1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_SPI1_Init+0x74>)
 8000472:	2207      	movs	r2, #7
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_SPI1_Init+0x74>)
 800047e:	2208      	movs	r2, #8
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_SPI1_Init+0x74>)
 8000484:	f003 ff70 	bl	8004368 <HAL_SPI_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800048e:	f000 f897 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000023c 	.word	0x2000023c
 800049c:	40013000 	.word	0x40013000

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004b6:	4b37      	ldr	r3, [pc, #220]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a36      	ldr	r2, [pc, #216]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a30      	ldr	r2, [pc, #192]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b28      	ldr	r3, [pc, #160]	; (8000594 <MX_GPIO_Init+0xf4>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b25      	ldr	r3, [pc, #148]	; (8000594 <MX_GPIO_Init+0xf4>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a24      	ldr	r2, [pc, #144]	; (8000594 <MX_GPIO_Init+0xf4>)
 8000504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <MX_GPIO_Init+0xf4>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <MX_GPIO_Init+0xf4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a1e      	ldr	r2, [pc, #120]	; (8000594 <MX_GPIO_Init+0xf4>)
 800051c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <MX_GPIO_Init+0xf4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800052e:	2200      	movs	r2, #0
 8000530:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000534:	4818      	ldr	r0, [pc, #96]	; (8000598 <MX_GPIO_Init+0xf8>)
 8000536:	f000 fccb 	bl	8000ed0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800053a:	2337      	movs	r3, #55	; 0x37
 800053c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800053e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <MX_GPIO_Init+0xf8>)
 8000550:	f000 fb44 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000554:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000558:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <MX_GPIO_Init+0xf8>)
 800056e:	f000 fb35 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000572:	2301      	movs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 fb28 	bl	8000bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058c:	bf00      	nop
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	48001000 	.word	0x48001000

0800059c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d101      	bne.n	80005b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ae:	f000 f9ef 	bl	8000990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40012c00 	.word	0x40012c00

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000602:	2007      	movs	r0, #7
 8000604:	f000 fab5 	bl	8000b72 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <HAL_I2C_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d127      	bne.n	8000686 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_I2C_MspInit+0x80>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <HAL_I2C_MspInit+0x80>)
 800063c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_I2C_MspInit+0x80>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800064e:	23c0      	movs	r3, #192	; 0xc0
 8000650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000652:	2312      	movs	r3, #18
 8000654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000656:	2301      	movs	r3, #1
 8000658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065a:	2303      	movs	r3, #3
 800065c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800065e:	2304      	movs	r3, #4
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <HAL_I2C_MspInit+0x84>)
 800066a:	f000 fab7 	bl	8000bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_I2C_MspInit+0x80>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_I2C_MspInit+0x80>)
 8000674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_I2C_MspInit+0x80>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40005400 	.word	0x40005400
 8000694:	40021000 	.word	0x40021000
 8000698:	48000400 	.word	0x48000400

0800069c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <HAL_SPI_MspInit+0x7c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d128      	bne.n	8000710 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_SPI_MspInit+0x80>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <HAL_SPI_MspInit+0x80>)
 80006c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_SPI_MspInit+0x80>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_SPI_MspInit+0x80>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <HAL_SPI_MspInit+0x80>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_SPI_MspInit+0x80>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006ee:	23e0      	movs	r3, #224	; 0xe0
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006fe:	2305      	movs	r3, #5
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f000 fa66 	bl	8000bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40013000 	.word	0x40013000
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <HAL_InitTick+0xcc>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <HAL_InitTick+0xcc>)
 8000736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <HAL_InitTick+0xcc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fc26 	bl	8003fa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000758:	f003 fc02 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 800075c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <HAL_InitTick+0xd0>)
 8000762:	fba2 2303 	umull	r2, r3, r2, r3
 8000766:	0c9b      	lsrs	r3, r3, #18
 8000768:	3b01      	subs	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <HAL_InitTick+0xd4>)
 800076e:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <HAL_InitTick+0xd8>)
 8000770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <HAL_InitTick+0xd4>)
 8000774:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000778:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <HAL_InitTick+0xd4>)
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <HAL_InitTick+0xd4>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <HAL_InitTick+0xd4>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <HAL_InitTick+0xd4>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <HAL_InitTick+0xd4>)
 8000794:	f003 fe93 	bl	80044be <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800079e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d11b      	bne.n	80007de <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007a6:	4813      	ldr	r0, [pc, #76]	; (80007f4 <HAL_InitTick+0xd4>)
 80007a8:	f003 feea 	bl	8004580 <HAL_TIM_Base_Start_IT>
 80007ac:	4603      	mov	r3, r0
 80007ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d111      	bne.n	80007de <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80007ba:	2019      	movs	r0, #25
 80007bc:	f000 fa00 	bl	8000bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	d808      	bhi.n	80007d8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80007c6:	2200      	movs	r2, #0
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	2019      	movs	r0, #25
 80007cc:	f000 f9dc 	bl	8000b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <HAL_InitTick+0xdc>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e002      	b.n	80007de <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3730      	adds	r7, #48	; 0x30
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	431bde83 	.word	0x431bde83
 80007f4:	200002e4 	.word	0x200002e4
 80007f8:	40012c00 	.word	0x40012c00
 80007fc:	20000004 	.word	0x20000004

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800085e:	f000 fd6d 	bl	800133c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20001000 	.word	0x20001000

0800086c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000872:	f003 feef 	bl	8004654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200002e4 	.word	0x200002e4

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <_sbrk+0x5c>)
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <_sbrk+0x60>)
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x64>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <_sbrk+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d207      	bcs.n	80008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b0:	f008 fd94 	bl	80093dc <__errno>
 80008b4:	4603      	mov	r3, r0
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	e009      	b.n	80008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <_sbrk+0x64>)
 80008d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000a000 	.word	0x2000a000
 80008e0:	00000400 	.word	0x00000400
 80008e4:	20000330 	.word	0x20000330
 80008e8:	20001658 	.word	0x20001658

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000914:	f7ff ffea 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093e:	f008 fd53 	bl	80093e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000942:	f7ff fc9d 	bl	8000280 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000948:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000954:	08009db4 	.word	0x08009db4
  ldr r2, =_sbss
 8000958:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800095c:	20001654 	.word	0x20001654

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>
	...

08000964 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x28>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f8fc 	bl	8000b72 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fed0 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff fe24 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x24>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_IncTick+0x24>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000334 	.word	0x20000334

080009b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000334 	.word	0x20000334

080009d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff ffee 	bl	80009b8 <HAL_GetTick>
 80009dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e8:	d005      	beq.n	80009f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_Delay+0x44>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4413      	add	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009f6:	bf00      	nop
 80009f8:	f7ff ffde 	bl	80009b8 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d8f7      	bhi.n	80009f8 <HAL_Delay+0x28>
  {
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ff4c 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9a:	f7ff ff61 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000b9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	6978      	ldr	r0, [r7, #20]
 8000ba6:	f7ff ffb1 	bl	8000b0c <NVIC_EncodePriority>
 8000baa:	4602      	mov	r2, r0
 8000bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff80 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff54 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	e154      	b.n	8000e96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8146 	beq.w	8000e90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d005      	beq.n	8000c1c <HAL_GPIO_Init+0x40>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d130      	bne.n	8000c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	f003 0201 	and.w	r2, r3, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d017      	beq.n	8000cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d123      	bne.n	8000d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	6939      	ldr	r1, [r7, #16]
 8000d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0203 	and.w	r2, r3, #3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 80a0 	beq.w	8000e90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d50:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <HAL_GPIO_Init+0x2d8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a57      	ldr	r2, [pc, #348]	; (8000eb4 <HAL_GPIO_Init+0x2d8>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <HAL_GPIO_Init+0x2d8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d68:	4a53      	ldr	r2, [pc, #332]	; (8000eb8 <HAL_GPIO_Init+0x2dc>)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d92:	d019      	beq.n	8000dc8 <HAL_GPIO_Init+0x1ec>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a49      	ldr	r2, [pc, #292]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d013      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e8>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <HAL_GPIO_Init+0x2e4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d00d      	beq.n	8000dc0 <HAL_GPIO_Init+0x1e4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <HAL_GPIO_Init+0x2e8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x1e0>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a46      	ldr	r2, [pc, #280]	; (8000ec8 <HAL_GPIO_Init+0x2ec>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d101      	bne.n	8000db8 <HAL_GPIO_Init+0x1dc>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e008      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000db8:	2305      	movs	r3, #5
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e004      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e002      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <HAL_GPIO_Init+0x1ee>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dda:	4937      	ldr	r1, [pc, #220]	; (8000eb8 <HAL_GPIO_Init+0x2dc>)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de8:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e36:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f47f aea3 	bne.w	8000bec <HAL_GPIO_Init+0x10>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000c00 	.word	0x48000c00
 8000ec8:	48001000 	.word	0x48001000
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e081      	b.n	8001016 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d106      	bne.n	8000f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fb74 	bl	8000614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d107      	bne.n	8000f7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	e006      	b.n	8000f88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d104      	bne.n	8000f9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69d9      	ldr	r1, [r3, #28]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2220      	movs	r2, #32
 8001002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b20      	cmp	r3, #32
 8001032:	d138      	bne.n	80010a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800103e:	2302      	movs	r3, #2
 8001040:	e032      	b.n	80010a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2224      	movs	r2, #36	; 0x24
 800104e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001070:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f042 0201 	orr.w	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2220      	movs	r2, #32
 8001096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010a6:	2302      	movs	r3, #2
  }
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d139      	bne.n	800113e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e033      	b.n	8001140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2224      	movs	r2, #36	; 0x24
 80010e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001106:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0201 	orr.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2220      	movs	r2, #32
 800112e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800113e:	2302      	movs	r3, #2
  }
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	b08b      	sub	sp, #44	; 0x2c
 8001150:	af06      	add	r7, sp, #24
 8001152:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0c4      	b.n	80012e8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f007 fe34 	bl	8008de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fc72 	bl	8004a6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e040      	b.n	8001212 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	440b      	add	r3, r1
 80011a0:	3301      	adds	r3, #1
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3303      	adds	r3, #3
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3338      	adds	r3, #56	; 0x38
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	333c      	adds	r3, #60	; 0x3c
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3340      	adds	r3, #64	; 0x40
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3b9      	bcc.n	8001190 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e044      	b.n	80012ac <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3301      	adds	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d3b5      	bcc.n	8001222 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	687e      	ldr	r6, [r7, #4]
 80012be:	466d      	mov	r5, sp
 80012c0:	f106 0410 	add.w	r4, r6, #16
 80012c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	602b      	str	r3, [r5, #0]
 80012cc:	1d33      	adds	r3, r6, #4
 80012ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	f003 fbe7 	bl	8004aa4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_PCD_Start+0x16>
 8001302:	2302      	movs	r3, #2
 8001304:	e016      	b.n	8001334 <HAL_PCD_Start+0x44>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fb94 	bl	8004a40 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001318:	2101      	movs	r1, #1
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f007 fffe 	bl	800931c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f005 fe54 	bl	8006fd2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f005 fe4d 	bl	8006fe8 <USB_ReadInterrupts>
 800134e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fab2 	bl	80018c4 <PCD_EP_ISR_Handler>

    return;
 8001360:	e0bd      	b.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800137e:	b292      	uxth	r2, r2
 8001380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f007 fdcc 	bl	8008f22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800138a:	2100      	movs	r1, #0
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f8a9 	bl	80014e4 <HAL_PCD_SetAddress>

    return;
 8001392:	e0a4      	b.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00c      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013b6:	e092      	b.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013d4:	b292      	uxth	r2, r2
 80013d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013da:	e080      	b.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d027      	beq.n	8001436 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0204 	bic.w	r2, r2, #4
 80013f8:	b292      	uxth	r2, r2
 80013fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	b292      	uxth	r2, r2
 8001412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f007 fdbc 	bl	8008f94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800142e:	b292      	uxth	r2, r2
 8001430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001434:	e053      	b.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800143c:	2b00      	cmp	r3, #0
 800143e:	d027      	beq.n	8001490 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0208 	orr.w	r2, r2, #8
 8001452:	b292      	uxth	r2, r2
 8001454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146a:	b292      	uxth	r2, r2
 800146c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0204 	orr.w	r2, r2, #4
 8001482:	b292      	uxth	r2, r2
 8001484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f007 fd69 	bl	8008f60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800148e:	e026      	b.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00f      	beq.n	80014ba <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014ac:	b292      	uxth	r2, r2
 80014ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f007 fd27 	bl	8008f06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014b8:	e011      	b.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d6:	b292      	uxth	r2, r2
 80014d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014dc:	bf00      	nop
  }
}
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_PCD_SetAddress+0x1a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e013      	b.n	8001526 <HAL_PCD_SetAddress+0x42>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f005 fd47 	bl	8006faa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	4608      	mov	r0, r1
 8001538:	4611      	mov	r1, r2
 800153a:	461a      	mov	r2, r3
 800153c:	4603      	mov	r3, r0
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	460b      	mov	r3, r1
 8001542:	803b      	strh	r3, [r7, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800154c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da0e      	bge.n	8001572 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	705a      	strb	r2, [r3, #1]
 8001570:	e00e      	b.n	8001590 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	f003 0207 	and.w	r2, r3, #7
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	b2da      	uxtb	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800159c:	883a      	ldrh	r2, [r7, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	78ba      	ldrb	r2, [r7, #2]
 80015a6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015a8:	78bb      	ldrb	r3, [r7, #2]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d102      	bne.n	80015b4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_PCD_EP_Open+0x94>
 80015be:	2302      	movs	r3, #2
 80015c0:	e00e      	b.n	80015e0 <HAL_PCD_EP_Open+0xb2>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68f9      	ldr	r1, [r7, #12]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fa89 	bl	8004ae8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015de:	7afb      	ldrb	r3, [r7, #11]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da0e      	bge.n	800161a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	705a      	strb	r2, [r3, #1]
 8001618:	e00e      	b.n	8001638 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	f003 0207 	and.w	r2, r3, #7
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_PCD_EP_Close+0x6a>
 800164e:	2302      	movs	r3, #2
 8001650:	e00e      	b.n	8001670 <HAL_PCD_EP_Close+0x88>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fe05 	bl	8005270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	460b      	mov	r3, r1
 8001686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001688:	7afb      	ldrb	r3, [r7, #11]
 800168a:	f003 0207 	and.w	r2, r3, #7
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2200      	movs	r2, #0
 80016b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 ffbd 	bl	800564a <USB_EPStartXfer>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	f003 0207 	and.w	r2, r3, #7
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016fc:	681b      	ldr	r3, [r3, #0]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	460b      	mov	r3, r1
 8001718:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171a:	7afb      	ldrb	r3, [r7, #11]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2201      	movs	r2, #1
 8001754:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001756:	7afb      	ldrb	r3, [r7, #11]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	b2da      	uxtb	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6979      	ldr	r1, [r7, #20]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 ff6e 	bl	800564a <USB_EPStartXfer>

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 0207 	and.w	r2, r3, #7
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d901      	bls.n	8001796 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e03e      	b.n	8001814 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800179a:	2b00      	cmp	r3, #0
 800179c:	da0e      	bge.n	80017bc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	705a      	strb	r2, [r3, #1]
 80017ba:	e00c      	b.n	80017d6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_PCD_EP_SetStall+0x7e>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e00e      	b.n	8001814 <HAL_PCD_EP_SetStall+0x9c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68f9      	ldr	r1, [r7, #12]
 8001804:	4618      	mov	r0, r3
 8001806:	f005 fad1 	bl	8006dac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f003 020f 	and.w	r2, r3, #15
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d901      	bls.n	800183a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e040      	b.n	80018bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800183a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183e:	2b00      	cmp	r3, #0
 8001840:	da0e      	bge.n	8001860 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	705a      	strb	r2, [r3, #1]
 800185e:	e00e      	b.n	800187e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	f003 0207 	and.w	r2, r3, #7
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_PCD_EP_ClrStall+0x82>
 800189a:	2302      	movs	r3, #2
 800189c:	e00e      	b.n	80018bc <HAL_PCD_EP_ClrStall+0xa0>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68f9      	ldr	r1, [r7, #12]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f005 face 	bl	8006e4e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b096      	sub	sp, #88	; 0x58
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018cc:	e3bf      	b.n	800204e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80018e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f040 8179 	bne.w	8001be4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d152      	bne.n	80019a4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190e:	81fb      	strh	r3, [r7, #14]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800191a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800191e:	b29b      	uxth	r3, r3
 8001920:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3328      	adds	r3, #40	; 0x28
 8001926:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	3302      	adds	r3, #2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001952:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	441a      	add	r2, r3
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f007 fab4 	bl	8008ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 836b 	beq.w	800204e <PCD_EP_ISR_Handler+0x78a>
 8001978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 8366 	bne.w	800204e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800198e:	b2da      	uxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b292      	uxth	r2, r2
 8001996:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019a2:	e354      	b.n	800204e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d034      	beq.n	8001a2c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	3306      	adds	r3, #6
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f005 fb47 	bl	8007094 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a12:	4013      	ands	r3, r2
 8001a14:	823b      	strh	r3, [r7, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	8a3a      	ldrh	r2, [r7, #16]
 8001a1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a20:	b292      	uxth	r2, r2
 8001a22:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f007 fa27 	bl	8008e78 <HAL_PCD_SetupStageCallback>
 8001a2a:	e310      	b.n	800204e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f280 830c 	bge.w	800204e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a42:	4013      	ands	r3, r2
 8001a44:	83fb      	strh	r3, [r7, #30]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	8bfa      	ldrh	r2, [r7, #30]
 8001a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a50:	b292      	uxth	r2, r2
 8001a52:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	3306      	adds	r3, #6
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d019      	beq.n	8001abc <PCD_EP_ISR_Handler+0x1f8>
 8001a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d015      	beq.n	8001abc <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a96:	6959      	ldr	r1, [r3, #20]
 8001a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f005 faf7 	bl	8007094 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	441a      	add	r2, r3
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f007 f9f0 	bl	8008e9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ac6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 82bd 	bne.w	800204e <PCD_EP_ISR_Handler+0x78a>
 8001ad4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ad8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ae0:	f000 82b5 	beq.w	800204e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4413      	add	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	801a      	strh	r2, [r3, #0]
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b3e      	cmp	r3, #62	; 0x3e
 8001b1a:	d91d      	bls.n	8001b58 <PCD_EP_ISR_Handler+0x294>
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <PCD_EP_ISR_Handler+0x272>
 8001b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b32:	3b01      	subs	r3, #1
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	801a      	strh	r2, [r3, #0]
 8001b56:	e026      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x2e2>
 8001b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <PCD_EP_ISR_Handler+0x2b2>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	801a      	strh	r2, [r3, #0]
 8001b74:	e017      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x2e2>
 8001b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <PCD_EP_ISR_Handler+0x2cc>
 8001b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb6:	827b      	strh	r3, [r7, #18]
 8001bb8:	8a7b      	ldrh	r3, [r7, #18]
 8001bba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bbe:	827b      	strh	r3, [r7, #18]
 8001bc0:	8a7b      	ldrh	r3, [r7, #18]
 8001bc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bc6:	827b      	strh	r3, [r7, #18]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	8a7b      	ldrh	r3, [r7, #18]
 8001bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	8013      	strh	r3, [r2, #0]
 8001be2:	e234      	b.n	800204e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f280 80fc 	bge.w	8001dfa <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c18:	4013      	ands	r3, r2
 8001c1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c34:	b292      	uxth	r2, r2
 8001c36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c38:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	7b1b      	ldrb	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d125      	bne.n	8001ca2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3306      	adds	r3, #6
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001c82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8092 	beq.w	8001db0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c92:	6959      	ldr	r1, [r3, #20]
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	88da      	ldrh	r2, [r3, #6]
 8001c98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c9c:	f005 f9fa 	bl	8007094 <USB_ReadPMA>
 8001ca0:	e086      	b.n	8001db0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	78db      	ldrb	r3, [r3, #3]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d10a      	bne.n	8001cc0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001caa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f9d9 	bl	800206a <HAL_PCD_EP_DB_Receive>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001cbe:	e077      	b.n	8001db0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cda:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	441a      	add	r2, r3
 8001cec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d024      	beq.n	8001d68 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	3302      	adds	r3, #2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02e      	beq.n	8001db0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	6959      	ldr	r1, [r3, #20]
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	891a      	ldrh	r2, [r3, #8]
 8001d5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d62:	f005 f997 	bl	8007094 <USB_ReadPMA>
 8001d66:	e023      	b.n	8001db0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d90:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da2:	6959      	ldr	r1, [r3, #20]
 8001da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da6:	895a      	ldrh	r2, [r3, #10]
 8001da8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dac:	f005 f972 	bl	8007094 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001db8:	441a      	add	r2, r3
 8001dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dc6:	441a      	add	r2, r3
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <PCD_EP_ISR_Handler+0x51c>
 8001dd4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d206      	bcs.n	8001dee <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f007 f858 	bl	8008e9c <HAL_PCD_DataOutStageCallback>
 8001dec:	e005      	b.n	8001dfa <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fc28 	bl	800564a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8123 	beq.w	800204e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	441a      	add	r2, r3
 8001e48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	78db      	ldrb	r3, [r3, #3]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 80a2 	bne.w	8001fa6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6a:	7b1b      	ldrb	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8093 	beq.w	8001f98 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d046      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	785b      	ldrb	r3, [r3, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d126      	bne.n	8001ed4 <PCD_EP_ISR_Handler+0x610>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	4413      	add	r3, r2
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	011a      	lsls	r2, r3, #4
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	e061      	b.n	8001f98 <PCD_EP_ISR_Handler+0x6d4>
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d15d      	bne.n	8001f98 <PCD_EP_ISR_Handler+0x6d4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	4413      	add	r3, r2
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	011a      	lsls	r2, r3, #4
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	4413      	add	r3, r2
 8001efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]
 8001f0a:	e045      	b.n	8001f98 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f14:	785b      	ldrb	r3, [r3, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d126      	bne.n	8001f68 <PCD_EP_ISR_Handler+0x6a4>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	4413      	add	r3, r2
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
 8001f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	011a      	lsls	r2, r3, #4
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	801a      	strh	r2, [r3, #0]
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	e017      	b.n	8001f98 <PCD_EP_ISR_Handler+0x6d4>
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d113      	bne.n	8001f98 <PCD_EP_ISR_Handler+0x6d4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f7e:	4413      	add	r3, r2
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	011a      	lsls	r2, r3, #4
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	2200      	movs	r2, #0
 8001f96:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f006 ff97 	bl	8008ed2 <HAL_PCD_DataInStageCallback>
 8001fa4:	e053      	b.n	800204e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001fa6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d146      	bne.n	8002040 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d907      	bls.n	8001ffa <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ff2:	1ad2      	subs	r2, r2, r3
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	e002      	b.n	8002000 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f006 ff5f 	bl	8008ed2 <HAL_PCD_DataInStageCallback>
 8002014:	e01b      	b.n	800204e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800201e:	441a      	add	r2, r3
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800202c:	441a      	add	r2, r3
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002030:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fb06 	bl	800564a <USB_EPStartXfer>
 800203e:	e006      	b.n	800204e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002040:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002044:	461a      	mov	r2, r3
 8002046:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f91b 	bl	8002284 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002056:	b29b      	uxth	r3, r3
 8002058:	b21b      	sxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f6ff ac37 	blt.w	80018ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3758      	adds	r7, #88	; 0x58
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b088      	sub	sp, #32
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	4613      	mov	r3, r2
 8002076:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d07e      	beq.n	8002180 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	3302      	adds	r3, #2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	8b7b      	ldrh	r3, [r7, #26]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d306      	bcc.n	80020c4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	8b7b      	ldrh	r3, [r7, #26]
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	619a      	str	r2, [r3, #24]
 80020c2:	e002      	b.n	80020ca <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d123      	bne.n	800211a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ec:	833b      	strh	r3, [r7, #24]
 80020ee:	8b3b      	ldrh	r3, [r7, #24]
 80020f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020f4:	833b      	strh	r3, [r7, #24]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	441a      	add	r2, r3
 8002104:	8b3b      	ldrh	r3, [r7, #24]
 8002106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800210a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002116:	b29b      	uxth	r3, r3
 8002118:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01f      	beq.n	8002164 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213e:	82fb      	strh	r3, [r7, #22]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	441a      	add	r2, r3
 800214e:	8afb      	ldrh	r3, [r7, #22]
 8002150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002164:	8b7b      	ldrh	r3, [r7, #26]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8087 	beq.w	800227a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6959      	ldr	r1, [r3, #20]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	891a      	ldrh	r2, [r3, #8]
 8002178:	8b7b      	ldrh	r3, [r7, #26]
 800217a:	f004 ff8b 	bl	8007094 <USB_ReadPMA>
 800217e:	e07c      	b.n	800227a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	3306      	adds	r3, #6
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	8b7b      	ldrh	r3, [r7, #26]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d306      	bcc.n	80021c2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	8b7b      	ldrh	r3, [r7, #26]
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	e002      	b.n	80021c8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d123      	bne.n	8002218 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	83fb      	strh	r3, [r7, #30]
 80021ec:	8bfb      	ldrh	r3, [r7, #30]
 80021ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021f2:	83fb      	strh	r3, [r7, #30]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	8bfb      	ldrh	r3, [r7, #30]
 8002204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800220c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	b29b      	uxth	r3, r3
 8002216:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11f      	bne.n	8002262 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223c:	83bb      	strh	r3, [r7, #28]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	441a      	add	r2, r3
 800224c:	8bbb      	ldrh	r3, [r7, #28]
 800224e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800225e:	b29b      	uxth	r3, r3
 8002260:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6959      	ldr	r1, [r3, #20]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	895a      	ldrh	r2, [r3, #10]
 8002274:	8b7b      	ldrh	r3, [r7, #26]
 8002276:	f004 ff0d 	bl	8007094 <USB_ReadPMA>
    }
  }

  return count;
 800227a:	8b7b      	ldrh	r3, [r7, #26]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0a4      	sub	sp, #144	; 0x90
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 81dd 	beq.w	8002658 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	3302      	adds	r3, #2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d907      	bls.n	80022e6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	e002      	b.n	80022ec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 80b9 	bne.w	8002468 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d126      	bne.n	800234c <HAL_PCD_EP_DB_Transmit+0xc8>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	4413      	add	r3, r2
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	011a      	lsls	r2, r3, #4
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	4413      	add	r3, r2
 8002320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	b29a      	uxth	r2, r3
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002344:	b29a      	uxth	r2, r3
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e01a      	b.n	8002382 <HAL_PCD_EP_DB_Transmit+0xfe>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d116      	bne.n	8002382 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	4413      	add	r3, r2
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	011a      	lsls	r2, r3, #4
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002374:	4413      	add	r3, r2
 8002376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	2200      	movs	r2, #0
 8002380:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d126      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x15a>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	011a      	lsls	r2, r3, #4
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	e017      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x18a>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	785b      	ldrb	r3, [r3, #1]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d113      	bne.n	800240e <HAL_PCD_EP_DB_Transmit+0x18a>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	4413      	add	r3, r2
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	011a      	lsls	r2, r3, #4
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	4413      	add	r3, r2
 8002402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4619      	mov	r1, r3
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f006 fd5c 	bl	8008ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 82fc 	beq.w	8002a1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002440:	82fb      	strh	r3, [r7, #22]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	441a      	add	r2, r3
 8002450:	8afb      	ldrh	r3, [r7, #22]
 8002452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800245e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]
 8002466:	e2da      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d021      	beq.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	441a      	add	r2, r3
 800249e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80024a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	f040 82ae 	bne.w	8002a1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ca:	441a      	add	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024d8:	441a      	add	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d30b      	bcc.n	8002502 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	e017      	b.n	8002532 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d108      	bne.n	800251c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800250a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800250e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800251a:	e00a      	b.n	8002532 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d165      	bne.n	8002606 <HAL_PCD_EP_DB_Transmit+0x382>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254e:	4413      	add	r3, r2
 8002550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	011a      	lsls	r2, r3, #4
 8002558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255a:	4413      	add	r3, r2
 800255c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256c:	b29a      	uxth	r2, r3
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002576:	2b3e      	cmp	r3, #62	; 0x3e
 8002578:	d91d      	bls.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x332>
 800257a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
 8002582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x310>
 800258e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002590:	3b01      	subs	r3, #1
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29a      	uxth	r2, r3
 800259a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259c:	b29b      	uxth	r3, r3
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	e044      	b.n	8002640 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x350>
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	801a      	strh	r2, [r3, #0]
 80025d2:	e035      	b.n	8002640 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
 80025dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_PCD_EP_DB_Transmit+0x36a>
 80025e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ea:	3301      	adds	r3, #1
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b29a      	uxth	r2, r3
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	801a      	strh	r2, [r3, #0]
 8002604:	e01c      	b.n	8002640 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d118      	bne.n	8002640 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	647b      	str	r3, [r7, #68]	; 0x44
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002622:	4413      	add	r3, r2
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	011a      	lsls	r2, r3, #4
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	4413      	add	r3, r2
 8002630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
 8002636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263a:	b29a      	uxth	r2, r3
 800263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6959      	ldr	r1, [r3, #20]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	891a      	ldrh	r2, [r3, #8]
 800264c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002650:	b29b      	uxth	r3, r3
 8002652:	f004 fcd9 	bl	8007008 <USB_WritePMA>
 8002656:	e1e2      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	3306      	adds	r3, #6
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002680:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800268c:	429a      	cmp	r2, r3
 800268e:	d307      	bcc.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002698:	1ad2      	subs	r2, r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	619a      	str	r2, [r3, #24]
 800269e:	e002      	b.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 80c0 	bne.w	8002830 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d126      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x482>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026cc:	4413      	add	r3, r2
 80026ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	011a      	lsls	r2, r3, #4
 80026d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026d8:	4413      	add	r3, r2
 80026da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026de:	67bb      	str	r3, [r7, #120]	; 0x78
 80026e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e01a      	b.n	800273c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d116      	bne.n	800273c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	667b      	str	r3, [r7, #100]	; 0x64
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002722:	4413      	add	r3, r2
 8002724:	667b      	str	r3, [r7, #100]	; 0x64
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	011a      	lsls	r2, r3, #4
 800272c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800272e:	4413      	add	r3, r2
 8002730:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002734:	663b      	str	r3, [r7, #96]	; 0x60
 8002736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002738:	2200      	movs	r2, #0
 800273a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	677b      	str	r3, [r7, #116]	; 0x74
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d12b      	bne.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275e:	4413      	add	r3, r2
 8002760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	011a      	lsls	r2, r3, #4
 8002768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276a:	4413      	add	r3, r2
 800276c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002780:	b29a      	uxth	r2, r3
 8002782:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002798:	b29a      	uxth	r2, r3
 800279a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e017      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d113      	bne.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b8:	4413      	add	r3, r2
 80027ba:	677b      	str	r3, [r7, #116]	; 0x74
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	011a      	lsls	r2, r3, #4
 80027c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c4:	4413      	add	r3, r2
 80027c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ca:	673b      	str	r3, [r7, #112]	; 0x70
 80027cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ce:	2200      	movs	r2, #0
 80027d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f006 fb7a 	bl	8008ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 811a 	bne.w	8002a1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800281a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]
 800282e:	e0f6      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d121      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002854:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	441a      	add	r2, r3
 8002866:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	f040 80ca 	bne.w	8002a1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002892:	441a      	add	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028a0:	441a      	add	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d30b      	bcc.n	80028ca <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	621a      	str	r2, [r3, #32]
 80028c8:	e017      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028e2:	e00a      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d165      	bne.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291c:	4413      	add	r3, r2
 800291e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	011a      	lsls	r2, r3, #4
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	4413      	add	r3, r2
 800292a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800292e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293a:	b29a      	uxth	r2, r3
 800293c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002944:	2b3e      	cmp	r3, #62	; 0x3e
 8002946:	d91d      	bls.n	8002984 <HAL_PCD_EP_DB_Transmit+0x700>
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x6de>
 800295c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295e:	3b01      	subs	r3, #1
 8002960:	66bb      	str	r3, [r7, #104]	; 0x68
 8002962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29a      	uxth	r2, r3
 8002968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296a:	b29b      	uxth	r3, r3
 800296c:	029b      	lsls	r3, r3, #10
 800296e:	b29b      	uxth	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297c:	b29a      	uxth	r2, r3
 800297e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	e041      	b.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x784>
 8002984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800298c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299a:	b29a      	uxth	r2, r3
 800299c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	e032      	b.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x784>
 80029a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80029aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_PCD_EP_DB_Transmit+0x738>
 80029b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b8:	3301      	adds	r3, #1
 80029ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80029bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	e019      	b.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x784>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d115      	bne.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x784>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	4413      	add	r3, r2
 80029ec:	657b      	str	r3, [r7, #84]	; 0x54
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	011a      	lsls	r2, r3, #4
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	4413      	add	r3, r2
 80029f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029fc:	653b      	str	r3, [r7, #80]	; 0x50
 80029fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a06:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6959      	ldr	r1, [r3, #20]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	895a      	ldrh	r2, [r3, #10]
 8002a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f004 faf5 	bl	8007008 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a38:	82bb      	strh	r3, [r7, #20]
 8002a3a:	8abb      	ldrh	r3, [r7, #20]
 8002a3c:	f083 0310 	eor.w	r3, r3, #16
 8002a40:	82bb      	strh	r3, [r7, #20]
 8002a42:	8abb      	ldrh	r3, [r7, #20]
 8002a44:	f083 0320 	eor.w	r3, r3, #32
 8002a48:	82bb      	strh	r3, [r7, #20]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	441a      	add	r2, r3
 8002a58:	8abb      	ldrh	r3, [r7, #20]
 8002a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3790      	adds	r7, #144	; 0x90
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	4613      	mov	r3, r2
 8002a88:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e009      	b.n	8002ac2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aae:	897a      	ldrh	r2, [r7, #10]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ac2:	893b      	ldrh	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	80da      	strh	r2, [r3, #6]
 8002ad6:	e00b      	b.n	8002af0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2201      	movs	r2, #1
 8002adc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f001 b823 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 817d 	beq.w	8002e36 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b3c:	4bbc      	ldr	r3, [pc, #752]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d00c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b48:	4bb9      	ldr	r3, [pc, #740]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d15c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x10e>
 8002b54:	4bb6      	ldr	r3, [pc, #728]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b60:	d155      	bne.n	8002c0e <HAL_RCC_OscConfig+0x10e>
 8002b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0x94>
 8002b8e:	4ba8      	ldr	r3, [pc, #672]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e015      	b.n	8002bc0 <HAL_RCC_OscConfig+0xc0>
 8002b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b98:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002bb0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bbc:	4b9c      	ldr	r3, [pc, #624]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bc4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bc8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bcc:	fa92 f2a2 	rbit	r2, r2
 8002bd0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bd4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f042 0220 	orr.w	r2, r2, #32
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f002 021f 	and.w	r2, r2, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f202 	lsl.w	r2, r1, r2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 811f 	beq.w	8002e34 <HAL_RCC_OscConfig+0x334>
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 8116 	bne.w	8002e34 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f000 bfaf 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12e>
 8002c20:	4b83      	ldr	r3, [pc, #524]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a82      	ldr	r2, [pc, #520]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e036      	b.n	8002c9c <HAL_RCC_OscConfig+0x19c>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x158>
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7b      	ldr	r2, [pc, #492]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b79      	ldr	r3, [pc, #484]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a78      	ldr	r2, [pc, #480]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e021      	b.n	8002c9c <HAL_RCC_OscConfig+0x19c>
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x184>
 8002c6a:	4b71      	ldr	r3, [pc, #452]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a70      	ldr	r2, [pc, #448]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b6e      	ldr	r3, [pc, #440]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6d      	ldr	r2, [pc, #436]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x19c>
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b67      	ldr	r3, [pc, #412]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a66      	ldr	r2, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c9c:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f023 020f 	bic.w	r2, r3, #15
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	495f      	ldr	r1, [pc, #380]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d059      	beq.n	8002d7a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fd fe77 	bl	80009b8 <HAL_GetTick>
 8002cca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fd fe72 	bl	80009b8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d902      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	f000 bf43 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
 8002ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002cfa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0x218>
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e015      	b.n	8002d44 <HAL_RCC_OscConfig+0x244>
 8002d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d48:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d5c:	fab2 f282 	clz	r2, r2
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f042 0220 	orr.w	r2, r2, #32
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	f002 021f 	and.w	r2, r2, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ab      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x1d0>
 8002d78:	e05d      	b.n	8002e36 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fd fe1d 	bl	80009b8 <HAL_GetTick>
 8002d7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fd fe18 	bl	80009b8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d902      	bls.n	8002d9a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	f000 bee9 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
 8002d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002dae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2cc>
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	e015      	b.n	8002df8 <HAL_RCC_OscConfig+0x2f8>
 8002dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002de8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HAL_RCC_OscConfig+0x330>)
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dfc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e00:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e04:	fa92 f2a2 	rbit	r2, r2
 8002e08:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ab      	bne.n	8002d84 <HAL_RCC_OscConfig+0x284>
 8002e2c:	e003      	b.n	8002e36 <HAL_RCC_OscConfig+0x336>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 817d 	beq.w	8003146 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e4c:	4ba6      	ldr	r3, [pc, #664]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e58:	4ba3      	ldr	r3, [pc, #652]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d172      	bne.n	8002f4a <HAL_RCC_OscConfig+0x44a>
 8002e64:	4ba0      	ldr	r3, [pc, #640]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d16c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x44a>
 8002e70:	2302      	movs	r3, #2
 8002e72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d102      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3a0>
 8002e9a:	4b93      	ldr	r3, [pc, #588]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	e013      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3c8>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002eb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ec4:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ece:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ed2:	fa92 f2a2 	rbit	r2, r2
 8002ed6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002eda:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ede:	fab2 f282 	clz	r2, r2
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f042 0220 	orr.w	r2, r2, #32
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f002 021f 	and.w	r2, r2, #31
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCC_OscConfig+0x410>
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f000 be2e 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b75      	ldr	r3, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	21f8      	movs	r1, #248	; 0xf8
 8002f26:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f2e:	fa91 f1a1 	rbit	r1, r1
 8002f32:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f36:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f3a:	fab1 f181 	clz	r1, r1
 8002f3e:	b2c9      	uxtb	r1, r1
 8002f40:	408b      	lsls	r3, r1
 8002f42:	4969      	ldr	r1, [pc, #420]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f48:	e0fd      	b.n	8003146 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8088 	beq.w	800306c <HAL_RCC_OscConfig+0x56c>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	461a      	mov	r2, r3
 8002f84:	2301      	movs	r3, #1
 8002f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fd fd16 	bl	80009b8 <HAL_GetTick>
 8002f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fd fd11 	bl	80009b8 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	f000 bde2 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4d8>
 8002fd2:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e013      	b.n	8003000 <HAL_RCC_OscConfig+0x500>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fea:	2302      	movs	r3, #2
 8002fec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ff0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ffc:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2202      	movs	r2, #2
 8003002:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003006:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800300a:	fa92 f2a2 	rbit	r2, r2
 800300e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003012:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f042 0220 	orr.w	r2, r2, #32
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f002 021f 	and.w	r2, r2, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0af      	beq.n	8002f92 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	21f8      	movs	r1, #248	; 0xf8
 8003048:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003050:	fa91 f1a1 	rbit	r1, r1
 8003054:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003058:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800305c:	fab1 f181 	clz	r1, r1
 8003060:	b2c9      	uxtb	r1, r1
 8003062:	408b      	lsls	r3, r1
 8003064:	4920      	ldr	r1, [pc, #128]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
 800306a:	e06c      	b.n	8003146 <HAL_RCC_OscConfig+0x646>
 800306c:	2301      	movs	r3, #1
 800306e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800307e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800308c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	461a      	mov	r2, r3
 8003094:	2300      	movs	r3, #0
 8003096:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fd fc8e 	bl	80009b8 <HAL_GetTick>
 800309c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fd fc89 	bl	80009b8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d902      	bls.n	80030b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	f000 bd5a 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d104      	bne.n	80030ec <HAL_RCC_OscConfig+0x5ec>
 80030e2:	4b01      	ldr	r3, [pc, #4]	; (80030e8 <HAL_RCC_OscConfig+0x5e8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	e015      	b.n	8003114 <HAL_RCC_OscConfig+0x614>
 80030e8:	40021000 	.word	0x40021000
 80030ec:	2302      	movs	r3, #2
 80030ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030fe:	2302      	movs	r3, #2
 8003100:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003104:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003110:	4bc8      	ldr	r3, [pc, #800]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2202      	movs	r2, #2
 8003116:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800311a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800311e:	fa92 f2a2 	rbit	r2, r2
 8003122:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003126:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0220 	orr.w	r2, r2, #32
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ad      	bne.n	80030a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8110 	beq.w	800337c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d079      	beq.n	8003260 <HAL_RCC_OscConfig+0x760>
 800316c:	2301      	movs	r3, #1
 800316e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800317e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	4bab      	ldr	r3, [pc, #684]	; (8003438 <HAL_RCC_OscConfig+0x938>)
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	461a      	mov	r2, r3
 8003192:	2301      	movs	r3, #1
 8003194:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003196:	f7fd fc0f 	bl	80009b8 <HAL_GetTick>
 800319a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a0:	f7fd fc0a 	bl	80009b8 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d902      	bls.n	80031b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	f000 bcdb 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
 80031b6:	2302      	movs	r3, #2
 80031b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031d0:	2202      	movs	r2, #2
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	fa93 f2a3 	rbit	r2, r3
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031f4:	2202      	movs	r2, #2
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800320e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003210:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 8003212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800321c:	2102      	movs	r1, #2
 800321e:	6019      	str	r1, [r3, #0]
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f1a3 	rbit	r1, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003236:	6019      	str	r1, [r3, #0]
  return result;
 8003238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0a0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x6a0>
 800325e:	e08d      	b.n	800337c <HAL_RCC_OscConfig+0x87c>
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f2a3 	rbit	r2, r3
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003282:	601a      	str	r2, [r3, #0]
  return result;
 8003284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003288:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800328c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_RCC_OscConfig+0x938>)
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	461a      	mov	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fb89 	bl	80009b8 <HAL_GetTick>
 80032a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fd fb84 	bl	80009b8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d902      	bls.n	80032c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	f000 bc55 	b.w	8003b6c <HAL_RCC_OscConfig+0x106c>
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032ca:	2202      	movs	r2, #2
 80032cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032ee:	2202      	movs	r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	fa93 f2a3 	rbit	r2, r3
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003312:	2202      	movs	r2, #2
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800332c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 8003330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800333a:	2102      	movs	r1, #2
 800333c:	6019      	str	r1, [r3, #0]
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f1a3 	rbit	r1, r3
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003354:	6019      	str	r1, [r3, #0]
  return result;
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d197      	bne.n	80032ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 81a1 	beq.w	80036d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003398:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d116      	bne.n	80033d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	61d3      	str	r3, [r2, #28]
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_RCC_OscConfig+0x93c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11a      	bne.n	8003414 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_RCC_OscConfig+0x93c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_RCC_OscConfig+0x93c>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7fd fae5 	bl	80009b8 <HAL_GetTick>
 80033ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	e009      	b.n	8003408 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7fd fae0 	bl	80009b8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e3b1      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_RCC_OscConfig+0x93c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ef      	beq.n	80033f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d10d      	bne.n	8003440 <HAL_RCC_OscConfig+0x940>
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a02      	ldr	r2, [pc, #8]	; (8003434 <HAL_RCC_OscConfig+0x934>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	e03c      	b.n	80034ac <HAL_RCC_OscConfig+0x9ac>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	10908120 	.word	0x10908120
 800343c:	40007000 	.word	0x40007000
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10c      	bne.n	800346a <HAL_RCC_OscConfig+0x96a>
 8003450:	4bc1      	ldr	r3, [pc, #772]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4ac0      	ldr	r2, [pc, #768]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	4bbe      	ldr	r3, [pc, #760]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4abd      	ldr	r2, [pc, #756]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6213      	str	r3, [r2, #32]
 8003468:	e020      	b.n	80034ac <HAL_RCC_OscConfig+0x9ac>
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x994>
 800347a:	4bb7      	ldr	r3, [pc, #732]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4ab6      	ldr	r2, [pc, #728]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	6213      	str	r3, [r2, #32]
 8003486:	4bb4      	ldr	r3, [pc, #720]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4ab3      	ldr	r2, [pc, #716]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x9ac>
 8003494:	4bb0      	ldr	r3, [pc, #704]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4aaf      	ldr	r2, [pc, #700]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	4bad      	ldr	r3, [pc, #692]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4aac      	ldr	r2, [pc, #688]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8081 	beq.w	80035c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034be:	f7fd fa7b 	bl	80009b8 <HAL_GetTick>
 80034c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fd fa76 	bl	80009b8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e345      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034e8:	2202      	movs	r2, #2
 80034ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	fa93 f2a3 	rbit	r2, r3
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800350c:	2202      	movs	r2, #2
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003526:	601a      	str	r2, [r3, #0]
  return result;
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003530:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d102      	bne.n	800354c <HAL_RCC_OscConfig+0xa4c>
 8003546:	4b84      	ldr	r3, [pc, #528]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	e013      	b.n	8003574 <HAL_RCC_OscConfig+0xa74>
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003578:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800357c:	2102      	movs	r1, #2
 800357e:	6011      	str	r1, [r2, #0]
 8003580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003584:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	fa92 f1a2 	rbit	r1, r2
 800358e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003592:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003596:	6011      	str	r1, [r2, #0]
  return result;
 8003598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800359c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	fab2 f282 	clz	r2, r2
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	f002 021f 	and.w	r2, r2, #31
 80035b2:	2101      	movs	r1, #1
 80035b4:	fa01 f202 	lsl.w	r2, r1, r2
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d084      	beq.n	80034c8 <HAL_RCC_OscConfig+0x9c8>
 80035be:	e07f      	b.n	80036c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fd f9fa 	bl	80009b8 <HAL_GetTick>
 80035c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e00b      	b.n	80035e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fd f9f5 	bl	80009b8 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e2c4      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035ea:	2202      	movs	r2, #2
 80035ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fa93 f2a3 	rbit	r2, r3
 80035fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003600:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800360e:	2202      	movs	r2, #2
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fa93 f2a3 	rbit	r2, r3
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003628:	601a      	str	r2, [r3, #0]
  return result;
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003632:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0302 	orr.w	r3, r3, #2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d102      	bne.n	800364e <HAL_RCC_OscConfig+0xb4e>
 8003648:	4b43      	ldr	r3, [pc, #268]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	e013      	b.n	8003676 <HAL_RCC_OscConfig+0xb76>
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003656:	2202      	movs	r2, #2
 8003658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f2a3 	rbit	r2, r3
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800367e:	2102      	movs	r1, #2
 8003680:	6011      	str	r1, [r2, #0]
 8003682:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003686:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	fa92 f1a2 	rbit	r1, r2
 8003690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003694:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003698:	6011      	str	r1, [r2, #0]
  return result;
 800369a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800369e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d184      	bne.n	80035ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a22      	ldr	r2, [pc, #136]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8242 	beq.w	8003b6a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <HAL_RCC_OscConfig+0xc58>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	f000 8213 	beq.w	8003b1a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b02      	cmp	r3, #2
 8003702:	f040 8162 	bne.w	80039ca <HAL_RCC_OscConfig+0xeca>
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800370e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	fa93 f2a3 	rbit	r2, r3
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800372a:	601a      	str	r2, [r3, #0]
  return result;
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003734:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	461a      	mov	r2, r3
 8003748:	2300      	movs	r3, #0
 800374a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fd f934 	bl	80009b8 <HAL_GetTick>
 8003750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003754:	e00c      	b.n	8003770 <HAL_RCC_OscConfig+0xc70>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd f92c 	bl	80009b8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1fd      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
 8003770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003774:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003794:	601a      	str	r2, [r3, #0]
  return result;
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800379e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_OscConfig+0xcba>
 80037b4:	4bb0      	ldr	r3, [pc, #704]	; (8003a78 <HAL_RCC_OscConfig+0xf78>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	e027      	b.n	800380a <HAL_RCC_OscConfig+0xd0a>
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	fa93 f2a3 	rbit	r2, r3
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	fa93 f2a3 	rbit	r2, r3
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	4b9c      	ldr	r3, [pc, #624]	; (8003a78 <HAL_RCC_OscConfig+0xf78>)
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003812:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003816:	6011      	str	r1, [r2, #0]
 8003818:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800381c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	fa92 f1a2 	rbit	r1, r2
 8003826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800382a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800382e:	6011      	str	r1, [r2, #0]
  return result;
 8003830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003834:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	fab2 f282 	clz	r2, r2
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f042 0220 	orr.w	r2, r2, #32
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f002 021f 	and.w	r2, r2, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d182      	bne.n	800375c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003856:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0xf78>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	430b      	orrs	r3, r1
 8003878:	497f      	ldr	r1, [pc, #508]	; (8003a78 <HAL_RCC_OscConfig+0xf78>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003886:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800388a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f2a3 	rbit	r2, r3
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038a2:	601a      	str	r2, [r3, #0]
  return result;
 80038a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	461a      	mov	r2, r3
 80038c0:	2301      	movs	r3, #1
 80038c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd f878 	bl	80009b8 <HAL_GetTick>
 80038c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038cc:	e009      	b.n	80038e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fd f873 	bl	80009b8 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e144      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
 80038e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	fa93 f2a3 	rbit	r2, r3
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003906:	601a      	str	r2, [r3, #0]
  return result;
 8003908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003910:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d102      	bne.n	800392c <HAL_RCC_OscConfig+0xe2c>
 8003926:	4b54      	ldr	r3, [pc, #336]	; (8003a78 <HAL_RCC_OscConfig+0xf78>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	e027      	b.n	800397c <HAL_RCC_OscConfig+0xe7c>
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	fa93 f2a3 	rbit	r2, r3
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003956:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800395a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	fa93 f2a3 	rbit	r2, r3
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCC_OscConfig+0xf78>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003980:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003984:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800398e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	fa92 f1a2 	rbit	r1, r2
 8003998:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800399c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039a0:	6011      	str	r1, [r2, #0]
  return result;
 80039a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	fab2 f282 	clz	r2, r2
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	f042 0220 	orr.w	r2, r2, #32
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	f002 021f 	and.w	r2, r2, #31
 80039bc:	2101      	movs	r1, #1
 80039be:	fa01 f202 	lsl.w	r2, r1, r2
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d082      	beq.n	80038ce <HAL_RCC_OscConfig+0xdce>
 80039c8:	e0cf      	b.n	8003b6a <HAL_RCC_OscConfig+0x106a>
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	fa93 f2a3 	rbit	r2, r3
 80039e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039ee:	601a      	str	r2, [r3, #0]
  return result;
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fc ffd2 	bl	80009b8 <HAL_GetTick>
 8003a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a18:	e009      	b.n	8003a2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fc ffcd 	bl	80009b8 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e09e      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	fa93 f2a3 	rbit	r2, r3
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a52:	601a      	str	r2, [r3, #0]
  return result;
 8003a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d104      	bne.n	8003a7c <HAL_RCC_OscConfig+0xf7c>
 8003a72:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <HAL_RCC_OscConfig+0xf78>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	e029      	b.n	8003acc <HAL_RCC_OscConfig+0xfcc>
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	fa93 f2a3 	rbit	r2, r3
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <HAL_RCC_OscConfig+0x1078>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ad4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ad8:	6011      	str	r1, [r2, #0]
 8003ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ade:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	fa92 f1a2 	rbit	r1, r2
 8003ae8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003af0:	6011      	str	r1, [r2, #0]
  return result;
 8003af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003af6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	fab2 f282 	clz	r2, r2
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	f042 0220 	orr.w	r2, r2, #32
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f002 021f 	and.w	r2, r2, #31
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d180      	bne.n	8003a1a <HAL_RCC_OscConfig+0xf1a>
 8003b18:	e027      	b.n	8003b6a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e01e      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_OscConfig+0x1078>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b3a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d10b      	bne.n	8003b66 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b09e      	sub	sp, #120	; 0x78
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e162      	b.n	8003e5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b90      	ldr	r3, [pc, #576]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d910      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b8d      	ldr	r3, [pc, #564]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	498b      	ldr	r1, [pc, #556]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e14a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b82      	ldr	r3, [pc, #520]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	497f      	ldr	r1, [pc, #508]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80dc 	beq.w	8003da8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d13c      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xf6>
 8003bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d102      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xa6>
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	e00f      	b.n	8003c42 <HAL_RCC_ClockConfig+0xc6>
 8003c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c34:	663b      	str	r3, [r7, #96]	; 0x60
 8003c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c3e:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c46:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c4a:	fa92 f2a2 	rbit	r2, r2
 8003c4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c52:	fab2 f282 	clz	r2, r2
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f042 0220 	orr.w	r2, r2, #32
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f002 021f 	and.w	r2, r2, #31
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d17b      	bne.n	8003d66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0f3      	b.n	8003e5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d13c      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x178>
 8003c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x128>
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	e00f      	b.n	8003cc4 <HAL_RCC_ClockConfig+0x148>
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc0:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ccc:	fa92 f2a2 	rbit	r2, r2
 8003cd0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd4:	fab2 f282 	clz	r2, r2
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	f042 0220 	orr.w	r2, r2, #32
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	f002 021f 	and.w	r2, r2, #31
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d13a      	bne.n	8003d66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0b2      	b.n	8003e5a <HAL_RCC_ClockConfig+0x2de>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d102      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x1a0>
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	e00d      	b.n	8003d38 <HAL_RCC_ClockConfig+0x1bc>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
 8003d28:	2302      	movs	r3, #2
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2202      	movs	r2, #2
 8003d3a:	61ba      	str	r2, [r7, #24]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	fa92 f2a2 	rbit	r2, r2
 8003d42:	617a      	str	r2, [r7, #20]
  return result;
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	fab2 f282 	clz	r2, r2
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f042 0220 	orr.w	r2, r2, #32
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f002 021f 	and.w	r2, r2, #31
 8003d56:	2101      	movs	r1, #1
 8003d58:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e079      	b.n	8003e5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	491a      	ldr	r1, [pc, #104]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d78:	f7fc fe1e 	bl	80009b8 <HAL_GetTick>
 8003d7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fc fe1a 	bl	80009b8 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e061      	b.n	8003e5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_RCC_ClockConfig+0x260>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d214      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 0207 	bic.w	r2, r3, #7
 8003dbe:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_RCC_ClockConfig+0x25c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e040      	b.n	8003e5a <HAL_RCC_ClockConfig+0x2de>
 8003dd8:	40022000 	.word	0x40022000
 8003ddc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <HAL_RCC_ClockConfig+0x2e8>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	491a      	ldr	r1, [pc, #104]	; (8003e64 <HAL_RCC_ClockConfig+0x2e8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <HAL_RCC_ClockConfig+0x2e8>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4912      	ldr	r1, [pc, #72]	; (8003e64 <HAL_RCC_ClockConfig+0x2e8>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e1e:	f000 f829 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e22:	4601      	mov	r1, r0
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_ClockConfig+0x2e8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e2c:	22f0      	movs	r2, #240	; 0xf0
 8003e2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	fa92 f2a2 	rbit	r2, r2
 8003e36:	60fa      	str	r2, [r7, #12]
  return result;
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	fab2 f282 	clz	r2, r2
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	40d3      	lsrs	r3, r2
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x2ec>)
 8003e44:	5cd3      	ldrb	r3, [r2, r3]
 8003e46:	fa21 f303 	lsr.w	r3, r1, r3
 8003e4a:	4a08      	ldr	r2, [pc, #32]	; (8003e6c <HAL_RCC_ClockConfig+0x2f0>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCC_ClockConfig+0x2f4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fc64 	bl	8000720 <HAL_InitTick>
  
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3778      	adds	r7, #120	; 0x78
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08009d40 	.word	0x08009d40
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	20000004 	.word	0x20000004

08003e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b08b      	sub	sp, #44	; 0x2c
 8003e78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x30>
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x36>
 8003ea2:	e03c      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea4:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ea6:	623b      	str	r3, [r7, #32]
      break;
 8003ea8:	e03c      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003eb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003eb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	fa92 f2a2 	rbit	r2, r2
 8003ebc:	607a      	str	r2, [r7, #4]
  return result;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	fab2 f282 	clz	r2, r2
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	40d3      	lsrs	r3, r2
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ece:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	fab2 f282 	clz	r2, r2
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	40d3      	lsrs	r3, r2
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003efc:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0c:	e004      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	623b      	str	r3, [r7, #32]
      break;
 8003f1c:	e002      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f20:	623b      	str	r3, [r7, #32]
      break;
 8003f22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f24:	6a3b      	ldr	r3, [r7, #32]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	372c      	adds	r7, #44	; 0x2c
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	007a1200 	.word	0x007a1200
 8003f3c:	08009d58 	.word	0x08009d58
 8003f40:	08009d68 	.word	0x08009d68
 8003f44:	003d0900 	.word	0x003d0900

08003f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f66:	f7ff ffef 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	fa92 f2a2 	rbit	r2, r2
 8003f80:	603a      	str	r2, [r7, #0]
  return result;
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	fab2 f282 	clz	r2, r2
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	40d3      	lsrs	r3, r2
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	08009d50 	.word	0x08009d50

08003fa4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_GetClockConfig+0x5c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0203 	and.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <HAL_RCC_GetClockConfig+0x5c>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_RCC_GetClockConfig+0x5c>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <HAL_RCC_GetClockConfig+0x60>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0207 	and.w	r2, r3, #7
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	40022000 	.word	0x40022000

08004008 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b092      	sub	sp, #72	; 0x48
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004018:	2300      	movs	r3, #0
 800401a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80d4 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402c:	4b4e      	ldr	r3, [pc, #312]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10e      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4a4a      	ldr	r2, [pc, #296]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	61d3      	str	r3, [r2, #28]
 8004044:	4b48      	ldr	r3, [pc, #288]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b45      	ldr	r3, [pc, #276]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004062:	4b42      	ldr	r3, [pc, #264]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a41      	ldr	r2, [pc, #260]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fc fca3 	bl	80009b8 <HAL_GetTick>
 8004072:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fc fc9f 	bl	80009b8 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b64      	cmp	r3, #100	; 0x64
 8004082:	d901      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e169      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	4b38      	ldr	r3, [pc, #224]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004094:	4b34      	ldr	r3, [pc, #208]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8084 	beq.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d07c      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b4:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	461a      	mov	r2, r3
 80040de:	2301      	movs	r3, #1
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	461a      	mov	r2, r3
 8004102:	2300      	movs	r3, #0
 8004104:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004106:	4a18      	ldr	r2, [pc, #96]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fc fc4f 	bl	80009b8 <HAL_GetTick>
 800411a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fc fc4b 	bl	80009b8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e113      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004134:	2302      	movs	r3, #2
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
 8004140:	2302      	movs	r3, #2
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	61fb      	str	r3, [r7, #28]
  return result;
 800414c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d108      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004162:	4b01      	ldr	r3, [pc, #4]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	e00d      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
 8004170:	10908100 	.word	0x10908100
 8004174:	2302      	movs	r3, #2
 8004176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	4b78      	ldr	r3, [pc, #480]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2202      	movs	r2, #2
 8004186:	613a      	str	r2, [r7, #16]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	fa92 f2a2 	rbit	r2, r2
 800418e:	60fa      	str	r2, [r7, #12]
  return result;
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	fab2 f282 	clz	r2, r2
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	f002 021f 	and.w	r2, r2, #31
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f202 	lsl.w	r2, r1, r2
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0b7      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041ae:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	496a      	ldr	r1, [pc, #424]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c8:	4b66      	ldr	r3, [pc, #408]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4a65      	ldr	r2, [pc, #404]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041e0:	4b60      	ldr	r3, [pc, #384]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f023 0203 	bic.w	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	495d      	ldr	r1, [pc, #372]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041fe:	4b59      	ldr	r3, [pc, #356]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4956      	ldr	r1, [pc, #344]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800421c:	4b51      	ldr	r3, [pc, #324]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	494e      	ldr	r1, [pc, #312]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800423a:	4b4a      	ldr	r3, [pc, #296]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f023 0210 	bic.w	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4947      	ldr	r1, [pc, #284]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004258:	4b42      	ldr	r3, [pc, #264]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	493f      	ldr	r1, [pc, #252]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004276:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f023 0220 	bic.w	r2, r3, #32
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4938      	ldr	r1, [pc, #224]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004294:	4b33      	ldr	r3, [pc, #204]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4930      	ldr	r1, [pc, #192]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042b2:	4b2c      	ldr	r3, [pc, #176]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	4929      	ldr	r1, [pc, #164]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4921      	ldr	r1, [pc, #132]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	491a      	ldr	r1, [pc, #104]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800430c:	4b15      	ldr	r3, [pc, #84]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	4912      	ldr	r1, [pc, #72]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431a:	4313      	orrs	r3, r2
 800431c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	490b      	ldr	r1, [pc, #44]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	4903      	ldr	r1, [pc, #12]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3748      	adds	r7, #72	; 0x48
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e09d      	b.n	80044b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d108      	bne.n	8004394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d009      	beq.n	80043a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	61da      	str	r2, [r3, #28]
 8004392:	e005      	b.n	80043a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc f96e 	bl	800069c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043e0:	d902      	bls.n	80043e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e002      	b.n	80043ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043f6:	d007      	beq.n	8004408 <HAL_SPI_Init+0xa0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004400:	d002      	beq.n	8004408 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	ea42 0103 	orr.w	r1, r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	f003 0204 	and.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004484:	ea42 0103 	orr.w	r1, r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e049      	b.n	8004564 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f841 	bl	800456c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f000 f9f1 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e04a      	b.n	800462e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a21      	ldr	r2, [pc, #132]	; (800463c <HAL_TIM_Base_Start_IT+0xbc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x6c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c2:	d013      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x6c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <HAL_TIM_Base_Start_IT+0xc0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x6c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <HAL_TIM_Base_Start_IT+0xc4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x6c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <HAL_TIM_Base_Start_IT+0xc8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x6c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_TIM_Base_Start_IT+0xcc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d115      	bne.n	8004618 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_TIM_Base_Start_IT+0xd0>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d015      	beq.n	800462a <HAL_TIM_Base_Start_IT+0xaa>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d011      	beq.n	800462a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	e008      	b.n	800462a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e000      	b.n	800462c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40013400 	.word	0x40013400
 800464c:	40014000 	.word	0x40014000
 8004650:	00010007 	.word	0x00010007

08004654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b02      	cmp	r3, #2
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0202 	mvn.w	r2, #2
 8004680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f905 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8f7 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f908 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0204 	mvn.w	r2, #4
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8db 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8cd 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8de 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b08      	cmp	r3, #8
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0208 	mvn.w	r2, #8
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8b1 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8a3 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8b4 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b10      	cmp	r3, #16
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b10      	cmp	r3, #16
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0210 	mvn.w	r2, #16
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2208      	movs	r2, #8
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f887 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f879 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f88a 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10e      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0201 	mvn.w	r2, #1
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fb fee2 	bl	800059c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b80      	cmp	r3, #128	; 0x80
 80047e4:	d10e      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d107      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f90a 	bl	8004a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004812:	d10e      	bne.n	8004832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d107      	bne.n	8004832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800482a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8fd 	bl	8004a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d10e      	bne.n	800485e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d107      	bne.n	800485e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f838 	bl	80048ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b20      	cmp	r3, #32
 800486a:	d10e      	bne.n	800488a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b20      	cmp	r3, #32
 8004878:	d107      	bne.n	800488a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0220 	mvn.w	r2, #32
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8bd 	bl	8004a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3c      	ldr	r2, [pc, #240]	; (80049e8 <TIM_Base_SetConfig+0x104>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a39      	ldr	r2, [pc, #228]	; (80049ec <TIM_Base_SetConfig+0x108>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <TIM_Base_SetConfig+0x10c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a37      	ldr	r2, [pc, #220]	; (80049f4 <TIM_Base_SetConfig+0x110>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <TIM_Base_SetConfig+0x104>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01b      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d017      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2a      	ldr	r2, [pc, #168]	; (80049ec <TIM_Base_SetConfig+0x108>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a29      	ldr	r2, [pc, #164]	; (80049f0 <TIM_Base_SetConfig+0x10c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00f      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <TIM_Base_SetConfig+0x110>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <TIM_Base_SetConfig+0x118>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <TIM_Base_SetConfig+0x104>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0xe8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a11      	ldr	r2, [pc, #68]	; (80049f4 <TIM_Base_SetConfig+0x110>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0xe8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a10      	ldr	r2, [pc, #64]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0xe8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0f      	ldr	r2, [pc, #60]	; (80049fc <TIM_Base_SetConfig+0x118>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0xe8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <TIM_Base_SetConfig+0x11c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800

08004a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a76:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	f107 0014 	add.w	r0, r7, #20
 8004ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	b004      	add	sp, #16
 8004ae4:	4770      	bx	lr
	...

08004ae8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b09d      	sub	sp, #116	; 0x74
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	78db      	ldrb	r3, [r3, #3]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d81f      	bhi.n	8004b5a <USB_ActivateEndpoint+0x72>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <USB_ActivateEndpoint+0x38>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	08004b63 	.word	0x08004b63
 8004b2c:	08004b3f 	.word	0x08004b3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b3c:	e012      	b.n	8004b64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b4a:	e00b      	b.n	8004b64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b58:	e004      	b.n	8004b64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004b60:	e000      	b.n	8004b64 <USB_ActivateEndpoint+0x7c>
      break;
 8004b62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	b21b      	sxth	r3, r3
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b21b      	sxth	r3, r3
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	7b1b      	ldrb	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 8178 	bne.w	8004eca <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8084 	beq.w	8004cec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	011a      	lsls	r2, r3, #4
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	88db      	ldrh	r3, [r3, #6]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	827b      	strh	r3, [r7, #18]
 8004c26:	8a7b      	ldrh	r3, [r7, #18]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <USB_ActivateEndpoint+0x180>
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	823b      	strh	r3, [r7, #16]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	8a3b      	ldrh	r3, [r7, #16]
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	78db      	ldrb	r3, [r3, #3]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d020      	beq.n	8004cb2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c86:	81bb      	strh	r3, [r7, #12]
 8004c88:	89bb      	ldrh	r3, [r7, #12]
 8004c8a:	f083 0320 	eor.w	r3, r3, #32
 8004c8e:	81bb      	strh	r3, [r7, #12]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	89bb      	ldrh	r3, [r7, #12]
 8004c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	8013      	strh	r3, [r2, #0]
 8004cb0:	e2d5      	b.n	800525e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc8:	81fb      	strh	r3, [r7, #14]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	89fb      	ldrh	r3, [r7, #14]
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]
 8004cea:	e2b8      	b.n	800525e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	4413      	add	r3, r2
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	011a      	lsls	r2, r3, #4
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	88db      	ldrh	r3, [r3, #6]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	4413      	add	r3, r2
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	011a      	lsls	r2, r3, #4
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b3e      	cmp	r3, #62	; 0x3e
 8004d5a:	d91d      	bls.n	8004d98 <USB_ActivateEndpoint+0x2b0>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <USB_ActivateEndpoint+0x28e>
 8004d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d72:	3b01      	subs	r3, #1
 8004d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	4313      	orrs	r3, r2
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	e026      	b.n	8004de6 <USB_ActivateEndpoint+0x2fe>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <USB_ActivateEndpoint+0x2ce>
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	e017      	b.n	8004de6 <USB_ActivateEndpoint+0x2fe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <USB_ActivateEndpoint+0x2e8>
 8004dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dcc:	3301      	adds	r3, #1
 8004dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01b      	beq.n	8004e36 <USB_ActivateEndpoint+0x34e>
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	843b      	strh	r3, [r7, #32]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	8c3b      	ldrh	r3, [r7, #32]
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d124      	bne.n	8004e88 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	83bb      	strh	r3, [r7, #28]
 8004e56:	8bbb      	ldrh	r3, [r7, #28]
 8004e58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e5c:	83bb      	strh	r3, [r7, #28]
 8004e5e:	8bbb      	ldrh	r3, [r7, #28]
 8004e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e64:	83bb      	strh	r3, [r7, #28]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	8bbb      	ldrh	r3, [r7, #28]
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]
 8004e86:	e1ea      	b.n	800525e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	83fb      	strh	r3, [r7, #30]
 8004ea0:	8bfb      	ldrh	r3, [r7, #30]
 8004ea2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ea6:	83fb      	strh	r3, [r7, #30]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	8bfb      	ldrh	r3, [r7, #30]
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]
 8004ec8:	e1c9      	b.n	800525e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	78db      	ldrb	r3, [r3, #3]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d11e      	bne.n	8004f10 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
 8004f0e:	e01d      	b.n	8004f4c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5c:	4413      	add	r3, r2
 8004f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	011a      	lsls	r2, r3, #4
 8004f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	891b      	ldrh	r3, [r3, #8]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	657b      	str	r3, [r7, #84]	; 0x54
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f90:	4413      	add	r3, r2
 8004f92:	657b      	str	r3, [r7, #84]	; 0x54
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	011a      	lsls	r2, r3, #4
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	895b      	ldrh	r3, [r3, #10]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f040 8093 	bne.w	80050e4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01b      	beq.n	8005012 <USB_ActivateEndpoint+0x52a>
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005020:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01b      	beq.n	8005062 <USB_ActivateEndpoint+0x57a>
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	873b      	strh	r3, [r7, #56]	; 0x38
 800507a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800507c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005080:	873b      	strh	r3, [r7, #56]	; 0x38
 8005082:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005084:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005088:	873b      	strh	r3, [r7, #56]	; 0x38
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]
 80050e2:	e0bc      	b.n	800525e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80050f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01d      	beq.n	800513c <USB_ActivateEndpoint+0x654>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800514c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01d      	beq.n	8005194 <USB_ActivateEndpoint+0x6ac>
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	78db      	ldrb	r3, [r3, #3]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d024      	beq.n	80051e6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051ba:	f083 0320 	eor.w	r3, r3, #32
 80051be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]
 80051e4:	e01d      	b.n	8005222 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800520e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521e:	b29b      	uxth	r3, r3
 8005220:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005238:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800525e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005262:	4618      	mov	r0, r3
 8005264:	3774      	adds	r7, #116	; 0x74
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005270:	b480      	push	{r7}
 8005272:	b08d      	sub	sp, #52	; 0x34
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	7b1b      	ldrb	r3, [r3, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 808e 	bne.w	80053a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d044      	beq.n	8005316 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	81bb      	strh	r3, [r7, #12]
 800529a:	89bb      	ldrh	r3, [r7, #12]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <USB_DeactivateEndpoint+0x6c>
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ba:	817b      	strh	r3, [r7, #10]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	441a      	add	r2, r3
 80052c6:	897b      	ldrh	r3, [r7, #10]
 80052c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d8:	b29b      	uxth	r3, r3
 80052da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f2:	813b      	strh	r3, [r7, #8]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	441a      	add	r2, r3
 80052fe:	893b      	ldrh	r3, [r7, #8]
 8005300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	b29b      	uxth	r3, r3
 8005312:	8013      	strh	r3, [r2, #0]
 8005314:	e192      	b.n	800563c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	827b      	strh	r3, [r7, #18]
 8005324:	8a7b      	ldrh	r3, [r7, #18]
 8005326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01b      	beq.n	8005366 <USB_DeactivateEndpoint+0xf6>
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005344:	823b      	strh	r3, [r7, #16]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	8a3b      	ldrh	r3, [r7, #16]
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	81fb      	strh	r3, [r7, #14]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	89fb      	ldrh	r3, [r7, #14]
 800538a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]
 800539e:	e14d      	b.n	800563c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 80a5 	bne.w	80054f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	843b      	strh	r3, [r7, #32]
 80053b8:	8c3b      	ldrh	r3, [r7, #32]
 80053ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01b      	beq.n	80053fa <USB_DeactivateEndpoint+0x18a>
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	83fb      	strh	r3, [r7, #30]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	8bfb      	ldrh	r3, [r7, #30]
 80053e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	83bb      	strh	r3, [r7, #28]
 8005408:	8bbb      	ldrh	r3, [r7, #28]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01b      	beq.n	800544a <USB_DeactivateEndpoint+0x1da>
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	837b      	strh	r3, [r7, #26]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	8b7b      	ldrh	r3, [r7, #26]
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005460:	833b      	strh	r3, [r7, #24]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	441a      	add	r2, r3
 800546c:	8b3b      	ldrh	r3, [r7, #24]
 800546e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800547e:	b29b      	uxth	r3, r3
 8005480:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	82fb      	strh	r3, [r7, #22]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	8afb      	ldrh	r3, [r7, #22]
 80054a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	82bb      	strh	r3, [r7, #20]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	441a      	add	r2, r3
 80054dc:	8abb      	ldrh	r3, [r7, #20]
 80054de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	8013      	strh	r3, [r2, #0]
 80054f2:	e0a3      	b.n	800563c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01b      	beq.n	8005544 <USB_DeactivateEndpoint+0x2d4>
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005552:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <USB_DeactivateEndpoint+0x324>
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	853b      	strh	r3, [r7, #40]	; 0x28
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005600:	b29b      	uxth	r3, r3
 8005602:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	847b      	strh	r3, [r7, #34]	; 0x22
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	441a      	add	r2, r3
 8005626:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005638:	b29b      	uxth	r3, r3
 800563a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3734      	adds	r7, #52	; 0x34
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b0c2      	sub	sp, #264	; 0x108
 800564e:	af00      	add	r7, sp, #0
 8005650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005658:	6018      	str	r0, [r3, #0]
 800565a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005662:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b01      	cmp	r3, #1
 8005672:	f040 86b7 	bne.w	80063e4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d908      	bls.n	80056a4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056a2:	e007      	b.n	80056b4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80056a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	7b1b      	ldrb	r3, [r3, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d13a      	bne.n	800573a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6959      	ldr	r1, [r3, #20]
 80056d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	88da      	ldrh	r2, [r3, #6]
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	f001 fc8c 	bl	8007008 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	011a      	lsls	r2, r3, #4
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	f000 be1f 	b.w	8006378 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800573a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	78db      	ldrb	r3, [r3, #3]
 8005746:	2b02      	cmp	r3, #2
 8005748:	f040 8462 	bne.w	8006010 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800574c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a1a      	ldr	r2, [r3, #32]
 8005758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	429a      	cmp	r2, r3
 8005766:	f240 83df 	bls.w	8005f28 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800576a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005790:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 81c7 	beq.w	8005b9a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	633b      	str	r3, [r7, #48]	; 0x30
 8005818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d177      	bne.n	8005918 <USB_EPStartXfer+0x2ce>
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005842:	b29b      	uxth	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	4413      	add	r3, r2
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	011a      	lsls	r2, r3, #4
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	4413      	add	r3, r2
 800585e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800586e:	b29a      	uxth	r2, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	2b3e      	cmp	r3, #62	; 0x3e
 800587a:	d921      	bls.n	80058c0 <USB_EPStartXfer+0x276>
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <USB_EPStartXfer+0x252>
 8005892:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005896:	3b01      	subs	r3, #1
 8005898:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	029b      	lsls	r3, r3, #10
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e050      	b.n	8005962 <USB_EPStartXfer+0x318>
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <USB_EPStartXfer+0x294>
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e041      	b.n	8005962 <USB_EPStartXfer+0x318>
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <USB_EPStartXfer+0x2b4>
 80058f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29a      	uxth	r2, r3
 8005904:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005908:	b29b      	uxth	r3, r3
 800590a:	029b      	lsls	r3, r3, #10
 800590c:	b29b      	uxth	r3, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	b29a      	uxth	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	e024      	b.n	8005962 <USB_EPStartXfer+0x318>
 8005918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d11c      	bne.n	8005962 <USB_EPStartXfer+0x318>
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005936:	b29b      	uxth	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	4413      	add	r3, r2
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	011a      	lsls	r2, r3, #4
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	4413      	add	r3, r2
 8005952:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595c:	b29a      	uxth	r2, r3
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	895b      	ldrh	r3, [r3, #10]
 800596e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6959      	ldr	r1, [r3, #20]
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005982:	b29b      	uxth	r3, r3
 8005984:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005988:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800598c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005990:	6800      	ldr	r0, [r0, #0]
 8005992:	f001 fb39 	bl	8007008 <USB_WritePMA>
            ep->xfer_buff += len;
 8005996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a6:	441a      	add	r2, r3
 80059a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d90f      	bls.n	80059f0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a1a      	ldr	r2, [r3, #32]
 80059dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	621a      	str	r2, [r3, #32]
 80059ee:	e00e      	b.n	8005a0e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d177      	bne.n	8005b0e <USB_EPStartXfer+0x4c4>
 8005a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	4413      	add	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	011a      	lsls	r2, r3, #4
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a70:	d921      	bls.n	8005ab6 <USB_EPStartXfer+0x46c>
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <USB_EPStartXfer+0x448>
 8005a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	029b      	lsls	r3, r3, #10
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e056      	b.n	8005b64 <USB_EPStartXfer+0x51a>
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <USB_EPStartXfer+0x48a>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e047      	b.n	8005b64 <USB_EPStartXfer+0x51a>
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <USB_EPStartXfer+0x4aa>
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aee:	3301      	adds	r3, #1
 8005af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	4313      	orrs	r3, r2
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e02a      	b.n	8005b64 <USB_EPStartXfer+0x51a>
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d122      	bne.n	8005b64 <USB_EPStartXfer+0x51a>
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	4413      	add	r3, r2
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	011a      	lsls	r2, r3, #4
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	891b      	ldrh	r3, [r3, #8]
 8005b70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6959      	ldr	r1, [r3, #20]
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b92:	6800      	ldr	r0, [r0, #0]
 8005b94:	f001 fa38 	bl	8007008 <USB_WritePMA>
 8005b98:	e3ee      	b.n	8006378 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d177      	bne.n	8005c9a <USB_EPStartXfer+0x650>
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bca:	4413      	add	r3, r2
 8005bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	011a      	lsls	r2, r3, #4
 8005bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005be4:	647b      	str	r3, [r7, #68]	; 0x44
 8005be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005bfc:	d921      	bls.n	8005c42 <USB_EPStartXfer+0x5f8>
 8005bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <USB_EPStartXfer+0x5d4>
 8005c14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e056      	b.n	8005cf0 <USB_EPStartXfer+0x6a6>
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <USB_EPStartXfer+0x616>
 8005c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	e047      	b.n	8005cf0 <USB_EPStartXfer+0x6a6>
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <USB_EPStartXfer+0x636>
 8005c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	029b      	lsls	r3, r3, #10
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4313      	orrs	r3, r2
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	e02a      	b.n	8005cf0 <USB_EPStartXfer+0x6a6>
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d122      	bne.n	8005cf0 <USB_EPStartXfer+0x6a6>
 8005caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cca:	4413      	add	r3, r2
 8005ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	011a      	lsls	r2, r3, #4
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cde:	4413      	add	r3, r2
 8005ce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	891b      	ldrh	r3, [r3, #8]
 8005cfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6959      	ldr	r1, [r3, #20]
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d1e:	6800      	ldr	r0, [r0, #0]
 8005d20:	f001 f972 	bl	8007008 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d34:	441a      	add	r2, r3
 8005d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d90f      	bls.n	8005d7e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	621a      	str	r2, [r3, #32]
 8005d7c:	e00e      	b.n	8005d9c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	643b      	str	r3, [r7, #64]	; 0x40
 8005da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d177      	bne.n	8005ea8 <USB_EPStartXfer+0x85e>
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	4413      	add	r3, r2
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	011a      	lsls	r2, r3, #4
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	4413      	add	r3, r2
 8005dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	2b3e      	cmp	r3, #62	; 0x3e
 8005e0a:	d921      	bls.n	8005e50 <USB_EPStartXfer+0x806>
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <USB_EPStartXfer+0x7e2>
 8005e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e26:	3b01      	subs	r3, #1
 8005e28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	029b      	lsls	r3, r3, #10
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e050      	b.n	8005ef2 <USB_EPStartXfer+0x8a8>
 8005e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <USB_EPStartXfer+0x824>
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	e041      	b.n	8005ef2 <USB_EPStartXfer+0x8a8>
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <USB_EPStartXfer+0x844>
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	3301      	adds	r3, #1
 8005e8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	029b      	lsls	r3, r3, #10
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e024      	b.n	8005ef2 <USB_EPStartXfer+0x8a8>
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d11c      	bne.n	8005ef2 <USB_EPStartXfer+0x8a8>
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	4413      	add	r3, r2
 8005ece:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	011a      	lsls	r2, r3, #4
 8005ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	895b      	ldrh	r3, [r3, #10]
 8005efe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6959      	ldr	r1, [r3, #20]
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f20:	6800      	ldr	r0, [r0, #0]
 8005f22:	f001 f871 	bl	8007008 <USB_WritePMA>
 8005f26:	e227      	b.n	8006378 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb4:	4413      	add	r3, r2
 8005fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc8:	4413      	add	r3, r2
 8005fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fce:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	891b      	ldrh	r3, [r3, #8]
 8005fe6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6959      	ldr	r1, [r3, #20]
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006000:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006004:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006008:	6800      	ldr	r0, [r0, #0]
 800600a:	f000 fffd 	bl	8007008 <USB_WritePMA>
 800600e:	e1b3      	b.n	8006378 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800602e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80c6 	beq.w	80061e2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	673b      	str	r3, [r7, #112]	; 0x70
 8006062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d177      	bne.n	8006162 <USB_EPStartXfer+0xb18>
 8006072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	66bb      	str	r3, [r7, #104]	; 0x68
 800607e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608c:	b29b      	uxth	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006092:	4413      	add	r3, r2
 8006094:	66bb      	str	r3, [r7, #104]	; 0x68
 8006096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	011a      	lsls	r2, r3, #4
 80060a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a6:	4413      	add	r3, r2
 80060a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ac:	667b      	str	r3, [r7, #100]	; 0x64
 80060ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	2b3e      	cmp	r3, #62	; 0x3e
 80060c4:	d921      	bls.n	800610a <USB_EPStartXfer+0xac0>
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d4:	f003 031f 	and.w	r3, r3, #31
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <USB_EPStartXfer+0xa9c>
 80060dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060e0:	3b01      	subs	r3, #1
 80060e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e050      	b.n	80061ac <USB_EPStartXfer+0xb62>
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <USB_EPStartXfer+0xade>
 8006112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006120:	b29a      	uxth	r2, r3
 8006122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e041      	b.n	80061ac <USB_EPStartXfer+0xb62>
 8006128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d004      	beq.n	8006148 <USB_EPStartXfer+0xafe>
 800613e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006142:	3301      	adds	r3, #1
 8006144:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29a      	uxth	r2, r3
 800614e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006152:	b29b      	uxth	r3, r3
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	b29b      	uxth	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b29a      	uxth	r2, r3
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	801a      	strh	r2, [r3, #0]
 8006160:	e024      	b.n	80061ac <USB_EPStartXfer+0xb62>
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d11c      	bne.n	80061ac <USB_EPStartXfer+0xb62>
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006180:	b29b      	uxth	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006186:	4413      	add	r3, r2
 8006188:	673b      	str	r3, [r7, #112]	; 0x70
 800618a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	011a      	lsls	r2, r3, #4
 8006198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800619a:	4413      	add	r3, r2
 800619c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	895b      	ldrh	r3, [r3, #10]
 80061b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6959      	ldr	r1, [r3, #20]
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	f000 ff14 	bl	8007008 <USB_WritePMA>
 80061e0:	e0ca      	b.n	8006378 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d177      	bne.n	80062e2 <USB_EPStartXfer+0xc98>
 80061f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620c:	b29b      	uxth	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006212:	4413      	add	r3, r2
 8006214:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	011a      	lsls	r2, r3, #4
 8006224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006226:	4413      	add	r3, r2
 8006228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800622c:	67bb      	str	r3, [r7, #120]	; 0x78
 800622e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006238:	b29a      	uxth	r2, r3
 800623a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006242:	2b3e      	cmp	r3, #62	; 0x3e
 8006244:	d921      	bls.n	800628a <USB_EPStartXfer+0xc40>
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <USB_EPStartXfer+0xc1c>
 800625c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006260:	3b01      	subs	r3, #1
 8006262:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006270:	b29b      	uxth	r3, r3
 8006272:	029b      	lsls	r3, r3, #10
 8006274:	b29b      	uxth	r3, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	b29b      	uxth	r3, r3
 800627a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006282:	b29a      	uxth	r2, r3
 8006284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e05c      	b.n	8006344 <USB_EPStartXfer+0xcfa>
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <USB_EPStartXfer+0xc5e>
 8006292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e04d      	b.n	8006344 <USB_EPStartXfer+0xcfa>
 80062a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <USB_EPStartXfer+0xc7e>
 80062be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062c2:	3301      	adds	r3, #1
 80062c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	e030      	b.n	8006344 <USB_EPStartXfer+0xcfa>
 80062e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d128      	bne.n	8006344 <USB_EPStartXfer+0xcfa>
 80062f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006316:	4413      	add	r3, r2
 8006318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800631c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	011a      	lsls	r2, r3, #4
 800632a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800632e:	4413      	add	r3, r2
 8006330:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006342:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	891b      	ldrh	r3, [r3, #8]
 8006350:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6959      	ldr	r1, [r3, #20]
 8006360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006364:	b29b      	uxth	r3, r3
 8006366:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800636a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800636e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006372:	6800      	ldr	r0, [r0, #0]
 8006374:	f000 fe48 	bl	8007008 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800639e:	817b      	strh	r3, [r7, #10]
 80063a0:	897b      	ldrh	r3, [r7, #10]
 80063a2:	f083 0310 	eor.w	r3, r3, #16
 80063a6:	817b      	strh	r3, [r7, #10]
 80063a8:	897b      	ldrh	r3, [r7, #10]
 80063aa:	f083 0320 	eor.w	r3, r3, #32
 80063ae:	817b      	strh	r3, [r7, #10]
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	441a      	add	r2, r3
 80063ca:	897b      	ldrh	r3, [r7, #10]
 80063cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063dc:	b29b      	uxth	r3, r3
 80063de:	8013      	strh	r3, [r2, #0]
 80063e0:	f000 bcde 	b.w	8006da0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80063e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	7b1b      	ldrb	r3, [r3, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 80bb 	bne.w	800656c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80063f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	429a      	cmp	r2, r3
 8006410:	d917      	bls.n	8006442 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	619a      	str	r2, [r3, #24]
 8006440:	e00e      	b.n	8006460 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2200      	movs	r2, #0
 800645e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647c:	b29b      	uxth	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006484:	4413      	add	r3, r2
 8006486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	011a      	lsls	r2, r3, #4
 8006498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800649c:	4413      	add	r3, r2
 800649e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	2b3e      	cmp	r3, #62	; 0x3e
 80064c0:	d924      	bls.n	800650c <USB_EPStartXfer+0xec2>
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <USB_EPStartXfer+0xe98>
 80064d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064dc:	3b01      	subs	r3, #1
 80064de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	029b      	lsls	r3, r3, #10
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	f000 bc10 	b.w	8006d2c <USB_EPStartXfer+0x16e2>
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10c      	bne.n	800652e <USB_EPStartXfer+0xee4>
 8006514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006524:	b29a      	uxth	r2, r3
 8006526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e3fe      	b.n	8006d2c <USB_EPStartXfer+0x16e2>
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <USB_EPStartXfer+0xf04>
 8006544:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006548:	3301      	adds	r3, #1
 800654a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800654e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800655a:	b29b      	uxth	r3, r3
 800655c:	029b      	lsls	r3, r3, #10
 800655e:	b29b      	uxth	r3, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	b29a      	uxth	r2, r3
 8006564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	e3df      	b.n	8006d2c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800656c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	78db      	ldrb	r3, [r3, #3]
 8006578:	2b02      	cmp	r3, #2
 800657a:	f040 8218 	bne.w	80069ae <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800657e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	2b00      	cmp	r3, #0
 800658c:	f040 809d 	bne.w	80066ca <USB_EPStartXfer+0x1080>
 8006590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b4:	4413      	add	r3, r2
 80065b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	011a      	lsls	r2, r3, #4
 80065c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b3e      	cmp	r3, #62	; 0x3e
 80065f8:	d92b      	bls.n	8006652 <USB_EPStartXfer+0x1008>
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800660c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <USB_EPStartXfer+0xfe0>
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	3b01      	subs	r3, #1
 8006626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800662a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29a      	uxth	r2, r3
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	b29b      	uxth	r3, r3
 8006638:	029b      	lsls	r3, r3, #10
 800663a:	b29b      	uxth	r3, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006648:	b29a      	uxth	r2, r3
 800664a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e070      	b.n	8006734 <USB_EPStartXfer+0x10ea>
 8006652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10c      	bne.n	800667c <USB_EPStartXfer+0x1032>
 8006662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006672:	b29a      	uxth	r2, r3
 8006674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	e05b      	b.n	8006734 <USB_EPStartXfer+0x10ea>
 800667c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800668e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <USB_EPStartXfer+0x1062>
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	3301      	adds	r3, #1
 80066a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e034      	b.n	8006734 <USB_EPStartXfer+0x10ea>
 80066ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d12c      	bne.n	8006734 <USB_EPStartXfer+0x10ea>
 80066da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066fe:	4413      	add	r3, r2
 8006700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	011a      	lsls	r2, r3, #4
 8006712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006716:	4413      	add	r3, r2
 8006718:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800671c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	b29a      	uxth	r2, r3
 800672e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 809d 	bne.w	800688e <USB_EPStartXfer+0x1244>
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006778:	4413      	add	r3, r2
 800677a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	011a      	lsls	r2, r3, #4
 800678c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006790:	4413      	add	r3, r2
 8006792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006796:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800679a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b3e      	cmp	r3, #62	; 0x3e
 80067bc:	d92b      	bls.n	8006816 <USB_EPStartXfer+0x11cc>
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d104      	bne.n	80067ee <USB_EPStartXfer+0x11a4>
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e8:	3b01      	subs	r3, #1
 80067ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	029b      	lsls	r3, r3, #10
 80067fe:	b29b      	uxth	r3, r3
 8006800:	4313      	orrs	r3, r2
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e069      	b.n	80068ea <USB_EPStartXfer+0x12a0>
 8006816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10c      	bne.n	8006840 <USB_EPStartXfer+0x11f6>
 8006826:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006836:	b29a      	uxth	r2, r3
 8006838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	e054      	b.n	80068ea <USB_EPStartXfer+0x12a0>
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <USB_EPStartXfer+0x1226>
 8006866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686a:	3301      	adds	r3, #1
 800686c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29a      	uxth	r2, r3
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687c:	b29b      	uxth	r3, r3
 800687e:	029b      	lsls	r3, r3, #10
 8006880:	b29b      	uxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b29a      	uxth	r2, r3
 8006886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	e02d      	b.n	80068ea <USB_EPStartXfer+0x12a0>
 800688e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	785b      	ldrb	r3, [r3, #1]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d125      	bne.n	80068ea <USB_EPStartXfer+0x12a0>
 800689e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068b4:	4413      	add	r3, r2
 80068b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 8218 	beq.w	8006d2c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800691c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <USB_EPStartXfer+0x12ea>
 8006928:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10d      	bne.n	8006950 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006934:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 81f5 	bne.w	8006d2c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006942:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 81ee 	bne.w	8006d2c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800697a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
 80069ac:	e1be      	b.n	8006d2c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80069ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	78db      	ldrb	r3, [r3, #3]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	f040 81b4 	bne.w	8006d28 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80069c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d917      	bls.n	8006a0c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80069dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80069ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fc:	1ad2      	subs	r2, r2, r3
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	619a      	str	r2, [r3, #24]
 8006a0a:	e00e      	b.n	8006a2a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 8085 	bne.w	8006b46 <USB_EPStartXfer+0x14fc>
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a60:	4413      	add	r3, r2
 8006a62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	011a      	lsls	r2, r3, #4
 8006a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a9c:	d923      	bls.n	8006ae6 <USB_EPStartXfer+0x149c>
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <USB_EPStartXfer+0x1474>
 8006ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	029b      	lsls	r3, r3, #10
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	e060      	b.n	8006ba8 <USB_EPStartXfer+0x155e>
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10c      	bne.n	8006b08 <USB_EPStartXfer+0x14be>
 8006aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e04f      	b.n	8006ba8 <USB_EPStartXfer+0x155e>
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <USB_EPStartXfer+0x14de>
 8006b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b22:	3301      	adds	r3, #1
 8006b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e030      	b.n	8006ba8 <USB_EPStartXfer+0x155e>
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d128      	bne.n	8006ba8 <USB_EPStartXfer+0x155e>
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b92:	4413      	add	r3, r2
 8006b94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f040 8085 	bne.w	8006cd2 <USB_EPStartXfer+0x1688>
 8006bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006bec:	4413      	add	r3, r2
 8006bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	011a      	lsls	r2, r3, #4
 8006c00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c26:	2b3e      	cmp	r3, #62	; 0x3e
 8006c28:	d923      	bls.n	8006c72 <USB_EPStartXfer+0x1628>
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	f003 031f 	and.w	r3, r3, #31
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <USB_EPStartXfer+0x1600>
 8006c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c44:	3b01      	subs	r3, #1
 8006c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e05c      	b.n	8006d2c <USB_EPStartXfer+0x16e2>
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10c      	bne.n	8006c94 <USB_EPStartXfer+0x164a>
 8006c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e04b      	b.n	8006d2c <USB_EPStartXfer+0x16e2>
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <USB_EPStartXfer+0x166a>
 8006caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cae:	3301      	adds	r3, #1
 8006cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	029b      	lsls	r3, r3, #10
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	e02c      	b.n	8006d2c <USB_EPStartXfer+0x16e2>
 8006cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	785b      	ldrb	r3, [r3, #1]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d124      	bne.n	8006d2c <USB_EPStartXfer+0x16e2>
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	011a      	lsls	r2, r3, #4
 8006d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	e001      	b.n	8006d2c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e03a      	b.n	8006da2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d52:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d5e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d6a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	441a      	add	r2, r3
 8006d88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	785b      	ldrb	r3, [r3, #1]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d020      	beq.n	8006e00 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd4:	81bb      	strh	r3, [r7, #12]
 8006dd6:	89bb      	ldrh	r3, [r7, #12]
 8006dd8:	f083 0310 	eor.w	r3, r3, #16
 8006ddc:	81bb      	strh	r3, [r7, #12]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	441a      	add	r2, r3
 8006de8:	89bb      	ldrh	r3, [r7, #12]
 8006dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	8013      	strh	r3, [r2, #0]
 8006dfe:	e01f      	b.n	8006e40 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e16:	81fb      	strh	r3, [r7, #14]
 8006e18:	89fb      	ldrh	r3, [r7, #14]
 8006e1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e1e:	81fb      	strh	r3, [r7, #14]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	441a      	add	r2, r3
 8006e2a:	89fb      	ldrh	r3, [r7, #14]
 8006e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b087      	sub	sp, #28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	7b1b      	ldrb	r3, [r3, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f040 809d 	bne.w	8006f9c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04c      	beq.n	8006f04 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	823b      	strh	r3, [r7, #16]
 8006e78:	8a3b      	ldrh	r3, [r7, #16]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01b      	beq.n	8006eba <USB_EPClearStall+0x6c>
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e98:	81fb      	strh	r3, [r7, #14]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	89fb      	ldrh	r3, [r7, #14]
 8006ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d06c      	beq.n	8006f9c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed8:	81bb      	strh	r3, [r7, #12]
 8006eda:	89bb      	ldrh	r3, [r7, #12]
 8006edc:	f083 0320 	eor.w	r3, r3, #32
 8006ee0:	81bb      	strh	r3, [r7, #12]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	89bb      	ldrh	r3, [r7, #12]
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
 8006f02:	e04b      	b.n	8006f9c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	82fb      	strh	r3, [r7, #22]
 8006f12:	8afb      	ldrh	r3, [r7, #22]
 8006f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01b      	beq.n	8006f54 <USB_EPClearStall+0x106>
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	82bb      	strh	r3, [r7, #20]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	8abb      	ldrh	r3, [r7, #20]
 8006f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	827b      	strh	r3, [r7, #18]
 8006f6c:	8a7b      	ldrh	r3, [r7, #18]
 8006f6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f72:	827b      	strh	r3, [r7, #18]
 8006f74:	8a7b      	ldrh	r3, [r7, #18]
 8006f76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f7a:	827b      	strh	r3, [r7, #18]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	8a7b      	ldrh	r3, [r7, #18]
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2280      	movs	r2, #128	; 0x80
 8006fc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007008:	b480      	push	{r7}
 800700a:	b08b      	sub	sp, #44	; 0x2c
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4611      	mov	r1, r2
 8007014:	461a      	mov	r2, r3
 8007016:	460b      	mov	r3, r1
 8007018:	80fb      	strh	r3, [r7, #6]
 800701a:	4613      	mov	r3, r2
 800701c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800701e:	88bb      	ldrh	r3, [r7, #4]
 8007020:	3301      	adds	r3, #1
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	005a      	lsls	r2, r3, #1
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800703a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
 8007040:	e01e      	b.n	8007080 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	021b      	lsls	r3, r3, #8
 8007050:	b21a      	sxth	r2, r3
 8007052:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007056:	4313      	orrs	r3, r2
 8007058:	b21b      	sxth	r3, r3
 800705a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	8a7a      	ldrh	r2, [r7, #18]
 8007060:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	3302      	adds	r3, #2
 8007066:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	3302      	adds	r3, #2
 800706c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	3301      	adds	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	3b01      	subs	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1dd      	bne.n	8007042 <USB_WritePMA+0x3a>
  }
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	372c      	adds	r7, #44	; 0x2c
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007094:	b480      	push	{r7}
 8007096:	b08b      	sub	sp, #44	; 0x2c
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4611      	mov	r1, r2
 80070a0:	461a      	mov	r2, r3
 80070a2:	460b      	mov	r3, r1
 80070a4:	80fb      	strh	r3, [r7, #6]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80070aa:	88bb      	ldrh	r3, [r7, #4]
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	005a      	lsls	r2, r3, #1
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
 80070cc:	e01b      	b.n	8007106 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	3302      	adds	r3, #2
 80070da:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	3301      	adds	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	3302      	adds	r3, #2
 80070fe:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	3b01      	subs	r3, #1
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e0      	bne.n	80070ce <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800710c:	88bb      	ldrh	r3, [r7, #4]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	701a      	strb	r2, [r3, #0]
  }
}
 8007128:	bf00      	nop
 800712a:	372c      	adds	r7, #44	; 0x2c
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	7c1b      	ldrb	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d115      	bne.n	8007178 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800714c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007150:	2202      	movs	r2, #2
 8007152:	2181      	movs	r1, #129	; 0x81
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 ffa0 	bl	800909a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007164:	2202      	movs	r2, #2
 8007166:	2101      	movs	r1, #1
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 ff96 	bl	800909a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007176:	e012      	b.n	800719e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	2202      	movs	r2, #2
 800717c:	2181      	movs	r1, #129	; 0x81
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 ff8b 	bl	800909a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800718a:	2340      	movs	r3, #64	; 0x40
 800718c:	2202      	movs	r2, #2
 800718e:	2101      	movs	r1, #1
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 ff82 	bl	800909a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800719e:	2308      	movs	r3, #8
 80071a0:	2203      	movs	r2, #3
 80071a2:	2182      	movs	r1, #130	; 0x82
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 ff78 	bl	800909a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071b4:	f002 f89a 	bl	80092ec <USBD_static_malloc>
 80071b8:	4602      	mov	r2, r0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
 80071ce:	e026      	b.n	800721e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7c1b      	ldrb	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007204:	2101      	movs	r1, #1
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f002 f839 	bl	800927e <USBD_LL_PrepareReceive>
 800720c:	e007      	b.n	800721e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007214:	2340      	movs	r3, #64	; 0x40
 8007216:	2101      	movs	r1, #1
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f002 f830 	bl	800927e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007238:	2181      	movs	r1, #129	; 0x81
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 ff53 	bl	80090e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007246:	2101      	movs	r1, #1
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 ff4c 	bl	80090e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007256:	2182      	movs	r1, #130	; 0x82
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 ff44 	bl	80090e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727e:	4618      	mov	r0, r3
 8007280:	f002 f842 	bl	8009308 <USBD_static_free>
    pdev->pClassData = NULL;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d039      	beq.n	8007334 <USBD_CDC_Setup+0x9e>
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d17f      	bne.n	80073c4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	88db      	ldrh	r3, [r3, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d029      	beq.n	8007320 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	da11      	bge.n	80072fa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80072e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	88d2      	ldrh	r2, [r2, #6]
 80072e8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072ea:	6939      	ldr	r1, [r7, #16]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	88db      	ldrh	r3, [r3, #6]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fa13 	bl	800871e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80072f8:	e06b      	b.n	80073d2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	785a      	ldrb	r2, [r3, #1]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	88db      	ldrh	r3, [r3, #6]
 8007308:	b2da      	uxtb	r2, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007310:	6939      	ldr	r1, [r7, #16]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	461a      	mov	r2, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fa2e 	bl	800877a <USBD_CtlPrepareRx>
      break;
 800731e:	e058      	b.n	80073d2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	7850      	ldrb	r0, [r2, #1]
 800732c:	2200      	movs	r2, #0
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	4798      	blx	r3
      break;
 8007332:	e04e      	b.n	80073d2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b0b      	cmp	r3, #11
 800733a:	d02e      	beq.n	800739a <USBD_CDC_Setup+0x104>
 800733c:	2b0b      	cmp	r3, #11
 800733e:	dc38      	bgt.n	80073b2 <USBD_CDC_Setup+0x11c>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <USBD_CDC_Setup+0xb4>
 8007344:	2b0a      	cmp	r3, #10
 8007346:	d014      	beq.n	8007372 <USBD_CDC_Setup+0xdc>
 8007348:	e033      	b.n	80073b2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	2b03      	cmp	r3, #3
 8007352:	d107      	bne.n	8007364 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	2202      	movs	r2, #2
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 f9de 	bl	800871e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007362:	e02e      	b.n	80073c2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f96e 	bl	8008648 <USBD_CtlError>
            ret = USBD_FAIL;
 800736c:	2302      	movs	r3, #2
 800736e:	75fb      	strb	r3, [r7, #23]
          break;
 8007370:	e027      	b.n	80073c2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007378:	2b03      	cmp	r3, #3
 800737a:	d107      	bne.n	800738c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800737c:	f107 030f 	add.w	r3, r7, #15
 8007380:	2201      	movs	r2, #1
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f9ca 	bl	800871e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800738a:	e01a      	b.n	80073c2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 f95a 	bl	8008648 <USBD_CtlError>
            ret = USBD_FAIL;
 8007394:	2302      	movs	r3, #2
 8007396:	75fb      	strb	r3, [r7, #23]
          break;
 8007398:	e013      	b.n	80073c2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d00d      	beq.n	80073c0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 f94e 	bl	8008648 <USBD_CtlError>
            ret = USBD_FAIL;
 80073ac:	2302      	movs	r3, #2
 80073ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073b0:	e006      	b.n	80073c0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 f947 	bl	8008648 <USBD_CtlError>
          ret = USBD_FAIL;
 80073ba:	2302      	movs	r3, #2
 80073bc:	75fb      	strb	r3, [r7, #23]
          break;
 80073be:	e000      	b.n	80073c2 <USBD_CDC_Setup+0x12c>
          break;
 80073c0:	bf00      	nop
      }
      break;
 80073c2:	e006      	b.n	80073d2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 f93e 	bl	8008648 <USBD_CtlError>
      ret = USBD_FAIL;
 80073cc:	2302      	movs	r3, #2
 80073ce:	75fb      	strb	r3, [r7, #23]
      break;
 80073d0:	bf00      	nop
  }

  return ret;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d03a      	beq.n	8007478 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	331c      	adds	r3, #28
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d029      	beq.n	800746c <USBD_CDC_DataIn+0x90>
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	331c      	adds	r3, #28
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	78f9      	ldrb	r1, [r7, #3]
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	460b      	mov	r3, r1
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	4403      	add	r3, r0
 8007438:	3338      	adds	r3, #56	; 0x38
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007440:	fb01 f303 	mul.w	r3, r1, r3
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d110      	bne.n	800746c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	331c      	adds	r3, #28
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800745e:	78f9      	ldrb	r1, [r7, #3]
 8007460:	2300      	movs	r3, #0
 8007462:	2200      	movs	r2, #0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 fee7 	bl	8009238 <USBD_LL_Transmit>
 800746a:	e003      	b.n	8007474 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e000      	b.n	800747a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007478:	2302      	movs	r3, #2
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 ff12 	bl	80092c4 <USBD_LL_GetRxDataSize>
 80074a0:	4602      	mov	r2, r0
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00d      	beq.n	80074ce <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80074c6:	4611      	mov	r1, r2
 80074c8:	4798      	blx	r3

    return USBD_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e000      	b.n	80074d0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80074ce:	2302      	movs	r3, #2
  }
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d015      	beq.n	800751e <USBD_CDC_EP0_RxReady+0x46>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074f8:	2bff      	cmp	r3, #255	; 0xff
 80074fa:	d010      	beq.n	800751e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800750a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007512:	b292      	uxth	r2, r2
 8007514:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	22ff      	movs	r2, #255	; 0xff
 800751a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2243      	movs	r2, #67	; 0x43
 8007534:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007536:	4b03      	ldr	r3, [pc, #12]	; (8007544 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000094 	.word	0x20000094

08007548 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2243      	movs	r2, #67	; 0x43
 8007554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007556:	4b03      	ldr	r3, [pc, #12]	; (8007564 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	20000050 	.word	0x20000050

08007568 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2243      	movs	r2, #67	; 0x43
 8007574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007576:	4b03      	ldr	r3, [pc, #12]	; (8007584 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	200000d8 	.word	0x200000d8

08007588 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	220a      	movs	r2, #10
 8007594:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007596:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	2000000c 	.word	0x2000000c

080075a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80075b2:	2302      	movs	r3, #2
 80075b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b087      	sub	sp, #28
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ea:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075f4:	88fa      	ldrh	r2, [r7, #6]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007640:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01c      	beq.n	8007686 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007652:	2b00      	cmp	r3, #0
 8007654:	d115      	bne.n	8007682 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007674:	b29b      	uxth	r3, r3
 8007676:	2181      	movs	r1, #129	; 0x81
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 fddd 	bl	8009238 <USBD_LL_Transmit>

      return USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	e002      	b.n	8007688 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007686:	2302      	movs	r3, #2
  }
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d017      	beq.n	80076da <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7c1b      	ldrb	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076bc:	2101      	movs	r1, #1
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 fddd 	bl	800927e <USBD_LL_PrepareReceive>
 80076c4:	e007      	b.n	80076d6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076cc:	2340      	movs	r3, #64	; 0x40
 80076ce:	2101      	movs	r1, #1
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fdd4 	bl	800927e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e000      	b.n	80076dc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80076da:	2302      	movs	r3, #2
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80076f8:	2302      	movs	r3, #2
 80076fa:	e01a      	b.n	8007732 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	79fa      	ldrb	r2, [r7, #7]
 8007728:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f001 fc40 	bl	8008fb0 <USBD_LL_Init>

  return USBD_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d006      	beq.n	800775c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
 800775a:	e001      	b.n	8007760 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800775c:	2302      	movs	r3, #2
 800775e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 fc74 	bl	8009064 <USBD_LL_Start>

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077a8:	2302      	movs	r3, #2
 80077aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00c      	beq.n	80077d0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	4611      	mov	r1, r2
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	4611      	mov	r1, r2
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fedb 	bl	80085ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007834:	f003 031f 	and.w	r3, r3, #31
 8007838:	2b02      	cmp	r3, #2
 800783a:	d016      	beq.n	800786a <USBD_LL_SetupStage+0x6a>
 800783c:	2b02      	cmp	r3, #2
 800783e:	d81c      	bhi.n	800787a <USBD_LL_SetupStage+0x7a>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <USBD_LL_SetupStage+0x4a>
 8007844:	2b01      	cmp	r3, #1
 8007846:	d008      	beq.n	800785a <USBD_LL_SetupStage+0x5a>
 8007848:	e017      	b.n	800787a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9ce 	bl	8007bf4 <USBD_StdDevReq>
      break;
 8007858:	e01a      	b.n	8007890 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa30 	bl	8007cc8 <USBD_StdItfReq>
      break;
 8007868:	e012      	b.n	8007890 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa70 	bl	8007d58 <USBD_StdEPReq>
      break;
 8007878:	e00a      	b.n	8007890 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007880:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007884:	b2db      	uxtb	r3, r3
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 fc4b 	bl	8009124 <USBD_LL_StallEP>
      break;
 800788e:	bf00      	nop
  }

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	460b      	mov	r3, r1
 80078a4:	607a      	str	r2, [r7, #4]
 80078a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d14b      	bne.n	8007946 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80078b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d134      	bne.n	800792a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d919      	bls.n	8007900 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	1ad2      	subs	r2, r2, r3
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d203      	bcs.n	80078ee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	e002      	b.n	80078f4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 ff5c 	bl	80087b6 <USBD_CtlContinueRx>
 80078fe:	e038      	b.n	8007972 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007912:	2b03      	cmp	r3, #3
 8007914:	d105      	bne.n	8007922 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 ff59 	bl	80087da <USBD_CtlSendStatus>
 8007928:	e023      	b.n	8007972 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007930:	2b05      	cmp	r3, #5
 8007932:	d11e      	bne.n	8007972 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800793c:	2100      	movs	r1, #0
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 fbf0 	bl	8009124 <USBD_LL_StallEP>
 8007944:	e015      	b.n	8007972 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00d      	beq.n	800796e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007958:	2b03      	cmp	r3, #3
 800795a:	d108      	bne.n	800796e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	7afa      	ldrb	r2, [r7, #11]
 8007966:	4611      	mov	r1, r2
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	4798      	blx	r3
 800796c:	e001      	b.n	8007972 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800796e:	2302      	movs	r3, #2
 8007970:	e000      	b.n	8007974 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	460b      	mov	r3, r1
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d17f      	bne.n	8007a90 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3314      	adds	r3, #20
 8007994:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800799c:	2b02      	cmp	r3, #2
 800799e:	d15c      	bne.n	8007a5a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d915      	bls.n	80079d8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	1ad2      	subs	r2, r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 fec6 	bl	8008756 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ca:	2300      	movs	r3, #0
 80079cc:	2200      	movs	r2, #0
 80079ce:	2100      	movs	r1, #0
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 fc54 	bl	800927e <USBD_LL_PrepareReceive>
 80079d6:	e04e      	b.n	8007a76 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	6912      	ldr	r2, [r2, #16]
 80079e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80079e4:	fb01 f202 	mul.w	r2, r1, r2
 80079e8:	1a9b      	subs	r3, r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d11c      	bne.n	8007a28 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d316      	bcc.n	8007a28 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d20f      	bcs.n	8007a28 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fea2 	bl	8008756 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2100      	movs	r1, #0
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f001 fc2c 	bl	800927e <USBD_LL_PrepareReceive>
 8007a26:	e026      	b.n	8007a76 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d105      	bne.n	8007a4a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a4a:	2180      	movs	r1, #128	; 0x80
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f001 fb69 	bl	8009124 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fed4 	bl	8008800 <USBD_CtlReceiveStatus>
 8007a58:	e00d      	b.n	8007a76 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d004      	beq.n	8007a6e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f001 fb57 	bl	8009124 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d11d      	bne.n	8007abc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7ff fe80 	bl	8007786 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a8e:	e015      	b.n	8007abc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00d      	beq.n	8007ab8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d108      	bne.n	8007ab8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	7afa      	ldrb	r2, [r7, #11]
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	4798      	blx	r3
 8007ab6:	e001      	b.n	8007abc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e000      	b.n	8007abe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ace:	2340      	movs	r3, #64	; 0x40
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fae0 	bl	800909a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2240      	movs	r2, #64	; 0x40
 8007ae6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aea:	2340      	movs	r3, #64	; 0x40
 8007aec:	2200      	movs	r2, #0
 8007aee:	2180      	movs	r1, #128	; 0x80
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fad2 	bl	800909a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2240      	movs	r2, #64	; 0x40
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6852      	ldr	r2, [r2, #4]
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	4611      	mov	r1, r2
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
  }

  return USBD_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2204      	movs	r2, #4
 8007b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d105      	bne.n	8007bb0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d10b      	bne.n	8007be8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d005      	beq.n	8007c1a <USBD_StdDevReq+0x26>
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d84f      	bhi.n	8007cb2 <USBD_StdDevReq+0xbe>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <USBD_StdDevReq+0x36>
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d14b      	bne.n	8007cb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
      break;
 8007c28:	e048      	b.n	8007cbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d839      	bhi.n	8007ca6 <USBD_StdDevReq+0xb2>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <USBD_StdDevReq+0x44>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c89 	.word	0x08007c89
 8007c3c:	08007c9d 	.word	0x08007c9d
 8007c40:	08007ca7 	.word	0x08007ca7
 8007c44:	08007c93 	.word	0x08007c93
 8007c48:	08007ca7 	.word	0x08007ca7
 8007c4c:	08007c6b 	.word	0x08007c6b
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007ca7 	.word	0x08007ca7
 8007c58:	08007c7f 	.word	0x08007c7f
 8007c5c:	08007c75 	.word	0x08007c75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9dc 	bl	8008020 <USBD_GetDescriptor>
          break;
 8007c68:	e022      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb3f 	bl	80082f0 <USBD_SetAddress>
          break;
 8007c72:	e01d      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fb7e 	bl	8008378 <USBD_SetConfig>
          break;
 8007c7c:	e018      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fc07 	bl	8008494 <USBD_GetConfig>
          break;
 8007c86:	e013      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fc37 	bl	80084fe <USBD_GetStatus>
          break;
 8007c90:	e00e      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fc65 	bl	8008564 <USBD_SetFeature>
          break;
 8007c9a:	e009      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc74 	bl	800858c <USBD_ClrFeature>
          break;
 8007ca4:	e004      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fccd 	bl	8008648 <USBD_CtlError>
          break;
 8007cae:	bf00      	nop
      }
      break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fcc7 	bl	8008648 <USBD_CtlError>
      break;
 8007cba:	bf00      	nop
  }

  return ret;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop

08007cc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d005      	beq.n	8007cee <USBD_StdItfReq+0x26>
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d82e      	bhi.n	8007d44 <USBD_StdItfReq+0x7c>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <USBD_StdItfReq+0x26>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d12a      	bne.n	8007d44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d81d      	bhi.n	8007d36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	889b      	ldrh	r3, [r3, #4]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d813      	bhi.n	8007d2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	88db      	ldrh	r3, [r3, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d110      	bne.n	8007d40 <USBD_StdItfReq+0x78>
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fd58 	bl	80087da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d2a:	e009      	b.n	8007d40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc8a 	bl	8008648 <USBD_CtlError>
          break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fc85 	bl	8008648 <USBD_CtlError>
          break;
 8007d3e:	e000      	b.n	8007d42 <USBD_StdItfReq+0x7a>
          break;
 8007d40:	bf00      	nop
      }
      break;
 8007d42:	e004      	b.n	8007d4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fc7e 	bl	8008648 <USBD_CtlError>
      break;
 8007d4c:	bf00      	nop
  }

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	889b      	ldrh	r3, [r3, #4]
 8007d6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d007      	beq.n	8007d88 <USBD_StdEPReq+0x30>
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	f200 8146 	bhi.w	800800a <USBD_StdEPReq+0x2b2>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <USBD_StdEPReq+0x40>
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	f040 8141 	bne.w	800800a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
      break;
 8007d96:	e13d      	b.n	8008014 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d10a      	bne.n	8007dba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	e12d      	b.n	8008016 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d007      	beq.n	8007dd2 <USBD_StdEPReq+0x7a>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	f300 811b 	bgt.w	8007ffe <USBD_StdEPReq+0x2a6>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d072      	beq.n	8007eb2 <USBD_StdEPReq+0x15a>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d03a      	beq.n	8007e46 <USBD_StdEPReq+0xee>
 8007dd0:	e115      	b.n	8007ffe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d002      	beq.n	8007de2 <USBD_StdEPReq+0x8a>
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d015      	beq.n	8007e0c <USBD_StdEPReq+0xb4>
 8007de0:	e02b      	b.n	8007e3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <USBD_StdEPReq+0xaa>
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b80      	cmp	r3, #128	; 0x80
 8007dec:	d009      	beq.n	8007e02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 f996 	bl	8009124 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007df8:	2180      	movs	r1, #128	; 0x80
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f992 	bl	8009124 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e00:	e020      	b.n	8007e44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc1f 	bl	8008648 <USBD_CtlError>
              break;
 8007e0a:	e01b      	b.n	8007e44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10e      	bne.n	8007e32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <USBD_StdEPReq+0xda>
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d008      	beq.n	8007e32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 f979 	bl	8009124 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fcd1 	bl	80087da <USBD_CtlSendStatus>

              break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc03 	bl	8008648 <USBD_CtlError>
              break;
 8007e42:	bf00      	nop
          }
          break;
 8007e44:	e0e0      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d002      	beq.n	8007e56 <USBD_StdEPReq+0xfe>
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d015      	beq.n	8007e80 <USBD_StdEPReq+0x128>
 8007e54:	e026      	b.n	8007ea4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00c      	beq.n	8007e76 <USBD_StdEPReq+0x11e>
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b80      	cmp	r3, #128	; 0x80
 8007e60:	d009      	beq.n	8007e76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 f95c 	bl	8009124 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e6c:	2180      	movs	r1, #128	; 0x80
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 f958 	bl	8009124 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e74:	e01c      	b.n	8007eb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fbe5 	bl	8008648 <USBD_CtlError>
              break;
 8007e7e:	e017      	b.n	8007eb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	885b      	ldrh	r3, [r3, #2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d112      	bne.n	8007eae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d004      	beq.n	8007e9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f963 	bl	8009162 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc9c 	bl	80087da <USBD_CtlSendStatus>
              }
              break;
 8007ea2:	e004      	b.n	8007eae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fbce 	bl	8008648 <USBD_CtlError>
              break;
 8007eac:	e000      	b.n	8007eb0 <USBD_StdEPReq+0x158>
              break;
 8007eae:	bf00      	nop
          }
          break;
 8007eb0:	e0aa      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d002      	beq.n	8007ec2 <USBD_StdEPReq+0x16a>
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d032      	beq.n	8007f26 <USBD_StdEPReq+0x1ce>
 8007ec0:	e097      	b.n	8007ff2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <USBD_StdEPReq+0x180>
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b80      	cmp	r3, #128	; 0x80
 8007ecc:	d004      	beq.n	8007ed8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fbb9 	bl	8008648 <USBD_CtlError>
                break;
 8007ed6:	e091      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0b      	bge.n	8007ef8 <USBD_StdEPReq+0x1a0>
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	3310      	adds	r3, #16
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	e00b      	b.n	8007f10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	3304      	adds	r3, #4
 8007f10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fbfd 	bl	800871e <USBD_CtlSendData>
              break;
 8007f24:	e06a      	b.n	8007ffc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da11      	bge.n	8007f52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	f003 020f 	and.w	r2, r3, #15
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	3318      	adds	r3, #24
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d117      	bne.n	8007f78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb7c 	bl	8008648 <USBD_CtlError>
                  break;
 8007f50:	e054      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	f003 020f 	and.w	r2, r3, #15
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb69 	bl	8008648 <USBD_CtlError>
                  break;
 8007f76:	e041      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da0b      	bge.n	8007f98 <USBD_StdEPReq+0x240>
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	3310      	adds	r3, #16
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	3304      	adds	r3, #4
 8007f96:	e00b      	b.n	8007fb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3304      	adds	r3, #4
 8007fb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <USBD_StdEPReq+0x266>
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d103      	bne.n	8007fc6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e00e      	b.n	8007fe4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 f8e8 	bl	80091a0 <USBD_LL_IsStallEP>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e002      	b.n	8007fe4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fb97 	bl	800871e <USBD_CtlSendData>
              break;
 8007ff0:	e004      	b.n	8007ffc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fb27 	bl	8008648 <USBD_CtlError>
              break;
 8007ffa:	bf00      	nop
          }
          break;
 8007ffc:	e004      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fb21 	bl	8008648 <USBD_CtlError>
          break;
 8008006:	bf00      	nop
      }
      break;
 8008008:	e004      	b.n	8008014 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb1b 	bl	8008648 <USBD_CtlError>
      break;
 8008012:	bf00      	nop
  }

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	2b06      	cmp	r3, #6
 8008042:	f200 8128 	bhi.w	8008296 <USBD_GetDescriptor+0x276>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <USBD_GetDescriptor+0x2c>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	08008069 	.word	0x08008069
 8008050:	08008081 	.word	0x08008081
 8008054:	080080c1 	.word	0x080080c1
 8008058:	08008297 	.word	0x08008297
 800805c:	08008297 	.word	0x08008297
 8008060:	08008237 	.word	0x08008237
 8008064:	08008263 	.word	0x08008263
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	7c12      	ldrb	r2, [r2, #16]
 8008074:	f107 0108 	add.w	r1, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
      break;
 800807e:	e112      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7c1b      	ldrb	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10d      	bne.n	80080a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f107 0208 	add.w	r2, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	2202      	movs	r2, #2
 80080a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080a2:	e100      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	f107 0208 	add.w	r2, r7, #8
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
 80080b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	2202      	movs	r2, #2
 80080bc:	701a      	strb	r2, [r3, #0]
      break;
 80080be:	e0f2      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	885b      	ldrh	r3, [r3, #2]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	f200 80ac 	bhi.w	8008224 <USBD_GetDescriptor+0x204>
 80080cc:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_GetDescriptor+0xb4>)
 80080ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	080080ed 	.word	0x080080ed
 80080d8:	08008121 	.word	0x08008121
 80080dc:	08008155 	.word	0x08008155
 80080e0:	08008189 	.word	0x08008189
 80080e4:	080081bd 	.word	0x080081bd
 80080e8:	080081f1 	.word	0x080081f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7c12      	ldrb	r2, [r2, #16]
 8008104:	f107 0108 	add.w	r1, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800810e:	e091      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa98 	bl	8008648 <USBD_CtlError>
            err++;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3301      	adds	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]
          break;
 800811e:	e089      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	7c12      	ldrb	r2, [r2, #16]
 8008138:	f107 0108 	add.w	r1, r7, #8
 800813c:	4610      	mov	r0, r2
 800813e:	4798      	blx	r3
 8008140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008142:	e077      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa7e 	bl	8008648 <USBD_CtlError>
            err++;
 800814c:	7afb      	ldrb	r3, [r7, #11]
 800814e:	3301      	adds	r3, #1
 8008150:	72fb      	strb	r3, [r7, #11]
          break;
 8008152:	e06f      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008176:	e05d      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa64 	bl	8008648 <USBD_CtlError>
            err++;
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3301      	adds	r3, #1
 8008184:	72fb      	strb	r3, [r7, #11]
          break;
 8008186:	e055      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081aa:	e043      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa4a 	bl	8008648 <USBD_CtlError>
            err++;
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	3301      	adds	r3, #1
 80081b8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ba:	e03b      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	7c12      	ldrb	r2, [r2, #16]
 80081d4:	f107 0108 	add.w	r1, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081de:	e029      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa30 	bl	8008648 <USBD_CtlError>
            err++;
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	3301      	adds	r3, #1
 80081ec:	72fb      	strb	r3, [r7, #11]
          break;
 80081ee:	e021      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008212:	e00f      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa16 	bl	8008648 <USBD_CtlError>
            err++;
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	3301      	adds	r3, #1
 8008220:	72fb      	strb	r3, [r7, #11]
          break;
 8008222:	e007      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa0e 	bl	8008648 <USBD_CtlError>
          err++;
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	3301      	adds	r3, #1
 8008230:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008232:	e038      	b.n	80082a6 <USBD_GetDescriptor+0x286>
 8008234:	e037      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	7c1b      	ldrb	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008246:	f107 0208 	add.w	r2, r7, #8
 800824a:	4610      	mov	r0, r2
 800824c:	4798      	blx	r3
 800824e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008250:	e029      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9f7 	bl	8008648 <USBD_CtlError>
        err++;
 800825a:	7afb      	ldrb	r3, [r7, #11]
 800825c:	3301      	adds	r3, #1
 800825e:	72fb      	strb	r3, [r7, #11]
      break;
 8008260:	e021      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7c1b      	ldrb	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	f107 0208 	add.w	r2, r7, #8
 8008276:	4610      	mov	r0, r2
 8008278:	4798      	blx	r3
 800827a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	2207      	movs	r2, #7
 8008282:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008284:	e00f      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9dd 	bl	8008648 <USBD_CtlError>
        err++;
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	3301      	adds	r3, #1
 8008292:	72fb      	strb	r3, [r7, #11]
      break;
 8008294:	e007      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9d5 	bl	8008648 <USBD_CtlError>
      err++;
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	3301      	adds	r3, #1
 80082a2:	72fb      	strb	r3, [r7, #11]
      break;
 80082a4:	bf00      	nop
  }

  if (err != 0U)
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d11c      	bne.n	80082e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80082ac:	893b      	ldrh	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d011      	beq.n	80082d6 <USBD_GetDescriptor+0x2b6>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	88db      	ldrh	r3, [r3, #6]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00d      	beq.n	80082d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	88da      	ldrh	r2, [r3, #6]
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bf28      	it	cs
 80082c4:	4613      	movcs	r3, r2
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082ca:	893b      	ldrh	r3, [r7, #8]
 80082cc:	461a      	mov	r2, r3
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fa24 	bl	800871e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d104      	bne.n	80082e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa7b 	bl	80087da <USBD_CtlSendStatus>
 80082e4:	e000      	b.n	80082e8 <USBD_GetDescriptor+0x2c8>
    return;
 80082e6:	bf00      	nop
    }
  }
}
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop

080082f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	889b      	ldrh	r3, [r3, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d130      	bne.n	8008364 <USBD_SetAddress+0x74>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	88db      	ldrh	r3, [r3, #6]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d12c      	bne.n	8008364 <USBD_SetAddress+0x74>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	2b7f      	cmp	r3, #127	; 0x7f
 8008310:	d828      	bhi.n	8008364 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008324:	2b03      	cmp	r3, #3
 8008326:	d104      	bne.n	8008332 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f98c 	bl	8008648 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008330:	e01d      	b.n	800836e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7bfa      	ldrb	r2, [r7, #15]
 8008336:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 ff5b 	bl	80091fa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa48 	bl	80087da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008358:	e009      	b.n	800836e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008362:	e004      	b.n	800836e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f96e 	bl	8008648 <USBD_CtlError>
  }
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	b2da      	uxtb	r2, r3
 8008388:	4b41      	ldr	r3, [pc, #260]	; (8008490 <USBD_SetConfig+0x118>)
 800838a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800838c:	4b40      	ldr	r3, [pc, #256]	; (8008490 <USBD_SetConfig+0x118>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d904      	bls.n	800839e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f956 	bl	8008648 <USBD_CtlError>
 800839c:	e075      	b.n	800848a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d002      	beq.n	80083ae <USBD_SetConfig+0x36>
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d023      	beq.n	80083f4 <USBD_SetConfig+0x7c>
 80083ac:	e062      	b.n	8008474 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80083ae:	4b38      	ldr	r3, [pc, #224]	; (8008490 <USBD_SetConfig+0x118>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01a      	beq.n	80083ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80083b6:	4b36      	ldr	r3, [pc, #216]	; (8008490 <USBD_SetConfig+0x118>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2203      	movs	r2, #3
 80083c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083c8:	4b31      	ldr	r3, [pc, #196]	; (8008490 <USBD_SetConfig+0x118>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff f9e4 	bl	800779c <USBD_SetClassConfig>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d104      	bne.n	80083e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f933 	bl	8008648 <USBD_CtlError>
            return;
 80083e2:	e052      	b.n	800848a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f9f8 	bl	80087da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083ea:	e04e      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f9f4 	bl	80087da <USBD_CtlSendStatus>
        break;
 80083f2:	e04a      	b.n	800848a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083f4:	4b26      	ldr	r3, [pc, #152]	; (8008490 <USBD_SetConfig+0x118>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d112      	bne.n	8008422 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008404:	4b22      	ldr	r3, [pc, #136]	; (8008490 <USBD_SetConfig+0x118>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800840e:	4b20      	ldr	r3, [pc, #128]	; (8008490 <USBD_SetConfig+0x118>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff f9e0 	bl	80077da <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9dd 	bl	80087da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008420:	e033      	b.n	800848a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008422:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <USBD_SetConfig+0x118>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d01d      	beq.n	800846c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff f9ce 	bl	80077da <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800843e:	4b14      	ldr	r3, [pc, #80]	; (8008490 <USBD_SetConfig+0x118>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008448:	4b11      	ldr	r3, [pc, #68]	; (8008490 <USBD_SetConfig+0x118>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff f9a4 	bl	800779c <USBD_SetClassConfig>
 8008454:	4603      	mov	r3, r0
 8008456:	2b02      	cmp	r3, #2
 8008458:	d104      	bne.n	8008464 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f8f3 	bl	8008648 <USBD_CtlError>
            return;
 8008462:	e012      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f9b8 	bl	80087da <USBD_CtlSendStatus>
        break;
 800846a:	e00e      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f9b4 	bl	80087da <USBD_CtlSendStatus>
        break;
 8008472:	e00a      	b.n	800848a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8e6 	bl	8008648 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800847c:	4b04      	ldr	r3, [pc, #16]	; (8008490 <USBD_SetConfig+0x118>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff f9a9 	bl	80077da <USBD_ClrClassConfig>
        break;
 8008488:	bf00      	nop
    }
  }
}
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000338 	.word	0x20000338

08008494 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	88db      	ldrh	r3, [r3, #6]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d004      	beq.n	80084b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f8cd 	bl	8008648 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084ae:	e022      	b.n	80084f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	dc02      	bgt.n	80084c0 <USBD_GetConfig+0x2c>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc03      	bgt.n	80084c6 <USBD_GetConfig+0x32>
 80084be:	e015      	b.n	80084ec <USBD_GetConfig+0x58>
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d00b      	beq.n	80084dc <USBD_GetConfig+0x48>
 80084c4:	e012      	b.n	80084ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3308      	adds	r3, #8
 80084d0:	2201      	movs	r2, #1
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f922 	bl	800871e <USBD_CtlSendData>
        break;
 80084da:	e00c      	b.n	80084f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	2201      	movs	r2, #1
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f91a 	bl	800871e <USBD_CtlSendData>
        break;
 80084ea:	e004      	b.n	80084f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f8aa 	bl	8008648 <USBD_CtlError>
        break;
 80084f4:	bf00      	nop
}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850e:	3b01      	subs	r3, #1
 8008510:	2b02      	cmp	r3, #2
 8008512:	d81e      	bhi.n	8008552 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	88db      	ldrh	r3, [r3, #6]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d004      	beq.n	8008526 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f892 	bl	8008648 <USBD_CtlError>
        break;
 8008524:	e01a      	b.n	800855c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	330c      	adds	r3, #12
 8008546:	2202      	movs	r2, #2
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8e7 	bl	800871e <USBD_CtlSendData>
      break;
 8008550:	e004      	b.n	800855c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f877 	bl	8008648 <USBD_CtlError>
      break;
 800855a:	bf00      	nop
  }
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d106      	bne.n	8008584 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f92b 	bl	80087da <USBD_CtlSendStatus>
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859c:	3b01      	subs	r3, #1
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d80b      	bhi.n	80085ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d10c      	bne.n	80085c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f911 	bl	80087da <USBD_CtlSendStatus>
      }
      break;
 80085b8:	e004      	b.n	80085c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f843 	bl	8008648 <USBD_CtlError>
      break;
 80085c2:	e000      	b.n	80085c6 <USBD_ClrFeature+0x3a>
      break;
 80085c4:	bf00      	nop
  }
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3302      	adds	r3, #2
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	3303      	adds	r3, #3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	3304      	adds	r3, #4
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b29a      	uxth	r2, r3
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	3305      	adds	r3, #5
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	b29b      	uxth	r3, r3
 8008618:	4413      	add	r3, r2
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	3306      	adds	r3, #6
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b29a      	uxth	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	3307      	adds	r3, #7
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	b29b      	uxth	r3, r3
 8008634:	4413      	add	r3, r2
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	80da      	strh	r2, [r3, #6]

}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008652:	2180      	movs	r1, #128	; 0x80
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fd65 	bl	8009124 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fd61 	bl	8009124 <USBD_LL_StallEP>
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b086      	sub	sp, #24
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d032      	beq.n	80086e6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f834 	bl	80086ee <USBD_GetLen>
 8008686:	4603      	mov	r3, r0
 8008688:	3301      	adds	r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	75fa      	strb	r2, [r7, #23]
 800869a:	461a      	mov	r2, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4413      	add	r3, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	75fa      	strb	r2, [r7, #23]
 80086ac:	461a      	mov	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4413      	add	r3, r2
 80086b2:	2203      	movs	r2, #3
 80086b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80086b6:	e012      	b.n	80086de <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	60fa      	str	r2, [r7, #12]
 80086be:	7dfa      	ldrb	r2, [r7, #23]
 80086c0:	1c51      	adds	r1, r2, #1
 80086c2:	75f9      	strb	r1, [r7, #23]
 80086c4:	4611      	mov	r1, r2
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	440a      	add	r2, r1
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	75fa      	strb	r2, [r7, #23]
 80086d4:	461a      	mov	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	4413      	add	r3, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e8      	bne.n	80086b8 <USBD_GetString+0x4e>
    }
  }
}
 80086e6:	bf00      	nop
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086fa:	e005      	b.n	8008708 <USBD_GetLen+0x1a>
  {
    len++;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	3301      	adds	r3, #1
 8008700:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3301      	adds	r3, #1
 8008706:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1f5      	bne.n	80086fc <USBD_GetLen+0xe>
  }

  return len;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	4613      	mov	r3, r2
 800872a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2202      	movs	r2, #2
 8008730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008734:	88fa      	ldrh	r2, [r7, #6]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fd76 	bl	8009238 <USBD_LL_Transmit>

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4613      	mov	r3, r2
 8008762:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	2100      	movs	r1, #0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fd64 	bl	8009238 <USBD_LL_Transmit>

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	4613      	mov	r3, r2
 8008786:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2203      	movs	r2, #3
 800878c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008790:	88fa      	ldrh	r2, [r7, #6]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008798:	88fa      	ldrh	r2, [r7, #6]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fd69 	bl	800927e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	4613      	mov	r3, r2
 80087c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087c4:	88fb      	ldrh	r3, [r7, #6]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	2100      	movs	r1, #0
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fd57 	bl	800927e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2204      	movs	r2, #4
 80087e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087ea:	2300      	movs	r3, #0
 80087ec:	2200      	movs	r2, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fd21 	bl	8009238 <USBD_LL_Transmit>

  return USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2205      	movs	r2, #5
 800880c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008810:	2300      	movs	r3, #0
 8008812:	2200      	movs	r2, #0
 8008814:	2100      	movs	r1, #0
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fd31 	bl	800927e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800882c:	2200      	movs	r2, #0
 800882e:	4912      	ldr	r1, [pc, #72]	; (8008878 <MX_USB_DEVICE_Init+0x50>)
 8008830:	4812      	ldr	r0, [pc, #72]	; (800887c <MX_USB_DEVICE_Init+0x54>)
 8008832:	f7fe ff57 	bl	80076e4 <USBD_Init>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800883c:	f7f7 fec0 	bl	80005c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008840:	490f      	ldr	r1, [pc, #60]	; (8008880 <MX_USB_DEVICE_Init+0x58>)
 8008842:	480e      	ldr	r0, [pc, #56]	; (800887c <MX_USB_DEVICE_Init+0x54>)
 8008844:	f7fe ff79 	bl	800773a <USBD_RegisterClass>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800884e:	f7f7 feb7 	bl	80005c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008852:	490c      	ldr	r1, [pc, #48]	; (8008884 <MX_USB_DEVICE_Init+0x5c>)
 8008854:	4809      	ldr	r0, [pc, #36]	; (800887c <MX_USB_DEVICE_Init+0x54>)
 8008856:	f7fe fea7 	bl	80075a8 <USBD_CDC_RegisterInterface>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008860:	f7f7 feae 	bl	80005c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008864:	4805      	ldr	r0, [pc, #20]	; (800887c <MX_USB_DEVICE_Init+0x54>)
 8008866:	f7fe ff82 	bl	800776e <USBD_Start>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008870:	f7f7 fea6 	bl	80005c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008874:	bf00      	nop
 8008876:	bd80      	pop	{r7, pc}
 8008878:	2000012c 	.word	0x2000012c
 800887c:	2000033c 	.word	0x2000033c
 8008880:	20000018 	.word	0x20000018
 8008884:	2000011c 	.word	0x2000011c

08008888 <LED_ON_OFF>:
static int8_t CDC_DeInit_FS(void);
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void LED_ON_OFF(uint8_t *data) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b09c      	sub	sp, #112	; 0x70
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t *) data, strlen((char *)data));
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7f7 fc9d 	bl	80001d0 <strlen>
 8008896:	4603      	mov	r3, r0
 8008898:	b29b      	uxth	r3, r3
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f969 	bl	8008b74 <CDC_Transmit_FS>
	uint8_t rdata[100];
	sprintf((char *) rdata, (uint8_t *) data, strlen((char *)data));
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7f7 fc94 	bl	80001d0 <strlen>
 80088a8:	4602      	mov	r2, r0
 80088aa:	f107 030c 	add.w	r3, r7, #12
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fd6b 	bl	800938c <siprintf>
	if(rdata[0] == 'L' && rdata[1] == 'D') {
 80088b6:	7b3b      	ldrb	r3, [r7, #12]
 80088b8:	2b4c      	cmp	r3, #76	; 0x4c
 80088ba:	f040 80af 	bne.w	8008a1c <LED_ON_OFF+0x194>
 80088be:	7b7b      	ldrb	r3, [r7, #13]
 80088c0:	2b44      	cmp	r3, #68	; 0x44
 80088c2:	f040 80ab 	bne.w	8008a1c <LED_ON_OFF+0x194>
		if(rdata[2] == 'N') {
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b4e      	cmp	r3, #78	; 0x4e
 80088ca:	d152      	bne.n	8008972 <LED_ON_OFF+0xea>
			if(rdata[3] == '3')
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	2b33      	cmp	r3, #51	; 0x33
 80088d0:	d106      	bne.n	80088e0 <LED_ON_OFF+0x58>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80088d2:	2201      	movs	r2, #1
 80088d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088d8:	4852      	ldr	r0, [pc, #328]	; (8008a24 <LED_ON_OFF+0x19c>)
 80088da:	f7f8 faf9 	bl	8000ed0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_RESET);
			else if(rdata[3] == '1' && rdata[4] == '0')
				HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
		}
	}
}
 80088de:	e09d      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '4')
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	2b34      	cmp	r3, #52	; 0x34
 80088e4:	d106      	bne.n	80088f4 <LED_ON_OFF+0x6c>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80088e6:	2201      	movs	r2, #1
 80088e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80088ec:	484d      	ldr	r0, [pc, #308]	; (8008a24 <LED_ON_OFF+0x19c>)
 80088ee:	f7f8 faef 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 80088f2:	e093      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '5')
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b35      	cmp	r3, #53	; 0x35
 80088f8:	d106      	bne.n	8008908 <LED_ON_OFF+0x80>
				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80088fa:	2201      	movs	r2, #1
 80088fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008900:	4848      	ldr	r0, [pc, #288]	; (8008a24 <LED_ON_OFF+0x19c>)
 8008902:	f7f8 fae5 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 8008906:	e089      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '6')
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b36      	cmp	r3, #54	; 0x36
 800890c:	d106      	bne.n	800891c <LED_ON_OFF+0x94>
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800890e:	2201      	movs	r2, #1
 8008910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008914:	4843      	ldr	r0, [pc, #268]	; (8008a24 <LED_ON_OFF+0x19c>)
 8008916:	f7f8 fadb 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 800891a:	e07f      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '7')
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b37      	cmp	r3, #55	; 0x37
 8008920:	d106      	bne.n	8008930 <LED_ON_OFF+0xa8>
				HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 8008922:	2201      	movs	r2, #1
 8008924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008928:	483e      	ldr	r0, [pc, #248]	; (8008a24 <LED_ON_OFF+0x19c>)
 800892a:	f7f8 fad1 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 800892e:	e075      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '8')
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b38      	cmp	r3, #56	; 0x38
 8008934:	d106      	bne.n	8008944 <LED_ON_OFF+0xbc>
				HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_SET);
 8008936:	2201      	movs	r2, #1
 8008938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800893c:	4839      	ldr	r0, [pc, #228]	; (8008a24 <LED_ON_OFF+0x19c>)
 800893e:	f7f8 fac7 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 8008942:	e06b      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '9')
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b39      	cmp	r3, #57	; 0x39
 8008948:	d106      	bne.n	8008958 <LED_ON_OFF+0xd0>
				HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_SET);
 800894a:	2201      	movs	r2, #1
 800894c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008950:	4834      	ldr	r0, [pc, #208]	; (8008a24 <LED_ON_OFF+0x19c>)
 8008952:	f7f8 fabd 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 8008956:	e061      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '1' && rdata[4] == '0')
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b31      	cmp	r3, #49	; 0x31
 800895c:	d15e      	bne.n	8008a1c <LED_ON_OFF+0x194>
 800895e:	7c3b      	ldrb	r3, [r7, #16]
 8008960:	2b30      	cmp	r3, #48	; 0x30
 8008962:	d15b      	bne.n	8008a1c <LED_ON_OFF+0x194>
				HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_SET);
 8008964:	2201      	movs	r2, #1
 8008966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800896a:	482e      	ldr	r0, [pc, #184]	; (8008a24 <LED_ON_OFF+0x19c>)
 800896c:	f7f8 fab0 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 8008970:	e054      	b.n	8008a1c <LED_ON_OFF+0x194>
		else if(rdata[2] == 'F') {
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b46      	cmp	r3, #70	; 0x46
 8008976:	d151      	bne.n	8008a1c <LED_ON_OFF+0x194>
			if(rdata[3] == '3')
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	2b33      	cmp	r3, #51	; 0x33
 800897c:	d106      	bne.n	800898c <LED_ON_OFF+0x104>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800897e:	2200      	movs	r2, #0
 8008980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008984:	4827      	ldr	r0, [pc, #156]	; (8008a24 <LED_ON_OFF+0x19c>)
 8008986:	f7f8 faa3 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 800898a:	e047      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '4')
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	2b34      	cmp	r3, #52	; 0x34
 8008990:	d106      	bne.n	80089a0 <LED_ON_OFF+0x118>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8008992:	2200      	movs	r2, #0
 8008994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008998:	4822      	ldr	r0, [pc, #136]	; (8008a24 <LED_ON_OFF+0x19c>)
 800899a:	f7f8 fa99 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 800899e:	e03d      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '5')
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	2b35      	cmp	r3, #53	; 0x35
 80089a4:	d106      	bne.n	80089b4 <LED_ON_OFF+0x12c>
				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80089a6:	2200      	movs	r2, #0
 80089a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089ac:	481d      	ldr	r0, [pc, #116]	; (8008a24 <LED_ON_OFF+0x19c>)
 80089ae:	f7f8 fa8f 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 80089b2:	e033      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '6')
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	2b36      	cmp	r3, #54	; 0x36
 80089b8:	d106      	bne.n	80089c8 <LED_ON_OFF+0x140>
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80089ba:	2200      	movs	r2, #0
 80089bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089c0:	4818      	ldr	r0, [pc, #96]	; (8008a24 <LED_ON_OFF+0x19c>)
 80089c2:	f7f8 fa85 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 80089c6:	e029      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '7')
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2b37      	cmp	r3, #55	; 0x37
 80089cc:	d106      	bne.n	80089dc <LED_ON_OFF+0x154>
				HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 80089ce:	2200      	movs	r2, #0
 80089d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80089d4:	4813      	ldr	r0, [pc, #76]	; (8008a24 <LED_ON_OFF+0x19c>)
 80089d6:	f7f8 fa7b 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 80089da:	e01f      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '8')
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b38      	cmp	r3, #56	; 0x38
 80089e0:	d106      	bne.n	80089f0 <LED_ON_OFF+0x168>
				HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);
 80089e2:	2200      	movs	r2, #0
 80089e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80089e8:	480e      	ldr	r0, [pc, #56]	; (8008a24 <LED_ON_OFF+0x19c>)
 80089ea:	f7f8 fa71 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 80089ee:	e015      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '9')
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b39      	cmp	r3, #57	; 0x39
 80089f4:	d106      	bne.n	8008a04 <LED_ON_OFF+0x17c>
				HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_RESET);
 80089f6:	2200      	movs	r2, #0
 80089f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089fc:	4809      	ldr	r0, [pc, #36]	; (8008a24 <LED_ON_OFF+0x19c>)
 80089fe:	f7f8 fa67 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 8008a02:	e00b      	b.n	8008a1c <LED_ON_OFF+0x194>
			else if(rdata[3] == '1' && rdata[4] == '0')
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b31      	cmp	r3, #49	; 0x31
 8008a08:	d108      	bne.n	8008a1c <LED_ON_OFF+0x194>
 8008a0a:	7c3b      	ldrb	r3, [r7, #16]
 8008a0c:	2b30      	cmp	r3, #48	; 0x30
 8008a0e:	d105      	bne.n	8008a1c <LED_ON_OFF+0x194>
				HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
 8008a10:	2200      	movs	r2, #0
 8008a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008a16:	4803      	ldr	r0, [pc, #12]	; (8008a24 <LED_ON_OFF+0x19c>)
 8008a18:	f7f8 fa5a 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 8008a1c:	bf00      	nop
 8008a1e:	3770      	adds	r7, #112	; 0x70
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	48001000 	.word	0x48001000

08008a28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4905      	ldr	r1, [pc, #20]	; (8008a44 <CDC_Init_FS+0x1c>)
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <CDC_Init_FS+0x20>)
 8008a32:	f7fe fdd0 	bl	80075d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a36:	4905      	ldr	r1, [pc, #20]	; (8008a4c <CDC_Init_FS+0x24>)
 8008a38:	4803      	ldr	r0, [pc, #12]	; (8008a48 <CDC_Init_FS+0x20>)
 8008a3a:	f7fe fde6 	bl	800760a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20000a00 	.word	0x20000a00
 8008a48:	2000033c 	.word	0x2000033c
 8008a4c:	20000600 	.word	0x20000600

08008a50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	2b23      	cmp	r3, #35	; 0x23
 8008a74:	d84a      	bhi.n	8008b0c <CDC_Control_FS+0xac>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <CDC_Control_FS+0x1c>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008b0d 	.word	0x08008b0d
 8008a80:	08008b0d 	.word	0x08008b0d
 8008a84:	08008b0d 	.word	0x08008b0d
 8008a88:	08008b0d 	.word	0x08008b0d
 8008a8c:	08008b0d 	.word	0x08008b0d
 8008a90:	08008b0d 	.word	0x08008b0d
 8008a94:	08008b0d 	.word	0x08008b0d
 8008a98:	08008b0d 	.word	0x08008b0d
 8008a9c:	08008b0d 	.word	0x08008b0d
 8008aa0:	08008b0d 	.word	0x08008b0d
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008b0d 	.word	0x08008b0d
 8008aac:	08008b0d 	.word	0x08008b0d
 8008ab0:	08008b0d 	.word	0x08008b0d
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008b0d 	.word	0x08008b0d
 8008ac0:	08008b0d 	.word	0x08008b0d
 8008ac4:	08008b0d 	.word	0x08008b0d
 8008ac8:	08008b0d 	.word	0x08008b0d
 8008acc:	08008b0d 	.word	0x08008b0d
 8008ad0:	08008b0d 	.word	0x08008b0d
 8008ad4:	08008b0d 	.word	0x08008b0d
 8008ad8:	08008b0d 	.word	0x08008b0d
 8008adc:	08008b0d 	.word	0x08008b0d
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	08008b0d 	.word	0x08008b0d
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b0d 	.word	0x08008b0d
 8008af0:	08008b0d 	.word	0x08008b0d
 8008af4:	08008b0d 	.word	0x08008b0d
 8008af8:	08008b0d 	.word	0x08008b0d
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b0d 	.word	0x08008b0d
 8008b04:	08008b0d 	.word	0x08008b0d
 8008b08:	08008b0d 	.word	0x08008b0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b0c:	bf00      	nop
  }

  return (USBD_OK);
 8008b0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4810      	ldr	r0, [pc, #64]	; (8008b6c <CDC_Receive_FS+0x50>)
 8008b2a:	f7fe fd6e 	bl	800760a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b2e:	480f      	ldr	r0, [pc, #60]	; (8008b6c <CDC_Receive_FS+0x50>)
 8008b30:	f7fe fdae 	bl	8007690 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	73fb      	strb	r3, [r7, #15]
  memset(USB_RX_Buffer, '\0', 64);
 8008b3a:	2240      	movs	r2, #64	; 0x40
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	480c      	ldr	r0, [pc, #48]	; (8008b70 <CDC_Receive_FS+0x54>)
 8008b40:	f000 fc44 	bl	80093cc <memset>
  memcpy(USB_RX_Buffer, Buf, len);
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	461a      	mov	r2, r3
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4809      	ldr	r0, [pc, #36]	; (8008b70 <CDC_Receive_FS+0x54>)
 8008b4c:	f000 fc72 	bl	8009434 <memcpy>
  memset(Buf, '\0', len);
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	461a      	mov	r2, r3
 8008b54:	2100      	movs	r1, #0
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fc38 	bl	80093cc <memset>
  LED_ON_OFF(USB_RX_Buffer);
 8008b5c:	4804      	ldr	r0, [pc, #16]	; (8008b70 <CDC_Receive_FS+0x54>)
 8008b5e:	f7ff fe93 	bl	8008888 <LED_ON_OFF>
  return (USBD_OK);
 8008b62:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	2000033c 	.word	0x2000033c
 8008b70:	200002a4 	.word	0x200002a4

08008b74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <CDC_Transmit_FS+0x48>)
 8008b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e00b      	b.n	8008bb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b9a:	887b      	ldrh	r3, [r7, #2]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	4806      	ldr	r0, [pc, #24]	; (8008bbc <CDC_Transmit_FS+0x48>)
 8008ba2:	f7fe fd18 	bl	80075d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ba6:	4805      	ldr	r0, [pc, #20]	; (8008bbc <CDC_Transmit_FS+0x48>)
 8008ba8:	f7fe fd43 	bl	8007632 <USBD_CDC_TransmitPacket>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000033c 	.word	0x2000033c

08008bc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2212      	movs	r2, #18
 8008bd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20000148 	.word	0x20000148

08008be4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bf6:	4b03      	ldr	r3, [pc, #12]	; (8008c04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	2000015c 	.word	0x2000015c

08008c08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d105      	bne.n	8008c26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	4907      	ldr	r1, [pc, #28]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c1e:	4808      	ldr	r0, [pc, #32]	; (8008c40 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c20:	f7ff fd23 	bl	800866a <USBD_GetString>
 8008c24:	e004      	b.n	8008c30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	4904      	ldr	r1, [pc, #16]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c2a:	4805      	ldr	r0, [pc, #20]	; (8008c40 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c2c:	f7ff fd1d 	bl	800866a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c30:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000e00 	.word	0x20000e00
 8008c40:	08009cfc 	.word	0x08009cfc

08008c44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	4904      	ldr	r1, [pc, #16]	; (8008c64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c54:	4804      	ldr	r0, [pc, #16]	; (8008c68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c56:	f7ff fd08 	bl	800866a <USBD_GetString>
  return USBD_StrDesc;
 8008c5a:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000e00 	.word	0x20000e00
 8008c68:	08009d10 	.word	0x08009d10

08008c6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	221a      	movs	r2, #26
 8008c7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c7e:	f000 f843 	bl	8008d08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c82:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000160 	.word	0x20000160

08008c90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4907      	ldr	r1, [pc, #28]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ca8:	f7ff fcdf 	bl	800866a <USBD_GetString>
 8008cac:	e004      	b.n	8008cb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	4904      	ldr	r1, [pc, #16]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cb2:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cb4:	f7ff fcd9 	bl	800866a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb8:	4b02      	ldr	r3, [pc, #8]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000e00 	.word	0x20000e00
 8008cc8:	08009d24 	.word	0x08009d24

08008ccc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	6039      	str	r1, [r7, #0]
 8008cd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d105      	bne.n	8008cea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	4907      	ldr	r1, [pc, #28]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ce2:	4808      	ldr	r0, [pc, #32]	; (8008d04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ce4:	f7ff fcc1 	bl	800866a <USBD_GetString>
 8008ce8:	e004      	b.n	8008cf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4904      	ldr	r1, [pc, #16]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cee:	4805      	ldr	r0, [pc, #20]	; (8008d04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cf0:	f7ff fcbb 	bl	800866a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf4:	4b02      	ldr	r3, [pc, #8]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000e00 	.word	0x20000e00
 8008d04:	08009d30 	.word	0x08009d30

08008d08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <Get_SerialNum+0x44>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d14:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <Get_SerialNum+0x48>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <Get_SerialNum+0x4c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4413      	add	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d2e:	2208      	movs	r2, #8
 8008d30:	4909      	ldr	r1, [pc, #36]	; (8008d58 <Get_SerialNum+0x50>)
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 f814 	bl	8008d60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d38:	2204      	movs	r2, #4
 8008d3a:	4908      	ldr	r1, [pc, #32]	; (8008d5c <Get_SerialNum+0x54>)
 8008d3c:	68b8      	ldr	r0, [r7, #8]
 8008d3e:	f000 f80f 	bl	8008d60 <IntToUnicode>
  }
}
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	1ffff7ac 	.word	0x1ffff7ac
 8008d50:	1ffff7b0 	.word	0x1ffff7b0
 8008d54:	1ffff7b4 	.word	0x1ffff7b4
 8008d58:	20000162 	.word	0x20000162
 8008d5c:	20000172 	.word	0x20000172

08008d60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d72:	2300      	movs	r3, #0
 8008d74:	75fb      	strb	r3, [r7, #23]
 8008d76:	e027      	b.n	8008dc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	0f1b      	lsrs	r3, r3, #28
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d80b      	bhi.n	8008d98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	0f1b      	lsrs	r3, r3, #28
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	440b      	add	r3, r1
 8008d90:	3230      	adds	r2, #48	; 0x30
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e00a      	b.n	8008dae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0f1b      	lsrs	r3, r3, #28
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4619      	mov	r1, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	440b      	add	r3, r1
 8008da8:	3237      	adds	r2, #55	; 0x37
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	3301      	adds	r3, #1
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	75fb      	strb	r3, [r7, #23]
 8008dc8:	7dfa      	ldrb	r2, [r7, #23]
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d3d3      	bcc.n	8008d78 <IntToUnicode+0x18>
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	; 0x28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de8:	f107 0314 	add.w	r3, r7, #20
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	605a      	str	r2, [r3, #4]
 8008df2:	609a      	str	r2, [r3, #8]
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a1c      	ldr	r2, [pc, #112]	; (8008e70 <HAL_PCD_MspInit+0x90>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d131      	bne.n	8008e66 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e02:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <HAL_PCD_MspInit+0x94>)
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	4a1b      	ldr	r2, [pc, #108]	; (8008e74 <HAL_PCD_MspInit+0x94>)
 8008e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e0c:	6153      	str	r3, [r2, #20]
 8008e0e:	4b19      	ldr	r3, [pc, #100]	; (8008e74 <HAL_PCD_MspInit+0x94>)
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8008e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e20:	2302      	movs	r3, #2
 8008e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008e2c:	230e      	movs	r3, #14
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	4619      	mov	r1, r3
 8008e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e3a:	f7f7 fecf 	bl	8000bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <HAL_PCD_MspInit+0x94>)
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	4a0c      	ldr	r2, [pc, #48]	; (8008e74 <HAL_PCD_MspInit+0x94>)
 8008e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e48:	61d3      	str	r3, [r2, #28]
 8008e4a:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <HAL_PCD_MspInit+0x94>)
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008e56:	2200      	movs	r2, #0
 8008e58:	2100      	movs	r1, #0
 8008e5a:	2014      	movs	r0, #20
 8008e5c:	f7f7 fe94 	bl	8000b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008e60:	2014      	movs	r0, #20
 8008e62:	f7f7 fead 	bl	8000bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008e66:	bf00      	nop
 8008e68:	3728      	adds	r7, #40	; 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	40005c00 	.word	0x40005c00
 8008e74:	40021000 	.word	0x40021000

08008e78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fe fcb6 	bl	8007800 <USBD_LL_SetupStage>
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	440b      	add	r3, r1
 8008ebc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f7fe fce8 	bl	800789a <USBD_LL_DataOutStage>
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	440b      	add	r3, r1
 8008ef2:	333c      	adds	r3, #60	; 0x3c
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f7fe fd3f 	bl	800797c <USBD_LL_DataInStage>
}
 8008efe:	bf00      	nop
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fe52 	bl	8007bbe <USBD_LL_SOF>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d001      	beq.n	8008f3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f36:	f7f7 fb43 	bl	80005c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f40:	7bfa      	ldrb	r2, [r7, #15]
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fdff 	bl	8007b48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fdb8 	bl	8007ac6 <USBD_LL_Reset>
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fdfa 	bl	8007b68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f7c:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <HAL_PCD_SuspendCallback+0x30>)
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	4a03      	ldr	r2, [pc, #12]	; (8008f90 <HAL_PCD_SuspendCallback+0x30>)
 8008f82:	f043 0306 	orr.w	r3, r3, #6
 8008f86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	e000ed00 	.word	0xe000ed00

08008f94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fdf5 	bl	8007b92 <USBD_LL_Resume>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008fb8:	4a28      	ldr	r2, [pc, #160]	; (800905c <USBD_LL_Init+0xac>)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a26      	ldr	r2, [pc, #152]	; (800905c <USBD_LL_Init+0xac>)
 8008fc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008fc8:	4b24      	ldr	r3, [pc, #144]	; (800905c <USBD_LL_Init+0xac>)
 8008fca:	4a25      	ldr	r2, [pc, #148]	; (8009060 <USBD_LL_Init+0xb0>)
 8008fcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008fce:	4b23      	ldr	r3, [pc, #140]	; (800905c <USBD_LL_Init+0xac>)
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008fd4:	4b21      	ldr	r3, [pc, #132]	; (800905c <USBD_LL_Init+0xac>)
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fda:	4b20      	ldr	r3, [pc, #128]	; (800905c <USBD_LL_Init+0xac>)
 8008fdc:	2202      	movs	r2, #2
 8008fde:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008fe0:	4b1e      	ldr	r3, [pc, #120]	; (800905c <USBD_LL_Init+0xac>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008fe6:	4b1d      	ldr	r3, [pc, #116]	; (800905c <USBD_LL_Init+0xac>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008fec:	481b      	ldr	r0, [pc, #108]	; (800905c <USBD_LL_Init+0xac>)
 8008fee:	f7f8 f8ad 	bl	800114c <HAL_PCD_Init>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ff8:	f7f7 fae2 	bl	80005c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009002:	2318      	movs	r3, #24
 8009004:	2200      	movs	r2, #0
 8009006:	2100      	movs	r1, #0
 8009008:	f7f9 fd36 	bl	8002a78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009012:	2358      	movs	r3, #88	; 0x58
 8009014:	2200      	movs	r2, #0
 8009016:	2180      	movs	r1, #128	; 0x80
 8009018:	f7f9 fd2e 	bl	8002a78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009022:	23c0      	movs	r3, #192	; 0xc0
 8009024:	2200      	movs	r2, #0
 8009026:	2181      	movs	r1, #129	; 0x81
 8009028:	f7f9 fd26 	bl	8002a78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009032:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009036:	2200      	movs	r2, #0
 8009038:	2101      	movs	r1, #1
 800903a:	f7f9 fd1d 	bl	8002a78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009048:	2200      	movs	r2, #0
 800904a:	2182      	movs	r1, #130	; 0x82
 800904c:	f7f9 fd14 	bl	8002a78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20001000 	.word	0x20001000
 8009060:	40005c00 	.word	0x40005c00

08009064 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800907a:	4618      	mov	r0, r3
 800907c:	f7f8 f938 	bl	80012f0 <HAL_PCD_Start>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f954 	bl	8009334 <USBD_Get_USB_Status>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009090:	7bbb      	ldrb	r3, [r7, #14]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	4608      	mov	r0, r1
 80090a4:	4611      	mov	r1, r2
 80090a6:	461a      	mov	r2, r3
 80090a8:	4603      	mov	r3, r0
 80090aa:	70fb      	strb	r3, [r7, #3]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70bb      	strb	r3, [r7, #2]
 80090b0:	4613      	mov	r3, r2
 80090b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090c2:	78bb      	ldrb	r3, [r7, #2]
 80090c4:	883a      	ldrh	r2, [r7, #0]
 80090c6:	78f9      	ldrb	r1, [r7, #3]
 80090c8:	f7f8 fa31 	bl	800152e <HAL_PCD_EP_Open>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f92e 	bl	8009334 <USBD_Get_USB_Status>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	4611      	mov	r1, r2
 8009104:	4618      	mov	r0, r3
 8009106:	f7f8 fa6f 	bl	80015e8 <HAL_PCD_EP_Close>
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f90f 	bl	8009334 <USBD_Get_USB_Status>
 8009116:	4603      	mov	r3, r0
 8009118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911a:	7bbb      	ldrb	r3, [r7, #14]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f7f8 fb18 	bl	8001778 <HAL_PCD_EP_SetStall>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f8f0 	bl	8009334 <USBD_Get_USB_Status>
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009158:	7bbb      	ldrb	r3, [r7, #14]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	4611      	mov	r1, r2
 8009180:	4618      	mov	r0, r3
 8009182:	f7f8 fb4b 	bl	800181c <HAL_PCD_EP_ClrStall>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f8d1 	bl	8009334 <USBD_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009196:	7bbb      	ldrb	r3, [r7, #14]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80091b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da0c      	bge.n	80091d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	440b      	add	r3, r1
 80091d0:	3302      	adds	r3, #2
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	e00b      	b.n	80091ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091d6:	78fb      	ldrb	r3, [r7, #3]
 80091d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	4613      	mov	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	440b      	add	r3, r1
 80091e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80091ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009214:	78fa      	ldrb	r2, [r7, #3]
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f7f8 f963 	bl	80014e4 <HAL_PCD_SetAddress>
 800921e:	4603      	mov	r3, r0
 8009220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f885 	bl	8009334 <USBD_Get_USB_Status>
 800922a:	4603      	mov	r3, r0
 800922c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	461a      	mov	r2, r3
 8009244:	460b      	mov	r3, r1
 8009246:	72fb      	strb	r3, [r7, #11]
 8009248:	4613      	mov	r3, r2
 800924a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800925a:	893b      	ldrh	r3, [r7, #8]
 800925c:	7af9      	ldrb	r1, [r7, #11]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	f7f8 fa53 	bl	800170a <HAL_PCD_EP_Transmit>
 8009264:	4603      	mov	r3, r0
 8009266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f862 	bl	8009334 <USBD_Get_USB_Status>
 8009270:	4603      	mov	r3, r0
 8009272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009274:	7dbb      	ldrb	r3, [r7, #22]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b086      	sub	sp, #24
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	461a      	mov	r2, r3
 800928a:	460b      	mov	r3, r1
 800928c:	72fb      	strb	r3, [r7, #11]
 800928e:	4613      	mov	r3, r2
 8009290:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092a0:	893b      	ldrh	r3, [r7, #8]
 80092a2:	7af9      	ldrb	r1, [r7, #11]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	f7f8 f9e7 	bl	8001678 <HAL_PCD_EP_Receive>
 80092aa:	4603      	mov	r3, r0
 80092ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f83f 	bl	8009334 <USBD_Get_USB_Status>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	4611      	mov	r1, r2
 80092da:	4618      	mov	r0, r3
 80092dc:	f7f8 f9fd 	bl	80016da <HAL_PCD_EP_GetRxCount>
 80092e0:	4603      	mov	r3, r0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092f4:	4b03      	ldr	r3, [pc, #12]	; (8009304 <USBD_static_malloc+0x18>)
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	200012ec 	.word	0x200012ec

08009308 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]

}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009342:	79fb      	ldrb	r3, [r7, #7]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d817      	bhi.n	8009378 <USBD_Get_USB_Status+0x44>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <USBD_Get_USB_Status+0x1c>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	08009361 	.word	0x08009361
 8009354:	08009367 	.word	0x08009367
 8009358:	0800936d 	.word	0x0800936d
 800935c:	08009373 	.word	0x08009373
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
    break;
 8009364:	e00b      	b.n	800937e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009366:	2302      	movs	r3, #2
 8009368:	73fb      	strb	r3, [r7, #15]
    break;
 800936a:	e008      	b.n	800937e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800936c:	2301      	movs	r3, #1
 800936e:	73fb      	strb	r3, [r7, #15]
    break;
 8009370:	e005      	b.n	800937e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009372:	2302      	movs	r3, #2
 8009374:	73fb      	strb	r3, [r7, #15]
    break;
 8009376:	e002      	b.n	800937e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009378:	2302      	movs	r3, #2
 800937a:	73fb      	strb	r3, [r7, #15]
    break;
 800937c:	bf00      	nop
  }
  return usb_status;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <siprintf>:
 800938c:	b40e      	push	{r1, r2, r3}
 800938e:	b500      	push	{lr}
 8009390:	b09c      	sub	sp, #112	; 0x70
 8009392:	ab1d      	add	r3, sp, #116	; 0x74
 8009394:	9002      	str	r0, [sp, #8]
 8009396:	9006      	str	r0, [sp, #24]
 8009398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800939c:	4809      	ldr	r0, [pc, #36]	; (80093c4 <siprintf+0x38>)
 800939e:	9107      	str	r1, [sp, #28]
 80093a0:	9104      	str	r1, [sp, #16]
 80093a2:	4909      	ldr	r1, [pc, #36]	; (80093c8 <siprintf+0x3c>)
 80093a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a8:	9105      	str	r1, [sp, #20]
 80093aa:	6800      	ldr	r0, [r0, #0]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	a902      	add	r1, sp, #8
 80093b0:	f000 f9a0 	bl	80096f4 <_svfiprintf_r>
 80093b4:	9b02      	ldr	r3, [sp, #8]
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
 80093ba:	b01c      	add	sp, #112	; 0x70
 80093bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80093c0:	b003      	add	sp, #12
 80093c2:	4770      	bx	lr
 80093c4:	200001c8 	.word	0x200001c8
 80093c8:	ffff0208 	.word	0xffff0208

080093cc <memset>:
 80093cc:	4402      	add	r2, r0
 80093ce:	4603      	mov	r3, r0
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d100      	bne.n	80093d6 <memset+0xa>
 80093d4:	4770      	bx	lr
 80093d6:	f803 1b01 	strb.w	r1, [r3], #1
 80093da:	e7f9      	b.n	80093d0 <memset+0x4>

080093dc <__errno>:
 80093dc:	4b01      	ldr	r3, [pc, #4]	; (80093e4 <__errno+0x8>)
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	200001c8 	.word	0x200001c8

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	4d0d      	ldr	r5, [pc, #52]	; (8009420 <__libc_init_array+0x38>)
 80093ec:	4c0d      	ldr	r4, [pc, #52]	; (8009424 <__libc_init_array+0x3c>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	2600      	movs	r6, #0
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	4d0b      	ldr	r5, [pc, #44]	; (8009428 <__libc_init_array+0x40>)
 80093fa:	4c0c      	ldr	r4, [pc, #48]	; (800942c <__libc_init_array+0x44>)
 80093fc:	f000 fc6a 	bl	8009cd4 <_init>
 8009400:	1b64      	subs	r4, r4, r5
 8009402:	10a4      	asrs	r4, r4, #2
 8009404:	2600      	movs	r6, #0
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	f855 3b04 	ldr.w	r3, [r5], #4
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	08009dac 	.word	0x08009dac
 8009424:	08009dac 	.word	0x08009dac
 8009428:	08009dac 	.word	0x08009dac
 800942c:	08009db0 	.word	0x08009db0

08009430 <__retarget_lock_acquire_recursive>:
 8009430:	4770      	bx	lr

08009432 <__retarget_lock_release_recursive>:
 8009432:	4770      	bx	lr

08009434 <memcpy>:
 8009434:	440a      	add	r2, r1
 8009436:	4291      	cmp	r1, r2
 8009438:	f100 33ff 	add.w	r3, r0, #4294967295
 800943c:	d100      	bne.n	8009440 <memcpy+0xc>
 800943e:	4770      	bx	lr
 8009440:	b510      	push	{r4, lr}
 8009442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800944a:	4291      	cmp	r1, r2
 800944c:	d1f9      	bne.n	8009442 <memcpy+0xe>
 800944e:	bd10      	pop	{r4, pc}

08009450 <_free_r>:
 8009450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009452:	2900      	cmp	r1, #0
 8009454:	d044      	beq.n	80094e0 <_free_r+0x90>
 8009456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945a:	9001      	str	r0, [sp, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f1a1 0404 	sub.w	r4, r1, #4
 8009462:	bfb8      	it	lt
 8009464:	18e4      	addlt	r4, r4, r3
 8009466:	f000 f8df 	bl	8009628 <__malloc_lock>
 800946a:	4a1e      	ldr	r2, [pc, #120]	; (80094e4 <_free_r+0x94>)
 800946c:	9801      	ldr	r0, [sp, #4]
 800946e:	6813      	ldr	r3, [r2, #0]
 8009470:	b933      	cbnz	r3, 8009480 <_free_r+0x30>
 8009472:	6063      	str	r3, [r4, #4]
 8009474:	6014      	str	r4, [r2, #0]
 8009476:	b003      	add	sp, #12
 8009478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800947c:	f000 b8da 	b.w	8009634 <__malloc_unlock>
 8009480:	42a3      	cmp	r3, r4
 8009482:	d908      	bls.n	8009496 <_free_r+0x46>
 8009484:	6825      	ldr	r5, [r4, #0]
 8009486:	1961      	adds	r1, r4, r5
 8009488:	428b      	cmp	r3, r1
 800948a:	bf01      	itttt	eq
 800948c:	6819      	ldreq	r1, [r3, #0]
 800948e:	685b      	ldreq	r3, [r3, #4]
 8009490:	1949      	addeq	r1, r1, r5
 8009492:	6021      	streq	r1, [r4, #0]
 8009494:	e7ed      	b.n	8009472 <_free_r+0x22>
 8009496:	461a      	mov	r2, r3
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	b10b      	cbz	r3, 80094a0 <_free_r+0x50>
 800949c:	42a3      	cmp	r3, r4
 800949e:	d9fa      	bls.n	8009496 <_free_r+0x46>
 80094a0:	6811      	ldr	r1, [r2, #0]
 80094a2:	1855      	adds	r5, r2, r1
 80094a4:	42a5      	cmp	r5, r4
 80094a6:	d10b      	bne.n	80094c0 <_free_r+0x70>
 80094a8:	6824      	ldr	r4, [r4, #0]
 80094aa:	4421      	add	r1, r4
 80094ac:	1854      	adds	r4, r2, r1
 80094ae:	42a3      	cmp	r3, r4
 80094b0:	6011      	str	r1, [r2, #0]
 80094b2:	d1e0      	bne.n	8009476 <_free_r+0x26>
 80094b4:	681c      	ldr	r4, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	6053      	str	r3, [r2, #4]
 80094ba:	440c      	add	r4, r1
 80094bc:	6014      	str	r4, [r2, #0]
 80094be:	e7da      	b.n	8009476 <_free_r+0x26>
 80094c0:	d902      	bls.n	80094c8 <_free_r+0x78>
 80094c2:	230c      	movs	r3, #12
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	e7d6      	b.n	8009476 <_free_r+0x26>
 80094c8:	6825      	ldr	r5, [r4, #0]
 80094ca:	1961      	adds	r1, r4, r5
 80094cc:	428b      	cmp	r3, r1
 80094ce:	bf04      	itt	eq
 80094d0:	6819      	ldreq	r1, [r3, #0]
 80094d2:	685b      	ldreq	r3, [r3, #4]
 80094d4:	6063      	str	r3, [r4, #4]
 80094d6:	bf04      	itt	eq
 80094d8:	1949      	addeq	r1, r1, r5
 80094da:	6021      	streq	r1, [r4, #0]
 80094dc:	6054      	str	r4, [r2, #4]
 80094de:	e7ca      	b.n	8009476 <_free_r+0x26>
 80094e0:	b003      	add	sp, #12
 80094e2:	bd30      	pop	{r4, r5, pc}
 80094e4:	2000164c 	.word	0x2000164c

080094e8 <sbrk_aligned>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	4e0e      	ldr	r6, [pc, #56]	; (8009524 <sbrk_aligned+0x3c>)
 80094ec:	460c      	mov	r4, r1
 80094ee:	6831      	ldr	r1, [r6, #0]
 80094f0:	4605      	mov	r5, r0
 80094f2:	b911      	cbnz	r1, 80094fa <sbrk_aligned+0x12>
 80094f4:	f000 fba6 	bl	8009c44 <_sbrk_r>
 80094f8:	6030      	str	r0, [r6, #0]
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 fba1 	bl	8009c44 <_sbrk_r>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	d00a      	beq.n	800951c <sbrk_aligned+0x34>
 8009506:	1cc4      	adds	r4, r0, #3
 8009508:	f024 0403 	bic.w	r4, r4, #3
 800950c:	42a0      	cmp	r0, r4
 800950e:	d007      	beq.n	8009520 <sbrk_aligned+0x38>
 8009510:	1a21      	subs	r1, r4, r0
 8009512:	4628      	mov	r0, r5
 8009514:	f000 fb96 	bl	8009c44 <_sbrk_r>
 8009518:	3001      	adds	r0, #1
 800951a:	d101      	bne.n	8009520 <sbrk_aligned+0x38>
 800951c:	f04f 34ff 	mov.w	r4, #4294967295
 8009520:	4620      	mov	r0, r4
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	20001650 	.word	0x20001650

08009528 <_malloc_r>:
 8009528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800952c:	1ccd      	adds	r5, r1, #3
 800952e:	f025 0503 	bic.w	r5, r5, #3
 8009532:	3508      	adds	r5, #8
 8009534:	2d0c      	cmp	r5, #12
 8009536:	bf38      	it	cc
 8009538:	250c      	movcc	r5, #12
 800953a:	2d00      	cmp	r5, #0
 800953c:	4607      	mov	r7, r0
 800953e:	db01      	blt.n	8009544 <_malloc_r+0x1c>
 8009540:	42a9      	cmp	r1, r5
 8009542:	d905      	bls.n	8009550 <_malloc_r+0x28>
 8009544:	230c      	movs	r3, #12
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	2600      	movs	r6, #0
 800954a:	4630      	mov	r0, r6
 800954c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009550:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009624 <_malloc_r+0xfc>
 8009554:	f000 f868 	bl	8009628 <__malloc_lock>
 8009558:	f8d8 3000 	ldr.w	r3, [r8]
 800955c:	461c      	mov	r4, r3
 800955e:	bb5c      	cbnz	r4, 80095b8 <_malloc_r+0x90>
 8009560:	4629      	mov	r1, r5
 8009562:	4638      	mov	r0, r7
 8009564:	f7ff ffc0 	bl	80094e8 <sbrk_aligned>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	4604      	mov	r4, r0
 800956c:	d155      	bne.n	800961a <_malloc_r+0xf2>
 800956e:	f8d8 4000 	ldr.w	r4, [r8]
 8009572:	4626      	mov	r6, r4
 8009574:	2e00      	cmp	r6, #0
 8009576:	d145      	bne.n	8009604 <_malloc_r+0xdc>
 8009578:	2c00      	cmp	r4, #0
 800957a:	d048      	beq.n	800960e <_malloc_r+0xe6>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	4631      	mov	r1, r6
 8009580:	4638      	mov	r0, r7
 8009582:	eb04 0903 	add.w	r9, r4, r3
 8009586:	f000 fb5d 	bl	8009c44 <_sbrk_r>
 800958a:	4581      	cmp	r9, r0
 800958c:	d13f      	bne.n	800960e <_malloc_r+0xe6>
 800958e:	6821      	ldr	r1, [r4, #0]
 8009590:	1a6d      	subs	r5, r5, r1
 8009592:	4629      	mov	r1, r5
 8009594:	4638      	mov	r0, r7
 8009596:	f7ff ffa7 	bl	80094e8 <sbrk_aligned>
 800959a:	3001      	adds	r0, #1
 800959c:	d037      	beq.n	800960e <_malloc_r+0xe6>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	442b      	add	r3, r5
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	f8d8 3000 	ldr.w	r3, [r8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d038      	beq.n	800961e <_malloc_r+0xf6>
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	42a2      	cmp	r2, r4
 80095b0:	d12b      	bne.n	800960a <_malloc_r+0xe2>
 80095b2:	2200      	movs	r2, #0
 80095b4:	605a      	str	r2, [r3, #4]
 80095b6:	e00f      	b.n	80095d8 <_malloc_r+0xb0>
 80095b8:	6822      	ldr	r2, [r4, #0]
 80095ba:	1b52      	subs	r2, r2, r5
 80095bc:	d41f      	bmi.n	80095fe <_malloc_r+0xd6>
 80095be:	2a0b      	cmp	r2, #11
 80095c0:	d917      	bls.n	80095f2 <_malloc_r+0xca>
 80095c2:	1961      	adds	r1, r4, r5
 80095c4:	42a3      	cmp	r3, r4
 80095c6:	6025      	str	r5, [r4, #0]
 80095c8:	bf18      	it	ne
 80095ca:	6059      	strne	r1, [r3, #4]
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	bf08      	it	eq
 80095d0:	f8c8 1000 	streq.w	r1, [r8]
 80095d4:	5162      	str	r2, [r4, r5]
 80095d6:	604b      	str	r3, [r1, #4]
 80095d8:	4638      	mov	r0, r7
 80095da:	f104 060b 	add.w	r6, r4, #11
 80095de:	f000 f829 	bl	8009634 <__malloc_unlock>
 80095e2:	f026 0607 	bic.w	r6, r6, #7
 80095e6:	1d23      	adds	r3, r4, #4
 80095e8:	1af2      	subs	r2, r6, r3
 80095ea:	d0ae      	beq.n	800954a <_malloc_r+0x22>
 80095ec:	1b9b      	subs	r3, r3, r6
 80095ee:	50a3      	str	r3, [r4, r2]
 80095f0:	e7ab      	b.n	800954a <_malloc_r+0x22>
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	6862      	ldr	r2, [r4, #4]
 80095f6:	d1dd      	bne.n	80095b4 <_malloc_r+0x8c>
 80095f8:	f8c8 2000 	str.w	r2, [r8]
 80095fc:	e7ec      	b.n	80095d8 <_malloc_r+0xb0>
 80095fe:	4623      	mov	r3, r4
 8009600:	6864      	ldr	r4, [r4, #4]
 8009602:	e7ac      	b.n	800955e <_malloc_r+0x36>
 8009604:	4634      	mov	r4, r6
 8009606:	6876      	ldr	r6, [r6, #4]
 8009608:	e7b4      	b.n	8009574 <_malloc_r+0x4c>
 800960a:	4613      	mov	r3, r2
 800960c:	e7cc      	b.n	80095a8 <_malloc_r+0x80>
 800960e:	230c      	movs	r3, #12
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4638      	mov	r0, r7
 8009614:	f000 f80e 	bl	8009634 <__malloc_unlock>
 8009618:	e797      	b.n	800954a <_malloc_r+0x22>
 800961a:	6025      	str	r5, [r4, #0]
 800961c:	e7dc      	b.n	80095d8 <_malloc_r+0xb0>
 800961e:	605b      	str	r3, [r3, #4]
 8009620:	deff      	udf	#255	; 0xff
 8009622:	bf00      	nop
 8009624:	2000164c 	.word	0x2000164c

08009628 <__malloc_lock>:
 8009628:	4801      	ldr	r0, [pc, #4]	; (8009630 <__malloc_lock+0x8>)
 800962a:	f7ff bf01 	b.w	8009430 <__retarget_lock_acquire_recursive>
 800962e:	bf00      	nop
 8009630:	20001648 	.word	0x20001648

08009634 <__malloc_unlock>:
 8009634:	4801      	ldr	r0, [pc, #4]	; (800963c <__malloc_unlock+0x8>)
 8009636:	f7ff befc 	b.w	8009432 <__retarget_lock_release_recursive>
 800963a:	bf00      	nop
 800963c:	20001648 	.word	0x20001648

08009640 <__ssputs_r>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	688e      	ldr	r6, [r1, #8]
 8009646:	461f      	mov	r7, r3
 8009648:	42be      	cmp	r6, r7
 800964a:	680b      	ldr	r3, [r1, #0]
 800964c:	4682      	mov	sl, r0
 800964e:	460c      	mov	r4, r1
 8009650:	4690      	mov	r8, r2
 8009652:	d82c      	bhi.n	80096ae <__ssputs_r+0x6e>
 8009654:	898a      	ldrh	r2, [r1, #12]
 8009656:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800965a:	d026      	beq.n	80096aa <__ssputs_r+0x6a>
 800965c:	6965      	ldr	r5, [r4, #20]
 800965e:	6909      	ldr	r1, [r1, #16]
 8009660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009664:	eba3 0901 	sub.w	r9, r3, r1
 8009668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966c:	1c7b      	adds	r3, r7, #1
 800966e:	444b      	add	r3, r9
 8009670:	106d      	asrs	r5, r5, #1
 8009672:	429d      	cmp	r5, r3
 8009674:	bf38      	it	cc
 8009676:	461d      	movcc	r5, r3
 8009678:	0553      	lsls	r3, r2, #21
 800967a:	d527      	bpl.n	80096cc <__ssputs_r+0x8c>
 800967c:	4629      	mov	r1, r5
 800967e:	f7ff ff53 	bl	8009528 <_malloc_r>
 8009682:	4606      	mov	r6, r0
 8009684:	b360      	cbz	r0, 80096e0 <__ssputs_r+0xa0>
 8009686:	6921      	ldr	r1, [r4, #16]
 8009688:	464a      	mov	r2, r9
 800968a:	f7ff fed3 	bl	8009434 <memcpy>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	6126      	str	r6, [r4, #16]
 800969c:	6165      	str	r5, [r4, #20]
 800969e:	444e      	add	r6, r9
 80096a0:	eba5 0509 	sub.w	r5, r5, r9
 80096a4:	6026      	str	r6, [r4, #0]
 80096a6:	60a5      	str	r5, [r4, #8]
 80096a8:	463e      	mov	r6, r7
 80096aa:	42be      	cmp	r6, r7
 80096ac:	d900      	bls.n	80096b0 <__ssputs_r+0x70>
 80096ae:	463e      	mov	r6, r7
 80096b0:	6820      	ldr	r0, [r4, #0]
 80096b2:	4632      	mov	r2, r6
 80096b4:	4641      	mov	r1, r8
 80096b6:	f000 faab 	bl	8009c10 <memmove>
 80096ba:	68a3      	ldr	r3, [r4, #8]
 80096bc:	1b9b      	subs	r3, r3, r6
 80096be:	60a3      	str	r3, [r4, #8]
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	4433      	add	r3, r6
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	2000      	movs	r0, #0
 80096c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096cc:	462a      	mov	r2, r5
 80096ce:	f000 fac9 	bl	8009c64 <_realloc_r>
 80096d2:	4606      	mov	r6, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1e0      	bne.n	800969a <__ssputs_r+0x5a>
 80096d8:	6921      	ldr	r1, [r4, #16]
 80096da:	4650      	mov	r0, sl
 80096dc:	f7ff feb8 	bl	8009450 <_free_r>
 80096e0:	230c      	movs	r3, #12
 80096e2:	f8ca 3000 	str.w	r3, [sl]
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ec:	81a3      	strh	r3, [r4, #12]
 80096ee:	f04f 30ff 	mov.w	r0, #4294967295
 80096f2:	e7e9      	b.n	80096c8 <__ssputs_r+0x88>

080096f4 <_svfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	4698      	mov	r8, r3
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	061b      	lsls	r3, r3, #24
 80096fe:	b09d      	sub	sp, #116	; 0x74
 8009700:	4607      	mov	r7, r0
 8009702:	460d      	mov	r5, r1
 8009704:	4614      	mov	r4, r2
 8009706:	d50e      	bpl.n	8009726 <_svfiprintf_r+0x32>
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	b963      	cbnz	r3, 8009726 <_svfiprintf_r+0x32>
 800970c:	2140      	movs	r1, #64	; 0x40
 800970e:	f7ff ff0b 	bl	8009528 <_malloc_r>
 8009712:	6028      	str	r0, [r5, #0]
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	b920      	cbnz	r0, 8009722 <_svfiprintf_r+0x2e>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e0d0      	b.n	80098c4 <_svfiprintf_r+0x1d0>
 8009722:	2340      	movs	r3, #64	; 0x40
 8009724:	616b      	str	r3, [r5, #20]
 8009726:	2300      	movs	r3, #0
 8009728:	9309      	str	r3, [sp, #36]	; 0x24
 800972a:	2320      	movs	r3, #32
 800972c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009730:	f8cd 800c 	str.w	r8, [sp, #12]
 8009734:	2330      	movs	r3, #48	; 0x30
 8009736:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098dc <_svfiprintf_r+0x1e8>
 800973a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800973e:	f04f 0901 	mov.w	r9, #1
 8009742:	4623      	mov	r3, r4
 8009744:	469a      	mov	sl, r3
 8009746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974a:	b10a      	cbz	r2, 8009750 <_svfiprintf_r+0x5c>
 800974c:	2a25      	cmp	r2, #37	; 0x25
 800974e:	d1f9      	bne.n	8009744 <_svfiprintf_r+0x50>
 8009750:	ebba 0b04 	subs.w	fp, sl, r4
 8009754:	d00b      	beq.n	800976e <_svfiprintf_r+0x7a>
 8009756:	465b      	mov	r3, fp
 8009758:	4622      	mov	r2, r4
 800975a:	4629      	mov	r1, r5
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ff6f 	bl	8009640 <__ssputs_r>
 8009762:	3001      	adds	r0, #1
 8009764:	f000 80a9 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 8009768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976a:	445a      	add	r2, fp
 800976c:	9209      	str	r2, [sp, #36]	; 0x24
 800976e:	f89a 3000 	ldrb.w	r3, [sl]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80a1 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 8009778:	2300      	movs	r3, #0
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009782:	f10a 0a01 	add.w	sl, sl, #1
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	9307      	str	r3, [sp, #28]
 800978a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978e:	931a      	str	r3, [sp, #104]	; 0x68
 8009790:	4654      	mov	r4, sl
 8009792:	2205      	movs	r2, #5
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4850      	ldr	r0, [pc, #320]	; (80098dc <_svfiprintf_r+0x1e8>)
 800979a:	f7f6 fd21 	bl	80001e0 <memchr>
 800979e:	9a04      	ldr	r2, [sp, #16]
 80097a0:	b9d8      	cbnz	r0, 80097da <_svfiprintf_r+0xe6>
 80097a2:	06d0      	lsls	r0, r2, #27
 80097a4:	bf44      	itt	mi
 80097a6:	2320      	movmi	r3, #32
 80097a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ac:	0711      	lsls	r1, r2, #28
 80097ae:	bf44      	itt	mi
 80097b0:	232b      	movmi	r3, #43	; 0x2b
 80097b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ba:	2b2a      	cmp	r3, #42	; 0x2a
 80097bc:	d015      	beq.n	80097ea <_svfiprintf_r+0xf6>
 80097be:	9a07      	ldr	r2, [sp, #28]
 80097c0:	4654      	mov	r4, sl
 80097c2:	2000      	movs	r0, #0
 80097c4:	f04f 0c0a 	mov.w	ip, #10
 80097c8:	4621      	mov	r1, r4
 80097ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ce:	3b30      	subs	r3, #48	; 0x30
 80097d0:	2b09      	cmp	r3, #9
 80097d2:	d94d      	bls.n	8009870 <_svfiprintf_r+0x17c>
 80097d4:	b1b0      	cbz	r0, 8009804 <_svfiprintf_r+0x110>
 80097d6:	9207      	str	r2, [sp, #28]
 80097d8:	e014      	b.n	8009804 <_svfiprintf_r+0x110>
 80097da:	eba0 0308 	sub.w	r3, r0, r8
 80097de:	fa09 f303 	lsl.w	r3, r9, r3
 80097e2:	4313      	orrs	r3, r2
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	46a2      	mov	sl, r4
 80097e8:	e7d2      	b.n	8009790 <_svfiprintf_r+0x9c>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	1d19      	adds	r1, r3, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	9103      	str	r1, [sp, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfbb      	ittet	lt
 80097f6:	425b      	neglt	r3, r3
 80097f8:	f042 0202 	orrlt.w	r2, r2, #2
 80097fc:	9307      	strge	r3, [sp, #28]
 80097fe:	9307      	strlt	r3, [sp, #28]
 8009800:	bfb8      	it	lt
 8009802:	9204      	strlt	r2, [sp, #16]
 8009804:	7823      	ldrb	r3, [r4, #0]
 8009806:	2b2e      	cmp	r3, #46	; 0x2e
 8009808:	d10c      	bne.n	8009824 <_svfiprintf_r+0x130>
 800980a:	7863      	ldrb	r3, [r4, #1]
 800980c:	2b2a      	cmp	r3, #42	; 0x2a
 800980e:	d134      	bne.n	800987a <_svfiprintf_r+0x186>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	1d1a      	adds	r2, r3, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	9203      	str	r2, [sp, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	bfb8      	it	lt
 800981c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009820:	3402      	adds	r4, #2
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098ec <_svfiprintf_r+0x1f8>
 8009828:	7821      	ldrb	r1, [r4, #0]
 800982a:	2203      	movs	r2, #3
 800982c:	4650      	mov	r0, sl
 800982e:	f7f6 fcd7 	bl	80001e0 <memchr>
 8009832:	b138      	cbz	r0, 8009844 <_svfiprintf_r+0x150>
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	eba0 000a 	sub.w	r0, r0, sl
 800983a:	2240      	movs	r2, #64	; 0x40
 800983c:	4082      	lsls	r2, r0
 800983e:	4313      	orrs	r3, r2
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	4825      	ldr	r0, [pc, #148]	; (80098e0 <_svfiprintf_r+0x1ec>)
 800984a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800984e:	2206      	movs	r2, #6
 8009850:	f7f6 fcc6 	bl	80001e0 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d038      	beq.n	80098ca <_svfiprintf_r+0x1d6>
 8009858:	4b22      	ldr	r3, [pc, #136]	; (80098e4 <_svfiprintf_r+0x1f0>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_svfiprintf_r+0x1b0>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	4433      	add	r3, r6
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	e768      	b.n	8009742 <_svfiprintf_r+0x4e>
 8009870:	fb0c 3202 	mla	r2, ip, r2, r3
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	e7a6      	b.n	80097c8 <_svfiprintf_r+0xd4>
 800987a:	2300      	movs	r3, #0
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4619      	mov	r1, r3
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	; 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_svfiprintf_r+0x1a6>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c6      	beq.n	8009824 <_svfiprintf_r+0x130>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c4      	b.n	8009824 <_svfiprintf_r+0x130>
 800989a:	fb0c 2101 	mla	r1, ip, r1, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f0      	b.n	8009886 <_svfiprintf_r+0x192>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b0f      	ldr	r3, [pc, #60]	; (80098e8 <_svfiprintf_r+0x1f4>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4638      	mov	r0, r7
 80098b0:	f3af 8000 	nop.w
 80098b4:	1c42      	adds	r2, r0, #1
 80098b6:	4606      	mov	r6, r0
 80098b8:	d1d6      	bne.n	8009868 <_svfiprintf_r+0x174>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	065b      	lsls	r3, r3, #25
 80098be:	f53f af2d 	bmi.w	800971c <_svfiprintf_r+0x28>
 80098c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c4:	b01d      	add	sp, #116	; 0x74
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	ab03      	add	r3, sp, #12
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	462a      	mov	r2, r5
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <_svfiprintf_r+0x1f4>)
 80098d2:	a904      	add	r1, sp, #16
 80098d4:	4638      	mov	r0, r7
 80098d6:	f000 f879 	bl	80099cc <_printf_i>
 80098da:	e7eb      	b.n	80098b4 <_svfiprintf_r+0x1c0>
 80098dc:	08009d78 	.word	0x08009d78
 80098e0:	08009d82 	.word	0x08009d82
 80098e4:	00000000 	.word	0x00000000
 80098e8:	08009641 	.word	0x08009641
 80098ec:	08009d7e 	.word	0x08009d7e

080098f0 <_printf_common>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	4616      	mov	r6, r2
 80098f6:	4699      	mov	r9, r3
 80098f8:	688a      	ldr	r2, [r1, #8]
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009900:	4293      	cmp	r3, r2
 8009902:	bfb8      	it	lt
 8009904:	4613      	movlt	r3, r2
 8009906:	6033      	str	r3, [r6, #0]
 8009908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800990c:	4607      	mov	r7, r0
 800990e:	460c      	mov	r4, r1
 8009910:	b10a      	cbz	r2, 8009916 <_printf_common+0x26>
 8009912:	3301      	adds	r3, #1
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	0699      	lsls	r1, r3, #26
 800991a:	bf42      	ittt	mi
 800991c:	6833      	ldrmi	r3, [r6, #0]
 800991e:	3302      	addmi	r3, #2
 8009920:	6033      	strmi	r3, [r6, #0]
 8009922:	6825      	ldr	r5, [r4, #0]
 8009924:	f015 0506 	ands.w	r5, r5, #6
 8009928:	d106      	bne.n	8009938 <_printf_common+0x48>
 800992a:	f104 0a19 	add.w	sl, r4, #25
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	6832      	ldr	r2, [r6, #0]
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	42ab      	cmp	r3, r5
 8009936:	dc26      	bgt.n	8009986 <_printf_common+0x96>
 8009938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800993c:	1e13      	subs	r3, r2, #0
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	bf18      	it	ne
 8009942:	2301      	movne	r3, #1
 8009944:	0692      	lsls	r2, r2, #26
 8009946:	d42b      	bmi.n	80099a0 <_printf_common+0xb0>
 8009948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800994c:	4649      	mov	r1, r9
 800994e:	4638      	mov	r0, r7
 8009950:	47c0      	blx	r8
 8009952:	3001      	adds	r0, #1
 8009954:	d01e      	beq.n	8009994 <_printf_common+0xa4>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	6922      	ldr	r2, [r4, #16]
 800995a:	f003 0306 	and.w	r3, r3, #6
 800995e:	2b04      	cmp	r3, #4
 8009960:	bf02      	ittt	eq
 8009962:	68e5      	ldreq	r5, [r4, #12]
 8009964:	6833      	ldreq	r3, [r6, #0]
 8009966:	1aed      	subeq	r5, r5, r3
 8009968:	68a3      	ldr	r3, [r4, #8]
 800996a:	bf0c      	ite	eq
 800996c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009970:	2500      	movne	r5, #0
 8009972:	4293      	cmp	r3, r2
 8009974:	bfc4      	itt	gt
 8009976:	1a9b      	subgt	r3, r3, r2
 8009978:	18ed      	addgt	r5, r5, r3
 800997a:	2600      	movs	r6, #0
 800997c:	341a      	adds	r4, #26
 800997e:	42b5      	cmp	r5, r6
 8009980:	d11a      	bne.n	80099b8 <_printf_common+0xc8>
 8009982:	2000      	movs	r0, #0
 8009984:	e008      	b.n	8009998 <_printf_common+0xa8>
 8009986:	2301      	movs	r3, #1
 8009988:	4652      	mov	r2, sl
 800998a:	4649      	mov	r1, r9
 800998c:	4638      	mov	r0, r7
 800998e:	47c0      	blx	r8
 8009990:	3001      	adds	r0, #1
 8009992:	d103      	bne.n	800999c <_printf_common+0xac>
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999c:	3501      	adds	r5, #1
 800999e:	e7c6      	b.n	800992e <_printf_common+0x3e>
 80099a0:	18e1      	adds	r1, r4, r3
 80099a2:	1c5a      	adds	r2, r3, #1
 80099a4:	2030      	movs	r0, #48	; 0x30
 80099a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099aa:	4422      	add	r2, r4
 80099ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099b4:	3302      	adds	r3, #2
 80099b6:	e7c7      	b.n	8009948 <_printf_common+0x58>
 80099b8:	2301      	movs	r3, #1
 80099ba:	4622      	mov	r2, r4
 80099bc:	4649      	mov	r1, r9
 80099be:	4638      	mov	r0, r7
 80099c0:	47c0      	blx	r8
 80099c2:	3001      	adds	r0, #1
 80099c4:	d0e6      	beq.n	8009994 <_printf_common+0xa4>
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7d9      	b.n	800997e <_printf_common+0x8e>
	...

080099cc <_printf_i>:
 80099cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	7e0f      	ldrb	r7, [r1, #24]
 80099d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099d4:	2f78      	cmp	r7, #120	; 0x78
 80099d6:	4691      	mov	r9, r2
 80099d8:	4680      	mov	r8, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	469a      	mov	sl, r3
 80099de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099e2:	d807      	bhi.n	80099f4 <_printf_i+0x28>
 80099e4:	2f62      	cmp	r7, #98	; 0x62
 80099e6:	d80a      	bhi.n	80099fe <_printf_i+0x32>
 80099e8:	2f00      	cmp	r7, #0
 80099ea:	f000 80d4 	beq.w	8009b96 <_printf_i+0x1ca>
 80099ee:	2f58      	cmp	r7, #88	; 0x58
 80099f0:	f000 80c0 	beq.w	8009b74 <_printf_i+0x1a8>
 80099f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099fc:	e03a      	b.n	8009a74 <_printf_i+0xa8>
 80099fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a02:	2b15      	cmp	r3, #21
 8009a04:	d8f6      	bhi.n	80099f4 <_printf_i+0x28>
 8009a06:	a101      	add	r1, pc, #4	; (adr r1, 8009a0c <_printf_i+0x40>)
 8009a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a0c:	08009a65 	.word	0x08009a65
 8009a10:	08009a79 	.word	0x08009a79
 8009a14:	080099f5 	.word	0x080099f5
 8009a18:	080099f5 	.word	0x080099f5
 8009a1c:	080099f5 	.word	0x080099f5
 8009a20:	080099f5 	.word	0x080099f5
 8009a24:	08009a79 	.word	0x08009a79
 8009a28:	080099f5 	.word	0x080099f5
 8009a2c:	080099f5 	.word	0x080099f5
 8009a30:	080099f5 	.word	0x080099f5
 8009a34:	080099f5 	.word	0x080099f5
 8009a38:	08009b7d 	.word	0x08009b7d
 8009a3c:	08009aa5 	.word	0x08009aa5
 8009a40:	08009b37 	.word	0x08009b37
 8009a44:	080099f5 	.word	0x080099f5
 8009a48:	080099f5 	.word	0x080099f5
 8009a4c:	08009b9f 	.word	0x08009b9f
 8009a50:	080099f5 	.word	0x080099f5
 8009a54:	08009aa5 	.word	0x08009aa5
 8009a58:	080099f5 	.word	0x080099f5
 8009a5c:	080099f5 	.word	0x080099f5
 8009a60:	08009b3f 	.word	0x08009b3f
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	1d1a      	adds	r2, r3, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	602a      	str	r2, [r5, #0]
 8009a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a74:	2301      	movs	r3, #1
 8009a76:	e09f      	b.n	8009bb8 <_printf_i+0x1ec>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	682b      	ldr	r3, [r5, #0]
 8009a7c:	0607      	lsls	r7, r0, #24
 8009a7e:	f103 0104 	add.w	r1, r3, #4
 8009a82:	6029      	str	r1, [r5, #0]
 8009a84:	d501      	bpl.n	8009a8a <_printf_i+0xbe>
 8009a86:	681e      	ldr	r6, [r3, #0]
 8009a88:	e003      	b.n	8009a92 <_printf_i+0xc6>
 8009a8a:	0646      	lsls	r6, r0, #25
 8009a8c:	d5fb      	bpl.n	8009a86 <_printf_i+0xba>
 8009a8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	da03      	bge.n	8009a9e <_printf_i+0xd2>
 8009a96:	232d      	movs	r3, #45	; 0x2d
 8009a98:	4276      	negs	r6, r6
 8009a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a9e:	485a      	ldr	r0, [pc, #360]	; (8009c08 <_printf_i+0x23c>)
 8009aa0:	230a      	movs	r3, #10
 8009aa2:	e012      	b.n	8009aca <_printf_i+0xfe>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	6820      	ldr	r0, [r4, #0]
 8009aa8:	1d19      	adds	r1, r3, #4
 8009aaa:	6029      	str	r1, [r5, #0]
 8009aac:	0605      	lsls	r5, r0, #24
 8009aae:	d501      	bpl.n	8009ab4 <_printf_i+0xe8>
 8009ab0:	681e      	ldr	r6, [r3, #0]
 8009ab2:	e002      	b.n	8009aba <_printf_i+0xee>
 8009ab4:	0641      	lsls	r1, r0, #25
 8009ab6:	d5fb      	bpl.n	8009ab0 <_printf_i+0xe4>
 8009ab8:	881e      	ldrh	r6, [r3, #0]
 8009aba:	4853      	ldr	r0, [pc, #332]	; (8009c08 <_printf_i+0x23c>)
 8009abc:	2f6f      	cmp	r7, #111	; 0x6f
 8009abe:	bf0c      	ite	eq
 8009ac0:	2308      	moveq	r3, #8
 8009ac2:	230a      	movne	r3, #10
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aca:	6865      	ldr	r5, [r4, #4]
 8009acc:	60a5      	str	r5, [r4, #8]
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	bfa2      	ittt	ge
 8009ad2:	6821      	ldrge	r1, [r4, #0]
 8009ad4:	f021 0104 	bicge.w	r1, r1, #4
 8009ad8:	6021      	strge	r1, [r4, #0]
 8009ada:	b90e      	cbnz	r6, 8009ae0 <_printf_i+0x114>
 8009adc:	2d00      	cmp	r5, #0
 8009ade:	d04b      	beq.n	8009b78 <_printf_i+0x1ac>
 8009ae0:	4615      	mov	r5, r2
 8009ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8009aea:	5dc7      	ldrb	r7, [r0, r7]
 8009aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009af0:	4637      	mov	r7, r6
 8009af2:	42bb      	cmp	r3, r7
 8009af4:	460e      	mov	r6, r1
 8009af6:	d9f4      	bls.n	8009ae2 <_printf_i+0x116>
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d10b      	bne.n	8009b14 <_printf_i+0x148>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	07de      	lsls	r6, r3, #31
 8009b00:	d508      	bpl.n	8009b14 <_printf_i+0x148>
 8009b02:	6923      	ldr	r3, [r4, #16]
 8009b04:	6861      	ldr	r1, [r4, #4]
 8009b06:	4299      	cmp	r1, r3
 8009b08:	bfde      	ittt	le
 8009b0a:	2330      	movle	r3, #48	; 0x30
 8009b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b14:	1b52      	subs	r2, r2, r5
 8009b16:	6122      	str	r2, [r4, #16]
 8009b18:	f8cd a000 	str.w	sl, [sp]
 8009b1c:	464b      	mov	r3, r9
 8009b1e:	aa03      	add	r2, sp, #12
 8009b20:	4621      	mov	r1, r4
 8009b22:	4640      	mov	r0, r8
 8009b24:	f7ff fee4 	bl	80098f0 <_printf_common>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d14a      	bne.n	8009bc2 <_printf_i+0x1f6>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	b004      	add	sp, #16
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f043 0320 	orr.w	r3, r3, #32
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	4833      	ldr	r0, [pc, #204]	; (8009c0c <_printf_i+0x240>)
 8009b40:	2778      	movs	r7, #120	; 0x78
 8009b42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	6829      	ldr	r1, [r5, #0]
 8009b4a:	061f      	lsls	r7, r3, #24
 8009b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b50:	d402      	bmi.n	8009b58 <_printf_i+0x18c>
 8009b52:	065f      	lsls	r7, r3, #25
 8009b54:	bf48      	it	mi
 8009b56:	b2b6      	uxthmi	r6, r6
 8009b58:	07df      	lsls	r7, r3, #31
 8009b5a:	bf48      	it	mi
 8009b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8009b60:	6029      	str	r1, [r5, #0]
 8009b62:	bf48      	it	mi
 8009b64:	6023      	strmi	r3, [r4, #0]
 8009b66:	b91e      	cbnz	r6, 8009b70 <_printf_i+0x1a4>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	f023 0320 	bic.w	r3, r3, #32
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	2310      	movs	r3, #16
 8009b72:	e7a7      	b.n	8009ac4 <_printf_i+0xf8>
 8009b74:	4824      	ldr	r0, [pc, #144]	; (8009c08 <_printf_i+0x23c>)
 8009b76:	e7e4      	b.n	8009b42 <_printf_i+0x176>
 8009b78:	4615      	mov	r5, r2
 8009b7a:	e7bd      	b.n	8009af8 <_printf_i+0x12c>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	6826      	ldr	r6, [r4, #0]
 8009b80:	6961      	ldr	r1, [r4, #20]
 8009b82:	1d18      	adds	r0, r3, #4
 8009b84:	6028      	str	r0, [r5, #0]
 8009b86:	0635      	lsls	r5, r6, #24
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	d501      	bpl.n	8009b90 <_printf_i+0x1c4>
 8009b8c:	6019      	str	r1, [r3, #0]
 8009b8e:	e002      	b.n	8009b96 <_printf_i+0x1ca>
 8009b90:	0670      	lsls	r0, r6, #25
 8009b92:	d5fb      	bpl.n	8009b8c <_printf_i+0x1c0>
 8009b94:	8019      	strh	r1, [r3, #0]
 8009b96:	2300      	movs	r3, #0
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	4615      	mov	r5, r2
 8009b9c:	e7bc      	b.n	8009b18 <_printf_i+0x14c>
 8009b9e:	682b      	ldr	r3, [r5, #0]
 8009ba0:	1d1a      	adds	r2, r3, #4
 8009ba2:	602a      	str	r2, [r5, #0]
 8009ba4:	681d      	ldr	r5, [r3, #0]
 8009ba6:	6862      	ldr	r2, [r4, #4]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4628      	mov	r0, r5
 8009bac:	f7f6 fb18 	bl	80001e0 <memchr>
 8009bb0:	b108      	cbz	r0, 8009bb6 <_printf_i+0x1ea>
 8009bb2:	1b40      	subs	r0, r0, r5
 8009bb4:	6060      	str	r0, [r4, #4]
 8009bb6:	6863      	ldr	r3, [r4, #4]
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bc0:	e7aa      	b.n	8009b18 <_printf_i+0x14c>
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	462a      	mov	r2, r5
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	4640      	mov	r0, r8
 8009bca:	47d0      	blx	sl
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d0ad      	beq.n	8009b2c <_printf_i+0x160>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	079b      	lsls	r3, r3, #30
 8009bd4:	d413      	bmi.n	8009bfe <_printf_i+0x232>
 8009bd6:	68e0      	ldr	r0, [r4, #12]
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	4298      	cmp	r0, r3
 8009bdc:	bfb8      	it	lt
 8009bde:	4618      	movlt	r0, r3
 8009be0:	e7a6      	b.n	8009b30 <_printf_i+0x164>
 8009be2:	2301      	movs	r3, #1
 8009be4:	4632      	mov	r2, r6
 8009be6:	4649      	mov	r1, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	47d0      	blx	sl
 8009bec:	3001      	adds	r0, #1
 8009bee:	d09d      	beq.n	8009b2c <_printf_i+0x160>
 8009bf0:	3501      	adds	r5, #1
 8009bf2:	68e3      	ldr	r3, [r4, #12]
 8009bf4:	9903      	ldr	r1, [sp, #12]
 8009bf6:	1a5b      	subs	r3, r3, r1
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	dcf2      	bgt.n	8009be2 <_printf_i+0x216>
 8009bfc:	e7eb      	b.n	8009bd6 <_printf_i+0x20a>
 8009bfe:	2500      	movs	r5, #0
 8009c00:	f104 0619 	add.w	r6, r4, #25
 8009c04:	e7f5      	b.n	8009bf2 <_printf_i+0x226>
 8009c06:	bf00      	nop
 8009c08:	08009d89 	.word	0x08009d89
 8009c0c:	08009d9a 	.word	0x08009d9a

08009c10 <memmove>:
 8009c10:	4288      	cmp	r0, r1
 8009c12:	b510      	push	{r4, lr}
 8009c14:	eb01 0402 	add.w	r4, r1, r2
 8009c18:	d902      	bls.n	8009c20 <memmove+0x10>
 8009c1a:	4284      	cmp	r4, r0
 8009c1c:	4623      	mov	r3, r4
 8009c1e:	d807      	bhi.n	8009c30 <memmove+0x20>
 8009c20:	1e43      	subs	r3, r0, #1
 8009c22:	42a1      	cmp	r1, r4
 8009c24:	d008      	beq.n	8009c38 <memmove+0x28>
 8009c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c2e:	e7f8      	b.n	8009c22 <memmove+0x12>
 8009c30:	4402      	add	r2, r0
 8009c32:	4601      	mov	r1, r0
 8009c34:	428a      	cmp	r2, r1
 8009c36:	d100      	bne.n	8009c3a <memmove+0x2a>
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c42:	e7f7      	b.n	8009c34 <memmove+0x24>

08009c44 <_sbrk_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d06      	ldr	r5, [pc, #24]	; (8009c60 <_sbrk_r+0x1c>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	f7f6 fe16 	bl	8000880 <_sbrk>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_sbrk_r+0x1a>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_sbrk_r+0x1a>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	20001644 	.word	0x20001644

08009c64 <_realloc_r>:
 8009c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4614      	mov	r4, r2
 8009c6c:	460e      	mov	r6, r1
 8009c6e:	b921      	cbnz	r1, 8009c7a <_realloc_r+0x16>
 8009c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	4611      	mov	r1, r2
 8009c76:	f7ff bc57 	b.w	8009528 <_malloc_r>
 8009c7a:	b92a      	cbnz	r2, 8009c88 <_realloc_r+0x24>
 8009c7c:	f7ff fbe8 	bl	8009450 <_free_r>
 8009c80:	4625      	mov	r5, r4
 8009c82:	4628      	mov	r0, r5
 8009c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c88:	f000 f81b 	bl	8009cc2 <_malloc_usable_size_r>
 8009c8c:	4284      	cmp	r4, r0
 8009c8e:	4607      	mov	r7, r0
 8009c90:	d802      	bhi.n	8009c98 <_realloc_r+0x34>
 8009c92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c96:	d812      	bhi.n	8009cbe <_realloc_r+0x5a>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	f7ff fc44 	bl	8009528 <_malloc_r>
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d0ed      	beq.n	8009c82 <_realloc_r+0x1e>
 8009ca6:	42bc      	cmp	r4, r7
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4631      	mov	r1, r6
 8009cac:	bf28      	it	cs
 8009cae:	463a      	movcs	r2, r7
 8009cb0:	f7ff fbc0 	bl	8009434 <memcpy>
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	f7ff fbca 	bl	8009450 <_free_r>
 8009cbc:	e7e1      	b.n	8009c82 <_realloc_r+0x1e>
 8009cbe:	4635      	mov	r5, r6
 8009cc0:	e7df      	b.n	8009c82 <_realloc_r+0x1e>

08009cc2 <_malloc_usable_size_r>:
 8009cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc6:	1f18      	subs	r0, r3, #4
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bfbc      	itt	lt
 8009ccc:	580b      	ldrlt	r3, [r1, r0]
 8009cce:	18c0      	addlt	r0, r0, r3
 8009cd0:	4770      	bx	lr
	...

08009cd4 <_init>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr

08009ce0 <_fini>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr
