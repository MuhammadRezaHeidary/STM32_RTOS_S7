
RTOS_S7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800c690  0800c690  0001c690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c79c  0800c79c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c79c  0800c79c  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c79c  0800c79c  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c79c  0800c79c  0001c79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c7a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00002a60  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c30  20002c30  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e530  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cdb  00000000  00000000  0003e773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b0  00000000  00000000  00043450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013b4  00000000  00000000  00044e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002300b  00000000  00000000  000461b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000229c6  00000000  00000000  000691bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c346e  00000000  00000000  0008bb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006f7c  00000000  00000000  0014eff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00155f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c678 	.word	0x0800c678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	0800c678 	.word	0x0800c678

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	200001ec 	.word	0x200001ec
 80002b0:	2000028c 	.word	0x2000028c

080002b4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80002c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <vApplicationGetTimerTaskMemory+0x30>)
 80002ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	2000048c 	.word	0x2000048c
 80002e4:	2000052c 	.word	0x2000052c

080002e8 <Start_USB_Task>:
//void OT_Callback(void const * argument);
/* USER CODE BEGIN PFP */


void Start_USB_Task(void * argument)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b093      	sub	sp, #76	; 0x4c
 80002ec:	af02      	add	r7, sp, #8
 80002ee:	6078      	str	r0, [r7, #4]
  MX_USB_DEVICE_Init();
 80002f0:	f00a ffd4 	bl	800b29c <MX_USB_DEVICE_Init>
  xTimerStart(PTHandle, 0);
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <Start_USB_Task+0x64>)
 80002f6:	681c      	ldr	r4, [r3, #0]
 80002f8:	f009 fc0c 	bl	8009b14 <xTaskGetTickCount>
 80002fc:	4602      	mov	r2, r0
 80002fe:	2300      	movs	r3, #0
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	2101      	movs	r1, #1
 8000306:	4620      	mov	r0, r4
 8000308:	f00a f8f0 	bl	800a4ec <xTimerGenericCommand>
  while(1)
  {
	  uint8_t data[50];
	  sprintf((char *) data, "Counter = %d\r\n", count);
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <Start_USB_Task+0x68>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	f107 030c 	add.w	r3, r7, #12
 8000314:	490f      	ldr	r1, [pc, #60]	; (8000354 <Start_USB_Task+0x6c>)
 8000316:	4618      	mov	r0, r3
 8000318:	f00b fcb4 	bl	800bc84 <siprintf>
	  CDC_Transmit_FS((uint8_t *) data, strlen((char *)data));
 800031c:	f107 030c 	add.w	r3, r7, #12
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff55 	bl	80001d0 <strlen>
 8000326:	4603      	mov	r3, r0
 8000328:	b29a      	uxth	r2, r3
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	4611      	mov	r1, r2
 8000330:	4618      	mov	r0, r3
 8000332:	f00b f89b 	bl	800b46c <CDC_Transmit_FS>
	  count++;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <Start_USB_Task+0x68>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <Start_USB_Task+0x68>)
 800033e:	6013      	str	r3, [r2, #0]
	  vTaskDelay(pdMS_TO_TICKS(2000));
 8000340:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000344:	f009 fa98 	bl	8009878 <vTaskDelay>
  {
 8000348:	e7e0      	b.n	800030c <Start_USB_Task+0x24>
 800034a:	bf00      	nop
 800034c:	20000a28 	.word	0x20000a28
 8000350:	200009e4 	.word	0x200009e4
 8000354:	0800c690 	.word	0x0800c690

08000358 <Start_LED_Task>:
  }
}

void Start_LED_Task(void * argument)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b085      	sub	sp, #20
 800035c:	af02      	add	r7, sp, #8
 800035e:	6078      	str	r0, [r7, #4]
	while(1) {
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 8000360:	2101      	movs	r1, #1
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f000 fe71 	bl	800104c <HAL_GPIO_ReadPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d011      	beq.n	8000394 <Start_LED_Task+0x3c>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <Start_LED_Task+0x50>)
 8000378:	f000 fe80 	bl	800107c <HAL_GPIO_WritePin>
			xTimerStart(OTHandle, 0);
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <Start_LED_Task+0x54>)
 800037e:	681c      	ldr	r4, [r3, #0]
 8000380:	f009 fbc8 	bl	8009b14 <xTaskGetTickCount>
 8000384:	4602      	mov	r2, r0
 8000386:	2300      	movs	r3, #0
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	2300      	movs	r3, #0
 800038c:	2101      	movs	r1, #1
 800038e:	4620      	mov	r0, r4
 8000390:	f00a f8ac 	bl	800a4ec <xTimerGenericCommand>
		}
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <Start_LED_Task+0x50>)
 800039a:	f000 fe87 	bl	80010ac <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(20));
 800039e:	2014      	movs	r0, #20
 80003a0:	f009 fa6a 	bl	8009878 <vTaskDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 80003a4:	e7dc      	b.n	8000360 <Start_LED_Task+0x8>
 80003a6:	bf00      	nop
 80003a8:	48001000 	.word	0x48001000
 80003ac:	20000a2c 	.word	0x20000a2c

080003b0 <Timer_Callback>:
	}
}

void Timer_Callback(xTimerHandle xtimer) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b090      	sub	sp, #64	; 0x40
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	if(xtimer == OTHandle) {
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <Timer_Callback+0x64>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d106      	bne.n	80003d0 <Timer_Callback+0x20>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c8:	4813      	ldr	r0, [pc, #76]	; (8000418 <Timer_Callback+0x68>)
 80003ca:	f000 fe57 	bl	800107c <HAL_GPIO_WritePin>
		sprintf((char *) data, "Periodic Timer\r\n");
		CDC_Transmit_FS((uint8_t *) data, strlen((char *)data));
		HAL_GPIO_TogglePin(LD9_GPIO_Port, LD9_Pin);
	}

}
 80003ce:	e01c      	b.n	800040a <Timer_Callback+0x5a>
	else if(xtimer == PTHandle) {
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <Timer_Callback+0x6c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	d117      	bne.n	800040a <Timer_Callback+0x5a>
		sprintf((char *) data, "Periodic Timer\r\n");
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	4910      	ldr	r1, [pc, #64]	; (8000420 <Timer_Callback+0x70>)
 80003e0:	4618      	mov	r0, r3
 80003e2:	f00b fc4f 	bl	800bc84 <siprintf>
		CDC_Transmit_FS((uint8_t *) data, strlen((char *)data));
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff fef0 	bl	80001d0 <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4611      	mov	r1, r2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f00b f836 	bl	800b46c <CDC_Transmit_FS>
		HAL_GPIO_TogglePin(LD9_GPIO_Port, LD9_Pin);
 8000400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <Timer_Callback+0x68>)
 8000406:	f000 fe51 	bl	80010ac <HAL_GPIO_TogglePin>
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000a2c 	.word	0x20000a2c
 8000418:	48001000 	.word	0x48001000
 800041c:	20000a28 	.word	0x20000a28
 8000420:	0800c6a0 	.word	0x0800c6a0

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042a:	f000 fb7d 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042e:	f000 f84b 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000432:	f000 f929 	bl	8000688 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000436:	f000 f8a9 	bl	800058c <MX_I2C1_Init>
  MX_SPI1_Init();
 800043a:	f000 f8e7 	bl	800060c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Create Timers
  PTHandle = xTimerCreate("PT_timer1", pdMS_TO_TICKS(1000), pdTRUE, (void *) 1, Timer_Callback);
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <main+0x78>)
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2301      	movs	r3, #1
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800044a:	4815      	ldr	r0, [pc, #84]	; (80004a0 <main+0x7c>)
 800044c:	f009 fffa 	bl	800a444 <xTimerCreate>
 8000450:	4603      	mov	r3, r0
 8000452:	4a14      	ldr	r2, [pc, #80]	; (80004a4 <main+0x80>)
 8000454:	6013      	str	r3, [r2, #0]
  OTHandle = xTimerCreate("OT_timer2", pdMS_TO_TICKS(4000), pdFALSE, (void *) 2, Timer_Callback);
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <main+0x78>)
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2302      	movs	r3, #2
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <main+0x84>)
 8000464:	f009 ffee 	bl	800a444 <xTimerCreate>
 8000468:	4603      	mov	r3, r0
 800046a:	4a10      	ldr	r2, [pc, #64]	; (80004ac <main+0x88>)
 800046c:	6013      	str	r3, [r2, #0]

  // Create Tasks
  xTaskCreate(Start_USB_Task, "USB", 128, NULL, 1, &USB_Handle);
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <main+0x8c>)
 8000470:	9301      	str	r3, [sp, #4]
 8000472:	2301      	movs	r3, #1
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2300      	movs	r3, #0
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	490e      	ldr	r1, [pc, #56]	; (80004b4 <main+0x90>)
 800047c:	480e      	ldr	r0, [pc, #56]	; (80004b8 <main+0x94>)
 800047e:	f009 f8b5 	bl	80095ec <xTaskCreate>
  xTaskCreate(Start_LED_Task, "LED", 128, NULL, 1, &LED_Handle);
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <main+0x98>)
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	2301      	movs	r3, #1
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2300      	movs	r3, #0
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	490c      	ldr	r1, [pc, #48]	; (80004c0 <main+0x9c>)
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <main+0xa0>)
 8000492:	f009 f8ab 	bl	80095ec <xTaskCreate>

  // Start Scheduler
  vTaskStartScheduler();
 8000496:	f009 fa23 	bl	80098e0 <vTaskStartScheduler>
 * ***************************************************
 */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049a:	e7fe      	b.n	800049a <main+0x76>
 800049c:	080003b1 	.word	0x080003b1
 80004a0:	0800c6b4 	.word	0x0800c6b4
 80004a4:	20000a28 	.word	0x20000a28
 80004a8:	0800c6c0 	.word	0x0800c6c0
 80004ac:	20000a2c 	.word	0x20000a2c
 80004b0:	20000a30 	.word	0x20000a30
 80004b4:	0800c6cc 	.word	0x0800c6cc
 80004b8:	080002e9 	.word	0x080002e9
 80004bc:	20000a34 	.word	0x20000a34
 80004c0:	0800c6d0 	.word	0x0800c6d0
 80004c4:	08000359 	.word	0x08000359

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09e      	sub	sp, #120	; 0x78
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004d2:	2228      	movs	r2, #40	; 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f00b fbf4 	bl	800bcc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	223c      	movs	r2, #60	; 0x3c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f00b fbe6 	bl	800bcc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004f8:	2303      	movs	r3, #3
 80004fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000500:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000506:	2301      	movs	r3, #1
 8000508:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050a:	2310      	movs	r3, #16
 800050c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	2302      	movs	r3, #2
 8000510:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000516:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000518:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800051c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fbdc 	bl	8002ce0 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800052e:	f000 f93b 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2302      	movs	r3, #2
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fc04 	bl	8003d5c <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800055a:	f000 f925 	bl	80007a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <SystemClock_Config+0xc0>)
 8000560:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fe3a 	bl	80041e8 <HAL_RCCEx_PeriphCLKConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800057a:	f000 f915 	bl	80007a8 <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3778      	adds	r7, #120	; 0x78
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	00020020 	.word	0x00020020

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_I2C1_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_I2C1_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_I2C1_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_I2C1_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_I2C1_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c8:	f000 fd8a 	bl	80010e0 <HAL_I2C_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 f8e9 	bl	80007a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <MX_I2C1_Init+0x74>)
 80005da:	f000 fe10 	bl	80011fe <HAL_I2CEx_ConfigAnalogFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 f8e0 	bl	80007a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_I2C1_Init+0x74>)
 80005ec:	f000 fe52 	bl	8001294 <HAL_I2CEx_ConfigDigitalFilter>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 f8d7 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000092c 	.word	0x2000092c
 8000604:	40005400 	.word	0x40005400
 8000608:	2000090e 	.word	0x2000090e

0800060c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_SPI1_Init+0x74>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <MX_SPI1_Init+0x78>)
 8000614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_SPI1_Init+0x74>)
 8000618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800061c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_SPI1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_SPI1_Init+0x74>)
 8000626:	f44f 7240 	mov.w	r2, #768	; 0x300
 800062a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_SPI1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_SPI1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_SPI1_Init+0x74>)
 800063a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_SPI1_Init+0x74>)
 8000642:	2208      	movs	r2, #8
 8000644:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_SPI1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_SPI1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SPI1_Init+0x74>)
 800065a:	2207      	movs	r2, #7
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_SPI1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SPI1_Init+0x74>)
 8000666:	2208      	movs	r2, #8
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_SPI1_Init+0x74>)
 800066c:	f003 ff6c 	bl	8004548 <HAL_SPI_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 f897 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000980 	.word	0x20000980
 8000684:	40013000 	.word	0x40013000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <MX_GPIO_Init+0xf4>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a36      	ldr	r2, [pc, #216]	; (800077c <MX_GPIO_Init+0xf4>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b34      	ldr	r3, [pc, #208]	; (800077c <MX_GPIO_Init+0xf4>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b31      	ldr	r3, [pc, #196]	; (800077c <MX_GPIO_Init+0xf4>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a30      	ldr	r2, [pc, #192]	; (800077c <MX_GPIO_Init+0xf4>)
 80006bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <MX_GPIO_Init+0xf4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_GPIO_Init+0xf4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a2a      	ldr	r2, [pc, #168]	; (800077c <MX_GPIO_Init+0xf4>)
 80006d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b28      	ldr	r3, [pc, #160]	; (800077c <MX_GPIO_Init+0xf4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_GPIO_Init+0xf4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <MX_GPIO_Init+0xf4>)
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_GPIO_Init+0xf4>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_GPIO_Init+0xf4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a1e      	ldr	r2, [pc, #120]	; (800077c <MX_GPIO_Init+0xf4>)
 8000704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_GPIO_Init+0xf4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000716:	2200      	movs	r2, #0
 8000718:	f64f 7108 	movw	r1, #65288	; 0xff08
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <MX_GPIO_Init+0xf8>)
 800071e:	f000 fcad 	bl	800107c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000722:	2337      	movs	r3, #55	; 0x37
 8000724:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000726:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4812      	ldr	r0, [pc, #72]	; (8000780 <MX_GPIO_Init+0xf8>)
 8000738:	f000 fb0e 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800073c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000740:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <MX_GPIO_Init+0xf8>)
 8000756:	f000 faff 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	2301      	movs	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f000 faf2 	bl	8000d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	48001000 	.word	0x48001000

08000784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d101      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000796:	f000 f9dd 	bl	8000b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_MspInit+0x4c>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_MspInit+0x4c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_MspInit+0x4c>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	61d3      	str	r3, [r2, #28]
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210f      	movs	r1, #15
 80007ee:	f06f 0001 	mvn.w	r0, #1
 80007f2:	f000 fa87 	bl	8000d04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a17      	ldr	r2, [pc, #92]	; (8000880 <HAL_I2C_MspInit+0x7c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d127      	bne.n	8000876 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_I2C_MspInit+0x80>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <HAL_I2C_MspInit+0x80>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_I2C_MspInit+0x80>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800083e:	23c0      	movs	r3, #192	; 0xc0
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	2312      	movs	r3, #18
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000846:	2301      	movs	r3, #1
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084e:	2304      	movs	r3, #4
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <HAL_I2C_MspInit+0x84>)
 800085a:	f000 fa7d 	bl	8000d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_I2C_MspInit+0x80>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_I2C_MspInit+0x80>)
 8000864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_I2C_MspInit+0x80>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40005400 	.word	0x40005400
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400

0800088c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_SPI_MspInit+0x7c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d128      	bne.n	8000900 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_SPI_MspInit+0x80>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <HAL_SPI_MspInit+0x80>)
 80008b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_SPI_MspInit+0x80>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_SPI_MspInit+0x80>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_SPI_MspInit+0x80>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	6153      	str	r3, [r2, #20]
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_SPI_MspInit+0x80>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008de:	23e0      	movs	r3, #224	; 0xe0
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ee:	2305      	movs	r3, #5
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 fa2c 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013000 	.word	0x40013000
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000920:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <HAL_InitTick+0xcc>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <HAL_InitTick+0xcc>)
 8000926:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <HAL_InitTick+0xcc>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000938:	f107 020c 	add.w	r2, r7, #12
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fc1e 	bl	8004184 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000948:	f003 fbfa 	bl	8004140 <HAL_RCC_GetPCLK2Freq>
 800094c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000950:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <HAL_InitTick+0xd0>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	0c9b      	lsrs	r3, r3, #18
 8000958:	3b01      	subs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_InitTick+0xd4>)
 800095e:	4a22      	ldr	r2, [pc, #136]	; (80009e8 <HAL_InitTick+0xd8>)
 8000960:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_InitTick+0xd4>)
 8000964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000968:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <HAL_InitTick+0xd4>)
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_InitTick+0xd4>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <HAL_InitTick+0xd4>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_InitTick+0xd4>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000982:	4818      	ldr	r0, [pc, #96]	; (80009e4 <HAL_InitTick+0xd4>)
 8000984:	f003 fe8b 	bl	800469e <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800098e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11b      	bne.n	80009ce <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000996:	4813      	ldr	r0, [pc, #76]	; (80009e4 <HAL_InitTick+0xd4>)
 8000998:	f003 fee2 	bl	8004760 <HAL_TIM_Base_Start_IT>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d111      	bne.n	80009ce <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009aa:	2019      	movs	r0, #25
 80009ac:	f000 f9c6 	bl	8000d3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d808      	bhi.n	80009c8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009b6:	2200      	movs	r2, #0
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	2019      	movs	r0, #25
 80009bc:	f000 f9a2 	bl	8000d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_InitTick+0xdc>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e002      	b.n	80009ce <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	20000a38 	.word	0x20000a38
 80009e8:	40012c00 	.word	0x40012c00
 80009ec:	20000004 	.word	0x20000004

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000a22:	f000 fd7b 	bl	800151c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200025dc 	.word	0x200025dc

08000a30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a36:	f003 fefd 	bl	8004834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000a38 	.word	0x20000a38

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f00b f984 	bl	800bd80 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000a000 	.word	0x2000a000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	20000a84 	.word	0x20000a84
 8000aac:	20002c30 	.word	0x20002c30

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff ffea 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f00b f943 	bl	800bd8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff fc8d 	bl	8000424 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b0c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000b18:	0800c7a4 	.word	0x0800c7a4
  ldr r2, =_sbss
 8000b1c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000b20:	20002c30 	.word	0x20002c30

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f8d8 	bl	8000cee <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f7ff fee6 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fe36 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000a88 	.word	0x20000a88

08000b7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000a88 	.word	0x20000a88

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff4c 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d16:	f7ff ff61 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f7ff ffb1 	bl	8000c88 <NVIC_EncodePriority>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff80 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff54 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	e154      	b.n	8001012 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8146 	beq.w	800100c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d005      	beq.n	8000d98 <HAL_GPIO_Init+0x40>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d130      	bne.n	8000dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 0201 	and.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d017      	beq.n	8000e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d123      	bne.n	8000e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	6939      	ldr	r1, [r7, #16]
 8000e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0203 	and.w	r2, r3, #3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a0 	beq.w	800100c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	4b58      	ldr	r3, [pc, #352]	; (8001030 <HAL_GPIO_Init+0x2d8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a57      	ldr	r2, [pc, #348]	; (8001030 <HAL_GPIO_Init+0x2d8>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b55      	ldr	r3, [pc, #340]	; (8001030 <HAL_GPIO_Init+0x2d8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee4:	4a53      	ldr	r2, [pc, #332]	; (8001034 <HAL_GPIO_Init+0x2dc>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0e:	d019      	beq.n	8000f44 <HAL_GPIO_Init+0x1ec>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a49      	ldr	r2, [pc, #292]	; (8001038 <HAL_GPIO_Init+0x2e0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d013      	beq.n	8000f40 <HAL_GPIO_Init+0x1e8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d00d      	beq.n	8000f3c <HAL_GPIO_Init+0x1e4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a47      	ldr	r2, [pc, #284]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d007      	beq.n	8000f38 <HAL_GPIO_Init+0x1e0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a46      	ldr	r2, [pc, #280]	; (8001044 <HAL_GPIO_Init+0x2ec>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d101      	bne.n	8000f34 <HAL_GPIO_Init+0x1dc>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e008      	b.n	8000f46 <HAL_GPIO_Init+0x1ee>
 8000f34:	2305      	movs	r3, #5
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x1ee>
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e004      	b.n	8000f46 <HAL_GPIO_Init+0x1ee>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x1ee>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <HAL_GPIO_Init+0x1ee>
 8000f44:	2300      	movs	r3, #0
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	f002 0203 	and.w	r2, r2, #3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4093      	lsls	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f56:	4937      	ldr	r1, [pc, #220]	; (8001034 <HAL_GPIO_Init+0x2dc>)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f88:	4a2f      	ldr	r2, [pc, #188]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fb2:	4a25      	ldr	r2, [pc, #148]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	f47f aea3 	bne.w	8000d68 <HAL_GPIO_Init+0x10>
  }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000
 8001038:	48000400 	.word	0x48000400
 800103c:	48000800 	.word	0x48000800
 8001040:	48000c00 	.word	0x48000c00
 8001044:	48001000 	.word	0x48001000
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4013      	ands	r3, r2
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43d9      	mvns	r1, r3
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	400b      	ands	r3, r1
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e081      	b.n	80011f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fb7c 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2224      	movs	r2, #36	; 0x24
 8001110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d107      	bne.n	800115a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	e006      	b.n	8001168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d104      	bne.n	800117a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800118c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800119c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2220      	movs	r2, #32
 80011e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b20      	cmp	r3, #32
 8001212:	d138      	bne.n	8001286 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800121e:	2302      	movs	r3, #2
 8001220:	e032      	b.n	8001288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2224      	movs	r2, #36	; 0x24
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001250:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001286:	2302      	movs	r3, #2
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	d139      	bne.n	800131e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e033      	b.n	8001320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2224      	movs	r2, #36	; 0x24
 80012c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800131e:	2302      	movs	r3, #2
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	b08b      	sub	sp, #44	; 0x2c
 8001330:	af06      	add	r7, sp, #24
 8001332:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0c4      	b.n	80014c8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f00a f9c0 	bl	800b6d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fc72 	bl	8004c4e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e040      	b.n	80013f2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	3301      	adds	r3, #1
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3303      	adds	r3, #3
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3338      	adds	r3, #56	; 0x38
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	333c      	adds	r3, #60	; 0x3c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3340      	adds	r3, #64	; 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	3301      	adds	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d3b9      	bcc.n	8001370 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e044      	b.n	800148c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	3301      	adds	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	d3b5      	bcc.n	8001402 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	687e      	ldr	r6, [r7, #4]
 800149e:	466d      	mov	r5, sp
 80014a0:	f106 0410 	add.w	r4, r6, #16
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	602b      	str	r3, [r5, #0]
 80014ac:	1d33      	adds	r3, r6, #4
 80014ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f003 fbe7 	bl	8004c84 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_PCD_Start+0x16>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e016      	b.n	8001514 <HAL_PCD_Start+0x44>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fb94 	bl	8004c20 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014f8:	2101      	movs	r1, #1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f00a fb8a 	bl	800bc14 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fe54 	bl	80071b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fe4d 	bl	80071c8 <USB_ReadInterrupts>
 800152e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fab2 	bl	8001aa4 <PCD_EP_ISR_Handler>

    return;
 8001540:	e0bd      	b.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155e:	b292      	uxth	r2, r2
 8001560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f00a f958 	bl	800b81a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800156a:	2100      	movs	r1, #0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f8a9 	bl	80016c4 <HAL_PCD_SetAddress>

    return;
 8001572:	e0a4      	b.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001590:	b292      	uxth	r2, r2
 8001592:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001596:	e092      	b.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015b4:	b292      	uxth	r2, r2
 80015b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015ba:	e080      	b.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d027      	beq.n	8001616 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0204 	bic.w	r2, r2, #4
 80015d8:	b292      	uxth	r2, r2
 80015da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0208 	bic.w	r2, r2, #8
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f00a f948 	bl	800b88c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001604:	b29a      	uxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800160e:	b292      	uxth	r2, r2
 8001610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001614:	e053      	b.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800161c:	2b00      	cmp	r3, #0
 800161e:	d027      	beq.n	8001670 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0208 	orr.w	r2, r2, #8
 8001632:	b292      	uxth	r2, r2
 8001634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001640:	b29a      	uxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800164a:	b292      	uxth	r2, r2
 800164c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001658:	b29a      	uxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0204 	orr.w	r2, r2, #4
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f00a f8f5 	bl	800b858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800166e:	e026      	b.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00f      	beq.n	800169a <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800168c:	b292      	uxth	r2, r2
 800168e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f00a f8b3 	bl	800b7fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001698:	e011      	b.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00c      	beq.n	80016be <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016b6:	b292      	uxth	r2, r2
 80016b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016bc:	bf00      	nop
  }
}
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_PCD_SetAddress+0x1a>
 80016da:	2302      	movs	r3, #2
 80016dc:	e013      	b.n	8001706 <HAL_PCD_SetAddress+0x42>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 fd47 	bl	800718a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	4608      	mov	r0, r1
 8001718:	4611      	mov	r1, r2
 800171a:	461a      	mov	r2, r3
 800171c:	4603      	mov	r3, r0
 800171e:	70fb      	strb	r3, [r7, #3]
 8001720:	460b      	mov	r3, r1
 8001722:	803b      	strh	r3, [r7, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800172c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da0e      	bge.n	8001752 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	705a      	strb	r2, [r3, #1]
 8001750:	e00e      	b.n	8001770 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	f003 0207 	and.w	r2, r3, #7
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	b2da      	uxtb	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800177c:	883a      	ldrh	r2, [r7, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	78ba      	ldrb	r2, [r7, #2]
 8001786:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001788:	78bb      	ldrb	r3, [r7, #2]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d102      	bne.n	8001794 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_PCD_EP_Open+0x94>
 800179e:	2302      	movs	r3, #2
 80017a0:	e00e      	b.n	80017c0 <HAL_PCD_EP_Open+0xb2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68f9      	ldr	r1, [r7, #12]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 fa89 	bl	8004cc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017be:	7afb      	ldrb	r3, [r7, #11]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da0e      	bge.n	80017fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	705a      	strb	r2, [r3, #1]
 80017f8:	e00e      	b.n	8001818 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0207 	and.w	r2, r3, #7
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_PCD_EP_Close+0x6a>
 800182e:	2302      	movs	r3, #2
 8001830:	e00e      	b.n	8001850 <HAL_PCD_EP_Close+0x88>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fe05 	bl	8005450 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	460b      	mov	r3, r1
 8001866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001868:	7afb      	ldrb	r3, [r7, #11]
 800186a:	f003 0207 	and.w	r2, r3, #7
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2200      	movs	r2, #0
 8001896:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001898:	7afb      	ldrb	r3, [r7, #11]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6979      	ldr	r1, [r7, #20]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 ffbd 	bl	800582a <USB_EPStartXfer>

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	f003 0207 	and.w	r2, r3, #7
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018dc:	681b      	ldr	r3, [r3, #0]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	460b      	mov	r3, r1
 80018f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2201      	movs	r2, #1
 8001934:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001936:	7afb      	ldrb	r3, [r7, #11]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	b2da      	uxtb	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6979      	ldr	r1, [r7, #20]
 8001948:	4618      	mov	r0, r3
 800194a:	f003 ff6e 	bl	800582a <USB_EPStartXfer>

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0207 	and.w	r2, r3, #7
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d901      	bls.n	8001976 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e03e      	b.n	80019f4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da0e      	bge.n	800199c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	705a      	strb	r2, [r3, #1]
 800199a:	e00c      	b.n	80019b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_PCD_EP_SetStall+0x7e>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e00e      	b.n	80019f4 <HAL_PCD_EP_SetStall+0x9c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f005 fad1 	bl	8006f8c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 020f 	and.w	r2, r3, #15
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d901      	bls.n	8001a1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e040      	b.n	8001a9c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da0e      	bge.n	8001a40 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	705a      	strb	r2, [r3, #1]
 8001a3e:	e00e      	b.n	8001a5e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 0207 	and.w	r2, r3, #7
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_EP_ClrStall+0x82>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e00e      	b.n	8001a9c <HAL_PCD_EP_ClrStall+0xa0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f005 face 	bl	800702e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b096      	sub	sp, #88	; 0x58
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aac:	e3bf      	b.n	800222e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001aba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001ac8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 8179 	bne.w	8001dc4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ad2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d152      	bne.n	8001b84 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aee:	81fb      	strh	r3, [r7, #14]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	89fb      	ldrh	r3, [r7, #14]
 8001af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3328      	adds	r3, #40	; 0x28
 8001b06:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b42:	2100      	movs	r1, #0
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f009 fe40 	bl	800b7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 836b 	beq.w	800222e <PCD_EP_ISR_Handler+0x78a>
 8001b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 8366 	bne.w	800222e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b292      	uxth	r2, r2
 8001b76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b82:	e354      	b.n	800222e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d034      	beq.n	8001c0c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bde:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	f005 fb47 	bl	8007274 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	823b      	strh	r3, [r7, #16]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	8a3a      	ldrh	r2, [r7, #16]
 8001bfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c00:	b292      	uxth	r2, r2
 8001c02:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f009 fdb3 	bl	800b770 <HAL_PCD_SetupStageCallback>
 8001c0a:	e310      	b.n	800222e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c0c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f280 830c 	bge.w	800222e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c22:	4013      	ands	r3, r2
 8001c24:	83fb      	strh	r3, [r7, #30]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	8bfa      	ldrh	r2, [r7, #30]
 8001c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c30:	b292      	uxth	r2, r2
 8001c32:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	3306      	adds	r3, #6
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d019      	beq.n	8001c9c <PCD_EP_ISR_Handler+0x1f8>
 8001c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d015      	beq.n	8001c9c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	6959      	ldr	r1, [r3, #20]
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f005 faf7 	bl	8007274 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	441a      	add	r2, r3
 8001c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c94:	2100      	movs	r1, #0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f009 fd7c 	bl	800b794 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ca6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 82bd 	bne.w	800222e <PCD_EP_ISR_Handler+0x78a>
 8001cb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cb8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001cc0:	f000 82b5 	beq.w	800222e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4413      	add	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	801a      	strh	r2, [r3, #0]
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8001cfa:	d91d      	bls.n	8001d38 <PCD_EP_ISR_Handler+0x294>
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <PCD_EP_ISR_Handler+0x272>
 8001d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d12:	3b01      	subs	r3, #1
 8001d14:	647b      	str	r3, [r7, #68]	; 0x44
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	e026      	b.n	8001d86 <PCD_EP_ISR_Handler+0x2e2>
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <PCD_EP_ISR_Handler+0x2b2>
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	e017      	b.n	8001d86 <PCD_EP_ISR_Handler+0x2e2>
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <PCD_EP_ISR_Handler+0x2cc>
 8001d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	827b      	strh	r3, [r7, #18]
 8001d98:	8a7b      	ldrh	r3, [r7, #18]
 8001d9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d9e:	827b      	strh	r3, [r7, #18]
 8001da0:	8a7b      	ldrh	r3, [r7, #18]
 8001da2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001da6:	827b      	strh	r3, [r7, #18]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	8a7b      	ldrh	r3, [r7, #18]
 8001dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	8013      	strh	r3, [r2, #0]
 8001dc2:	e234      	b.n	800222e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dd8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f280 80fc 	bge.w	8001fda <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001df8:	4013      	ands	r3, r2
 8001dfa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e14:	b292      	uxth	r2, r2
 8001e16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e18:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	7b1b      	ldrb	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d125      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3306      	adds	r3, #6
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001e62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8092 	beq.w	8001f90 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	6959      	ldr	r1, [r3, #20]
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	88da      	ldrh	r2, [r3, #6]
 8001e78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e7c:	f005 f9fa 	bl	8007274 <USB_ReadPMA>
 8001e80:	e086      	b.n	8001f90 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e84:	78db      	ldrb	r3, [r3, #3]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d10a      	bne.n	8001ea0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f9d9 	bl	800224a <HAL_PCD_EP_DB_Receive>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001e9e:	e077      	b.n	8001f90 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	441a      	add	r2, r3
 8001ecc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001edc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d024      	beq.n	8001f48 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	3302      	adds	r3, #2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f26:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d02e      	beq.n	8001f90 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	6959      	ldr	r1, [r3, #20]
 8001f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3c:	891a      	ldrh	r2, [r3, #8]
 8001f3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f42:	f005 f997 	bl	8007274 <USB_ReadPMA>
 8001f46:	e023      	b.n	8001f90 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3306      	adds	r3, #6
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f70:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	6959      	ldr	r1, [r3, #20]
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	895a      	ldrh	r2, [r3, #10]
 8001f88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f8c:	f005 f972 	bl	8007274 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f98:	441a      	add	r2, r3
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fa6:	441a      	add	r2, r3
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001faa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <PCD_EP_ISR_Handler+0x51c>
 8001fb4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d206      	bcs.n	8001fce <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f009 fbe4 	bl	800b794 <HAL_PCD_DataOutStageCallback>
 8001fcc:	e005      	b.n	8001fda <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fc28 	bl	800582a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8123 	beq.w	800222e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fe8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	441a      	add	r2, r3
 8002028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800202c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002034:	b29b      	uxth	r3, r3
 8002036:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203a:	78db      	ldrb	r3, [r3, #3]
 800203c:	2b01      	cmp	r3, #1
 800203e:	f040 80a2 	bne.w	8002186 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	7b1b      	ldrb	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8093 	beq.w	8002178 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002052:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d046      	beq.n	80020ec <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800205e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d126      	bne.n	80020b4 <PCD_EP_ISR_Handler+0x610>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	4413      	add	r3, r2
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	011a      	lsls	r2, r3, #4
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	4413      	add	r3, r2
 8002088:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800208c:	623b      	str	r3, [r7, #32]
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002098:	b29a      	uxth	r2, r3
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	e061      	b.n	8002178 <PCD_EP_ISR_Handler+0x6d4>
 80020b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d15d      	bne.n	8002178 <PCD_EP_ISR_Handler+0x6d4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	4413      	add	r3, r2
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	011a      	lsls	r2, r3, #4
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	4413      	add	r3, r2
 80020de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	2200      	movs	r2, #0
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	e045      	b.n	8002178 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d126      	bne.n	8002148 <PCD_EP_ISR_Handler+0x6a4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	4413      	add	r3, r2
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
 8002112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	011a      	lsls	r2, r3, #4
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	4413      	add	r3, r2
 800211c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212c:	b29a      	uxth	r2, r3
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800213c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002140:	b29a      	uxth	r2, r3
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	e017      	b.n	8002178 <PCD_EP_ISR_Handler+0x6d4>
 8002148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214a:	785b      	ldrb	r3, [r3, #1]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d113      	bne.n	8002178 <PCD_EP_ISR_Handler+0x6d4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215e:	4413      	add	r3, r2
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	011a      	lsls	r2, r3, #4
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	4413      	add	r3, r2
 800216c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002174:	2200      	movs	r2, #0
 8002176:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f009 fb23 	bl	800b7ca <HAL_PCD_DataInStageCallback>
 8002184:	e053      	b.n	800222e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002186:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d146      	bne.n	8002220 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	3302      	adds	r3, #2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80021be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d907      	bls.n	80021da <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80021ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021d2:	1ad2      	subs	r2, r2, r3
 80021d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d6:	619a      	str	r2, [r3, #24]
 80021d8:	e002      	b.n	80021e0 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80021da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f009 faeb 	bl	800b7ca <HAL_PCD_DataInStageCallback>
 80021f4:	e01b      	b.n	800222e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021fe:	441a      	add	r2, r3
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800220c:	441a      	add	r2, r3
 800220e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002210:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002218:	4618      	mov	r0, r3
 800221a:	f003 fb06 	bl	800582a <USB_EPStartXfer>
 800221e:	e006      	b.n	800222e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002220:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002224:	461a      	mov	r2, r3
 8002226:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f91b 	bl	8002464 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002236:	b29b      	uxth	r3, r3
 8002238:	b21b      	sxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f6ff ac37 	blt.w	8001aae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3758      	adds	r7, #88	; 0x58
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b088      	sub	sp, #32
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d07e      	beq.n	8002360 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226a:	b29b      	uxth	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	3302      	adds	r3, #2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	8b7b      	ldrh	r3, [r7, #26]
 8002292:	429a      	cmp	r2, r3
 8002294:	d306      	bcc.n	80022a4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	1ad2      	subs	r2, r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	619a      	str	r2, [r3, #24]
 80022a2:	e002      	b.n	80022aa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d123      	bne.n	80022fa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022cc:	833b      	strh	r3, [r7, #24]
 80022ce:	8b3b      	ldrh	r3, [r7, #24]
 80022d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022d4:	833b      	strh	r3, [r7, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	8b3b      	ldrh	r3, [r7, #24]
 80022e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01f      	beq.n	8002344 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	82fb      	strh	r3, [r7, #22]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	8afb      	ldrh	r3, [r7, #22]
 8002330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002340:	b29b      	uxth	r3, r3
 8002342:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002344:	8b7b      	ldrh	r3, [r7, #26]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6959      	ldr	r1, [r3, #20]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	891a      	ldrh	r2, [r3, #8]
 8002358:	8b7b      	ldrh	r3, [r7, #26]
 800235a:	f004 ff8b 	bl	8007274 <USB_ReadPMA>
 800235e:	e07c      	b.n	800245a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002368:	b29b      	uxth	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	3306      	adds	r3, #6
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002388:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	8b7b      	ldrh	r3, [r7, #26]
 8002390:	429a      	cmp	r2, r3
 8002392:	d306      	bcc.n	80023a2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	8b7b      	ldrh	r3, [r7, #26]
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	619a      	str	r2, [r3, #24]
 80023a0:	e002      	b.n	80023a8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d123      	bne.n	80023f8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	83fb      	strh	r3, [r7, #30]
 80023cc:	8bfb      	ldrh	r3, [r7, #30]
 80023ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023d2:	83fb      	strh	r3, [r7, #30]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	8bfb      	ldrh	r3, [r7, #30]
 80023e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11f      	bne.n	8002442 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241c:	83bb      	strh	r3, [r7, #28]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	8bbb      	ldrh	r3, [r7, #28]
 800242e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6959      	ldr	r1, [r3, #20]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	895a      	ldrh	r2, [r3, #10]
 8002454:	8b7b      	ldrh	r3, [r7, #26]
 8002456:	f004 ff0d 	bl	8007274 <USB_ReadPMA>
    }
  }

  return count;
 800245a:	8b7b      	ldrh	r3, [r7, #26]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b0a4      	sub	sp, #144	; 0x90
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 81dd 	beq.w	8002838 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	3302      	adds	r3, #2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d907      	bls.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024be:	1ad2      	subs	r2, r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	619a      	str	r2, [r3, #24]
 80024c4:	e002      	b.n	80024cc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 80b9 	bne.w	8002648 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d126      	bne.n	800252c <HAL_PCD_EP_DB_Transmit+0xc8>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	4413      	add	r3, r2
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	011a      	lsls	r2, r3, #4
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	4413      	add	r3, r2
 8002500:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002510:	b29a      	uxth	r2, r3
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002524:	b29a      	uxth	r2, r3
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	e01a      	b.n	8002562 <HAL_PCD_EP_DB_Transmit+0xfe>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d116      	bne.n	8002562 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	4413      	add	r3, r2
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	011a      	lsls	r2, r3, #4
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	4413      	add	r3, r2
 8002556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	2200      	movs	r2, #0
 8002560:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d126      	bne.n	80025be <HAL_PCD_EP_DB_Transmit+0x15a>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	011a      	lsls	r2, r3, #4
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	801a      	strh	r2, [r3, #0]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e017      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d113      	bne.n	80025ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	4413      	add	r3, r2
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	011a      	lsls	r2, r3, #4
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	4413      	add	r3, r2
 80025e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2200      	movs	r2, #0
 80025ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	4619      	mov	r1, r3
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f009 f8e8 	bl	800b7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 82fc 	beq.w	8002bfe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002620:	82fb      	strh	r3, [r7, #22]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	441a      	add	r2, r3
 8002630:	8afb      	ldrh	r3, [r7, #22]
 8002632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800263a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002642:	b29b      	uxth	r3, r3
 8002644:	8013      	strh	r3, [r2, #0]
 8002646:	e2da      	b.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d021      	beq.n	8002696 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	441a      	add	r2, r3
 800267e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002692:	b29b      	uxth	r3, r3
 8002694:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269c:	2b01      	cmp	r3, #1
 800269e:	f040 82ae 	bne.w	8002bfe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026aa:	441a      	add	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026b8:	441a      	add	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	6a1a      	ldr	r2, [r3, #32]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d30b      	bcc.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	621a      	str	r2, [r3, #32]
 80026e0:	e017      	b.n	8002712 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80026ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026fa:	e00a      	b.n	8002712 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d165      	bne.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x382>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272e:	4413      	add	r3, r2
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	011a      	lsls	r2, r3, #4
 8002738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800273a:	4413      	add	r3, r2
 800273c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274c:	b29a      	uxth	r2, r3
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002756:	2b3e      	cmp	r3, #62	; 0x3e
 8002758:	d91d      	bls.n	8002796 <HAL_PCD_EP_DB_Transmit+0x332>
 800275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48
 8002762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_PCD_EP_DB_Transmit+0x310>
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002770:	3b01      	subs	r3, #1
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277c:	b29b      	uxth	r3, r3
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	b29b      	uxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278e:	b29a      	uxth	r2, r3
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	e044      	b.n	8002820 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x350>
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e035      	b.n	8002820 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_PCD_EP_DB_Transmit+0x36a>
 80027c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ca:	3301      	adds	r3, #1
 80027cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b29a      	uxth	r2, r3
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	e01c      	b.n	8002820 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d118      	bne.n	8002820 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002802:	4413      	add	r3, r2
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	011a      	lsls	r2, r3, #4
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	4413      	add	r3, r2
 8002810:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002814:	643b      	str	r3, [r7, #64]	; 0x40
 8002816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800281a:	b29a      	uxth	r2, r3
 800281c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6959      	ldr	r1, [r3, #20]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	891a      	ldrh	r2, [r3, #8]
 800282c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002830:	b29b      	uxth	r3, r3
 8002832:	f004 fcd9 	bl	80071e8 <USB_WritePMA>
 8002836:	e1e2      	b.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002840:	b29b      	uxth	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	3306      	adds	r3, #6
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002860:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800286c:	429a      	cmp	r2, r3
 800286e:	d307      	bcc.n	8002880 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	619a      	str	r2, [r3, #24]
 800287e:	e002      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 80c0 	bne.w	8002a10 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d126      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ac:	4413      	add	r3, r2
 80028ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	011a      	lsls	r2, r3, #4
 80028b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028b8:	4413      	add	r3, r2
 80028ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028be:	67bb      	str	r3, [r7, #120]	; 0x78
 80028c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ce:	801a      	strh	r2, [r3, #0]
 80028d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028de:	b29a      	uxth	r2, r3
 80028e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e2:	801a      	strh	r2, [r3, #0]
 80028e4:	e01a      	b.n	800291c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d116      	bne.n	800291c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	667b      	str	r3, [r7, #100]	; 0x64
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002902:	4413      	add	r3, r2
 8002904:	667b      	str	r3, [r7, #100]	; 0x64
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	011a      	lsls	r2, r3, #4
 800290c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800290e:	4413      	add	r3, r2
 8002910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002914:	663b      	str	r3, [r7, #96]	; 0x60
 8002916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002918:	2200      	movs	r2, #0
 800291a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	677b      	str	r3, [r7, #116]	; 0x74
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d12b      	bne.n	8002982 <HAL_PCD_EP_DB_Transmit+0x51e>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	4413      	add	r3, r2
 8002940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	011a      	lsls	r2, r3, #4
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	4413      	add	r3, r2
 800294c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002960:	b29a      	uxth	r2, r3
 8002962:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002978:	b29a      	uxth	r2, r3
 800297a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	e017      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d113      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002998:	4413      	add	r3, r2
 800299a:	677b      	str	r3, [r7, #116]	; 0x74
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	011a      	lsls	r2, r3, #4
 80029a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a4:	4413      	add	r3, r2
 80029a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029aa:	673b      	str	r3, [r7, #112]	; 0x70
 80029ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ae:	2200      	movs	r2, #0
 80029b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f008 ff06 	bl	800b7ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f040 811a 	bne.w	8002bfe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	441a      	add	r2, r3
 80029f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80029fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	8013      	strh	r3, [r2, #0]
 8002a0e:	e0f6      	b.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d121      	bne.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 80ca 	bne.w	8002bfe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a72:	441a      	add	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a80:	441a      	add	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d30b      	bcc.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6a1a      	ldr	r2, [r3, #32]
 8002a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa2:	1ad2      	subs	r2, r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	621a      	str	r2, [r3, #32]
 8002aa8:	e017      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002ab2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ac2:	e00a      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	657b      	str	r3, [r7, #84]	; 0x54
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d165      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	4413      	add	r3, r2
 8002afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	011a      	lsls	r2, r3, #4
 8002b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b08:	4413      	add	r3, r2
 8002b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b24:	2b3e      	cmp	r3, #62	; 0x3e
 8002b26:	d91d      	bls.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x700>
 8002b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e041      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e032      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x738>
 8002b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b98:	3301      	adds	r3, #1
 8002b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e019      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d115      	bne.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	4413      	add	r3, r2
 8002bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	011a      	lsls	r2, r3, #4
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8002bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	6959      	ldr	r1, [r3, #20]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	895a      	ldrh	r2, [r3, #10]
 8002bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f004 faf5 	bl	80071e8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c18:	82bb      	strh	r3, [r7, #20]
 8002c1a:	8abb      	ldrh	r3, [r7, #20]
 8002c1c:	f083 0310 	eor.w	r3, r3, #16
 8002c20:	82bb      	strh	r3, [r7, #20]
 8002c22:	8abb      	ldrh	r3, [r7, #20]
 8002c24:	f083 0320 	eor.w	r3, r3, #32
 8002c28:	82bb      	strh	r3, [r7, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	8abb      	ldrh	r3, [r7, #20]
 8002c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3790      	adds	r7, #144	; 0x90
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	4613      	mov	r3, r2
 8002c68:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e009      	b.n	8002ca2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c8e:	897a      	ldrh	r2, [r7, #10]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ca2:	893b      	ldrh	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	80da      	strh	r2, [r3, #6]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f001 b823 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 817d 	beq.w	8003016 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d1c:	4bbc      	ldr	r3, [pc, #752]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d00c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d28:	4bb9      	ldr	r3, [pc, #740]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d15c      	bne.n	8002dee <HAL_RCC_OscConfig+0x10e>
 8002d34:	4bb6      	ldr	r3, [pc, #728]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d155      	bne.n	8002dee <HAL_RCC_OscConfig+0x10e>
 8002d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d102      	bne.n	8002d74 <HAL_RCC_OscConfig+0x94>
 8002d6e:	4ba8      	ldr	r3, [pc, #672]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e015      	b.n	8002da0 <HAL_RCC_OscConfig+0xc0>
 8002d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d9c:	4b9c      	ldr	r3, [pc, #624]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002da8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dac:	fa92 f2a2 	rbit	r2, r2
 8002db0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002db4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002db8:	fab2 f282 	clz	r2, r2
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f042 0220 	orr.w	r2, r2, #32
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f002 021f 	and.w	r2, r2, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 811f 	beq.w	8003014 <HAL_RCC_OscConfig+0x334>
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 8116 	bne.w	8003014 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f000 bfaf 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12e>
 8002e00:	4b83      	ldr	r3, [pc, #524]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a82      	ldr	r2, [pc, #520]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e036      	b.n	8002e7c <HAL_RCC_OscConfig+0x19c>
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x158>
 8002e1e:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7b      	ldr	r2, [pc, #492]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a78      	ldr	r2, [pc, #480]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e021      	b.n	8002e7c <HAL_RCC_OscConfig+0x19c>
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x184>
 8002e4a:	4b71      	ldr	r3, [pc, #452]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a70      	ldr	r2, [pc, #448]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b6e      	ldr	r3, [pc, #440]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6d      	ldr	r2, [pc, #436]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0x19c>
 8002e64:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a69      	ldr	r2, [pc, #420]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b67      	ldr	r3, [pc, #412]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a66      	ldr	r2, [pc, #408]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e7c:	4b64      	ldr	r3, [pc, #400]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f023 020f 	bic.w	r2, r3, #15
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	495f      	ldr	r1, [pc, #380]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d059      	beq.n	8002f5a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fd fe69 	bl	8000b7c <HAL_GetTick>
 8002eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fd fe64 	bl	8000b7c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d902      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f000 bf43 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002eda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x218>
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e015      	b.n	8002f24 <HAL_RCC_OscConfig+0x244>
 8002ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f20:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f30:	fa92 f2a2 	rbit	r2, r2
 8002f34:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ab      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x1d0>
 8002f58:	e05d      	b.n	8003016 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fe0f 	bl	8000b7c <HAL_GetTick>
 8002f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fd fe0a 	bl	8000b7c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d902      	bls.n	8002f7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	f000 bee9 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
 8002f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d102      	bne.n	8002fac <HAL_RCC_OscConfig+0x2cc>
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e015      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2f8>
 8002fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fc8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fdc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002fe0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fe4:	fa92 f2a2 	rbit	r2, r2
 8002fe8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002fec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f042 0220 	orr.w	r2, r2, #32
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f002 021f 	and.w	r2, r2, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ab      	bne.n	8002f64 <HAL_RCC_OscConfig+0x284>
 800300c:	e003      	b.n	8003016 <HAL_RCC_OscConfig+0x336>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 817d 	beq.w	8003326 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800302c:	4ba6      	ldr	r3, [pc, #664]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003038:	4ba3      	ldr	r3, [pc, #652]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d172      	bne.n	800312a <HAL_RCC_OscConfig+0x44a>
 8003044:	4ba0      	ldr	r3, [pc, #640]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d16c      	bne.n	800312a <HAL_RCC_OscConfig+0x44a>
 8003050:	2302      	movs	r3, #2
 8003052:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003062:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0x3a0>
 800307a:	4b93      	ldr	r3, [pc, #588]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	e013      	b.n	80030a8 <HAL_RCC_OscConfig+0x3c8>
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003092:	2302      	movs	r3, #2
 8003094:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003098:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80030a4:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80030ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030b2:	fa92 f2a2 	rbit	r2, r2
 80030b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80030ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCC_OscConfig+0x410>
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d002      	beq.n	80030f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f000 be2e 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f0:	4b75      	ldr	r3, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	21f8      	movs	r1, #248	; 0xf8
 8003106:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800310e:	fa91 f1a1 	rbit	r1, r1
 8003112:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003116:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800311a:	fab1 f181 	clz	r1, r1
 800311e:	b2c9      	uxtb	r1, r1
 8003120:	408b      	lsls	r3, r1
 8003122:	4969      	ldr	r1, [pc, #420]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003128:	e0fd      	b.n	8003326 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8088 	beq.w	800324c <HAL_RCC_OscConfig+0x56c>
 800313c:	2301      	movs	r3, #1
 800313e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800314e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800315c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	461a      	mov	r2, r3
 8003164:	2301      	movs	r3, #1
 8003166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fd fd08 	bl	8000b7c <HAL_GetTick>
 800316c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7fd fd03 	bl	8000b7c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d902      	bls.n	8003188 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	f000 bde2 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
 8003188:	2302      	movs	r3, #2
 800318a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800319a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d102      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4d8>
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e013      	b.n	80031e0 <HAL_RCC_OscConfig+0x500>
 80031b8:	2302      	movs	r3, #2
 80031ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031ca:	2302      	movs	r3, #2
 80031cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80031dc:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2202      	movs	r2, #2
 80031e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80031e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031ea:	fa92 f2a2 	rbit	r2, r2
 80031ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80031f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031f6:	fab2 f282 	clz	r2, r2
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f042 0220 	orr.w	r2, r2, #32
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f002 021f 	and.w	r2, r2, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0af      	beq.n	8003172 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003212:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	21f8      	movs	r1, #248	; 0xf8
 8003228:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003230:	fa91 f1a1 	rbit	r1, r1
 8003234:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003238:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800323c:	fab1 f181 	clz	r1, r1
 8003240:	b2c9      	uxtb	r1, r1
 8003242:	408b      	lsls	r3, r1
 8003244:	4920      	ldr	r1, [pc, #128]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
 800324a:	e06c      	b.n	8003326 <HAL_RCC_OscConfig+0x646>
 800324c:	2301      	movs	r3, #1
 800324e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800325e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800326c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	461a      	mov	r2, r3
 8003274:	2300      	movs	r3, #0
 8003276:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fd fc80 	bl	8000b7c <HAL_GetTick>
 800327c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003282:	f7fd fc7b 	bl	8000b7c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d902      	bls.n	8003298 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	f000 bd5a 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
 8003298:	2302      	movs	r3, #2
 800329a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80032aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d104      	bne.n	80032cc <HAL_RCC_OscConfig+0x5ec>
 80032c2:	4b01      	ldr	r3, [pc, #4]	; (80032c8 <HAL_RCC_OscConfig+0x5e8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	e015      	b.n	80032f4 <HAL_RCC_OscConfig+0x614>
 80032c8:	40021000 	.word	0x40021000
 80032cc:	2302      	movs	r3, #2
 80032ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032de:	2302      	movs	r3, #2
 80032e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80032f0:	4bc8      	ldr	r3, [pc, #800]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	2202      	movs	r2, #2
 80032f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80032fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032fe:	fa92 f2a2 	rbit	r2, r2
 8003302:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003306:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800330a:	fab2 f282 	clz	r2, r2
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f002 021f 	and.w	r2, r2, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ad      	bne.n	8003282 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8110 	beq.w	800355c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d079      	beq.n	8003440 <HAL_RCC_OscConfig+0x760>
 800334c:	2301      	movs	r3, #1
 800334e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800335e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	4bab      	ldr	r3, [pc, #684]	; (8003618 <HAL_RCC_OscConfig+0x938>)
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	461a      	mov	r2, r3
 8003372:	2301      	movs	r3, #1
 8003374:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fd fc01 	bl	8000b7c <HAL_GetTick>
 800337a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003380:	f7fd fbfc 	bl	8000b7c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d902      	bls.n	8003396 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	f000 bcdb 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
 8003396:	2302      	movs	r3, #2
 8003398:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033b0:	2202      	movs	r2, #2
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033d4:	2202      	movs	r2, #2
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f2a3 	rbit	r2, r3
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f0:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 80033f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033fc:	2102      	movs	r1, #2
 80033fe:	6019      	str	r1, [r3, #0]
 8003400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003404:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f1a3 	rbit	r1, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003416:	6019      	str	r1, [r3, #0]
  return result;
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0a0      	beq.n	8003380 <HAL_RCC_OscConfig+0x6a0>
 800343e:	e08d      	b.n	800355c <HAL_RCC_OscConfig+0x87c>
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	fa93 f2a3 	rbit	r2, r3
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003462:	601a      	str	r2, [r3, #0]
  return result;
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800346c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x938>)
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	461a      	mov	r2, r3
 800347e:	2300      	movs	r3, #0
 8003480:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fd fb7b 	bl	8000b7c <HAL_GetTick>
 8003486:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348c:	f7fd fb76 	bl	8000b7c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d902      	bls.n	80034a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	f000 bc55 	b.w	8003d4c <HAL_RCC_OscConfig+0x106c>
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034aa:	2202      	movs	r2, #2
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034ce:	2202      	movs	r2, #2
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	fa93 f2a3 	rbit	r2, r3
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034f2:	2202      	movs	r2, #2
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800350c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 8003510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800351a:	2102      	movs	r1, #2
 800351c:	6019      	str	r1, [r3, #0]
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f1a3 	rbit	r1, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003534:	6019      	str	r1, [r3, #0]
  return result;
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d197      	bne.n	800348c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 81a1 	beq.w	80038b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 800358a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358e:	61d3      	str	r3, [r2, #28]
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_RCC_OscConfig+0x93c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11a      	bne.n	80035f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_RCC_OscConfig+0x93c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_RCC_OscConfig+0x93c>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7fd fad7 	bl	8000b7c <HAL_GetTick>
 80035ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	e009      	b.n	80035e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7fd fad2 	bl	8000b7c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	; 0x64
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e3b1      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <HAL_RCC_OscConfig+0x93c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ef      	beq.n	80035d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10d      	bne.n	8003620 <HAL_RCC_OscConfig+0x940>
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4a02      	ldr	r2, [pc, #8]	; (8003614 <HAL_RCC_OscConfig+0x934>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6213      	str	r3, [r2, #32]
 8003610:	e03c      	b.n	800368c <HAL_RCC_OscConfig+0x9ac>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	10908120 	.word	0x10908120
 800361c:	40007000 	.word	0x40007000
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10c      	bne.n	800364a <HAL_RCC_OscConfig+0x96a>
 8003630:	4bc1      	ldr	r3, [pc, #772]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	4ac0      	ldr	r2, [pc, #768]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6213      	str	r3, [r2, #32]
 800363c:	4bbe      	ldr	r3, [pc, #760]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4abd      	ldr	r2, [pc, #756]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003642:	f023 0304 	bic.w	r3, r3, #4
 8003646:	6213      	str	r3, [r2, #32]
 8003648:	e020      	b.n	800368c <HAL_RCC_OscConfig+0x9ac>
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x994>
 800365a:	4bb7      	ldr	r3, [pc, #732]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4ab6      	ldr	r2, [pc, #728]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	4bb4      	ldr	r3, [pc, #720]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4ab3      	ldr	r2, [pc, #716]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0x9ac>
 8003674:	4bb0      	ldr	r3, [pc, #704]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4aaf      	ldr	r2, [pc, #700]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6213      	str	r3, [r2, #32]
 8003680:	4bad      	ldr	r3, [pc, #692]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4aac      	ldr	r2, [pc, #688]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8081 	beq.w	80037a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fd fa6d 	bl	8000b7c <HAL_GetTick>
 80036a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	e00b      	b.n	80036c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fd fa68 	bl	8000b7c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e345      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036c8:	2202      	movs	r2, #2
 80036ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80036ec:	2202      	movs	r2, #2
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	fa93 f2a3 	rbit	r2, r3
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003706:	601a      	str	r2, [r3, #0]
  return result;
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003710:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d102      	bne.n	800372c <HAL_RCC_OscConfig+0xa4c>
 8003726:	4b84      	ldr	r3, [pc, #528]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	e013      	b.n	8003754 <HAL_RCC_OscConfig+0xa74>
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003734:	2202      	movs	r2, #2
 8003736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	fa93 f2a3 	rbit	r2, r3
 8003746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003758:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800375c:	2102      	movs	r1, #2
 800375e:	6011      	str	r1, [r2, #0]
 8003760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003764:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	fa92 f1a2 	rbit	r1, r2
 800376e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003772:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003776:	6011      	str	r1, [r2, #0]
  return result;
 8003778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800377c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	fab2 f282 	clz	r2, r2
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f002 021f 	and.w	r2, r2, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d084      	beq.n	80036a8 <HAL_RCC_OscConfig+0x9c8>
 800379e:	e07f      	b.n	80038a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7fd f9ec 	bl	8000b7c <HAL_GetTick>
 80037a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	e00b      	b.n	80037c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd f9e7 	bl	8000b7c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e2c4      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037ca:	2202      	movs	r2, #2
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	fa93 f2a3 	rbit	r2, r3
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003808:	601a      	str	r2, [r3, #0]
  return result;
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003812:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d102      	bne.n	800382e <HAL_RCC_OscConfig+0xb4e>
 8003828:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	e013      	b.n	8003856 <HAL_RCC_OscConfig+0xb76>
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003836:	2202      	movs	r2, #2
 8003838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	fa93 f2a3 	rbit	r2, r3
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	4b39      	ldr	r3, [pc, #228]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800385a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800385e:	2102      	movs	r1, #2
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003866:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	fa92 f1a2 	rbit	r1, r2
 8003870:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003874:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003878:	6011      	str	r1, [r2, #0]
  return result;
 800387a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d184      	bne.n	80037aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8242 	beq.w	8003d4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_RCC_OscConfig+0xc58>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	f000 8213 	beq.w	8003cfa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f040 8162 	bne.w	8003baa <HAL_RCC_OscConfig+0xeca>
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800390a:	601a      	str	r2, [r3, #0]
  return result;
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003914:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003920:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd f926 	bl	8000b7c <HAL_GetTick>
 8003930:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003934:	e00c      	b.n	8003950 <HAL_RCC_OscConfig+0xc70>
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd f91e 	bl	8000b7c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1fd      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	fa93 f2a3 	rbit	r2, r3
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003974:	601a      	str	r2, [r3, #0]
  return result;
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800397e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d102      	bne.n	800399a <HAL_RCC_OscConfig+0xcba>
 8003994:	4bb0      	ldr	r3, [pc, #704]	; (8003c58 <HAL_RCC_OscConfig+0xf78>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	e027      	b.n	80039ea <HAL_RCC_OscConfig+0xd0a>
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f2a3 	rbit	r2, r3
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fa93 f2a3 	rbit	r2, r3
 80039dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	4b9c      	ldr	r3, [pc, #624]	; (8003c58 <HAL_RCC_OscConfig+0xf78>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80039f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039f6:	6011      	str	r1, [r2, #0]
 80039f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	fa92 f1a2 	rbit	r1, r2
 8003a06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a0e:	6011      	str	r1, [r2, #0]
  return result;
 8003a10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	fab2 f282 	clz	r2, r2
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	f042 0220 	orr.w	r2, r2, #32
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	f002 021f 	and.w	r2, r2, #31
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d182      	bne.n	800393c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a36:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0xf78>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	430b      	orrs	r3, r1
 8003a58:	497f      	ldr	r1, [pc, #508]	; (8003c58 <HAL_RCC_OscConfig+0xf78>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
 8003a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	fa93 f2a3 	rbit	r2, r3
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a82:	601a      	str	r2, [r3, #0]
  return result;
 8003a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd f86a 	bl	8000b7c <HAL_GetTick>
 8003aa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aac:	e009      	b.n	8003ac2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fd f865 	bl	8000b7c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e144      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
 8003ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	fa93 f2a3 	rbit	r2, r3
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ae6:	601a      	str	r2, [r3, #0]
  return result;
 8003ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003af0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_OscConfig+0xe2c>
 8003b06:	4b54      	ldr	r3, [pc, #336]	; (8003c58 <HAL_RCC_OscConfig+0xf78>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	e027      	b.n	8003b5c <HAL_RCC_OscConfig+0xe7c>
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	fa93 f2a3 	rbit	r2, r3
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	fa93 f2a3 	rbit	r2, r3
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <HAL_RCC_OscConfig+0xf78>)
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	fa92 f1a2 	rbit	r1, r2
 8003b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b80:	6011      	str	r1, [r2, #0]
  return result;
 8003b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fab2 f282 	clz	r2, r2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f002 021f 	and.w	r2, r2, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d082      	beq.n	8003aae <HAL_RCC_OscConfig+0xdce>
 8003ba8:	e0cf      	b.n	8003d4a <HAL_RCC_OscConfig+0x106a>
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003bb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	fa93 f2a3 	rbit	r2, r3
 8003bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bce:	601a      	str	r2, [r3, #0]
  return result;
 8003bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bd8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003be4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	461a      	mov	r2, r3
 8003bec:	2300      	movs	r3, #0
 8003bee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fc ffc4 	bl	8000b7c <HAL_GetTick>
 8003bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fc ffbf 	bl	8000b7c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e09e      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
 8003c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	fa93 f2a3 	rbit	r2, r3
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c32:	601a      	str	r2, [r3, #0]
  return result;
 8003c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d104      	bne.n	8003c5c <HAL_RCC_OscConfig+0xf7c>
 8003c52:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <HAL_RCC_OscConfig+0xf78>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e029      	b.n	8003cac <HAL_RCC_OscConfig+0xfcc>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	fa93 f2a3 	rbit	r2, r3
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	fa93 f2a3 	rbit	r2, r3
 8003c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCC_OscConfig+0x1078>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cb0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003cb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cb8:	6011      	str	r1, [r2, #0]
 8003cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	fa92 f1a2 	rbit	r1, r2
 8003cc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ccc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cd0:	6011      	str	r1, [r2, #0]
  return result;
 8003cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	fab2 f282 	clz	r2, r2
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f042 0220 	orr.w	r2, r2, #32
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f002 021f 	and.w	r2, r2, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d180      	bne.n	8003bfa <HAL_RCC_OscConfig+0xf1a>
 8003cf8:	e027      	b.n	8003d4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01e      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_RCC_OscConfig+0x1078>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000

08003d5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b09e      	sub	sp, #120	; 0x78
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e162      	b.n	800403a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d74:	4b90      	ldr	r3, [pc, #576]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d910      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b8d      	ldr	r3, [pc, #564]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	498b      	ldr	r1, [pc, #556]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b89      	ldr	r3, [pc, #548]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e14a      	b.n	800403a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b82      	ldr	r3, [pc, #520]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	497f      	ldr	r1, [pc, #508]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80dc 	beq.w	8003f88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d13c      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xf6>
 8003dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ddc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d102      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xa6>
 8003dfc:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	e00f      	b.n	8003e22 <HAL_RCC_ClockConfig+0xc6>
 8003e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e14:	663b      	str	r3, [r7, #96]	; 0x60
 8003e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e1e:	4b67      	ldr	r3, [pc, #412]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e2a:	fa92 f2a2 	rbit	r2, r2
 8003e2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e32:	fab2 f282 	clz	r2, r2
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	f042 0220 	orr.w	r2, r2, #32
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	f002 021f 	and.w	r2, r2, #31
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f202 	lsl.w	r2, r1, r2
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d17b      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0f3      	b.n	800403a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d13c      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x178>
 8003e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x128>
 8003e7e:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e00f      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x148>
 8003e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
 8003e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e96:	643b      	str	r3, [r7, #64]	; 0x40
 8003e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea0:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eac:	fa92 f2a2 	rbit	r2, r2
 8003eb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb4:	fab2 f282 	clz	r2, r2
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	f042 0220 	orr.w	r2, r2, #32
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	f002 021f 	and.w	r2, r2, #31
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d13a      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b2      	b.n	800403a <HAL_RCC_ClockConfig+0x2de>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d102      	bne.n	8003efc <HAL_RCC_ClockConfig+0x1a0>
 8003ef6:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	e00d      	b.n	8003f18 <HAL_RCC_ClockConfig+0x1bc>
 8003efc:	2302      	movs	r3, #2
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	2302      	movs	r3, #2
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2202      	movs	r2, #2
 8003f1a:	61ba      	str	r2, [r7, #24]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	617a      	str	r2, [r7, #20]
  return result;
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	fab2 f282 	clz	r2, r2
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	f042 0220 	orr.w	r2, r2, #32
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	f002 021f 	and.w	r2, r2, #31
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e079      	b.n	800403a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	491a      	ldr	r1, [pc, #104]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fc fe10 	bl	8000b7c <HAL_GetTick>
 8003f5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fc fe0c 	bl	8000b7c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e061      	b.n	800403a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_RCC_ClockConfig+0x260>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d214      	bcs.n	8003fc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <HAL_RCC_ClockConfig+0x25c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e040      	b.n	800403a <HAL_RCC_ClockConfig+0x2de>
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_RCC_ClockConfig+0x2e8>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	491a      	ldr	r1, [pc, #104]	; (8004044 <HAL_RCC_ClockConfig+0x2e8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fea:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_RCC_ClockConfig+0x2e8>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4912      	ldr	r1, [pc, #72]	; (8004044 <HAL_RCC_ClockConfig+0x2e8>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ffe:	f000 f829 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 8004002:	4601      	mov	r1, r0
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_RCC_ClockConfig+0x2e8>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400c:	22f0      	movs	r2, #240	; 0xf0
 800400e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	fa92 f2a2 	rbit	r2, r2
 8004016:	60fa      	str	r2, [r7, #12]
  return result;
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	fab2 f282 	clz	r2, r2
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	40d3      	lsrs	r3, r2
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x2ec>)
 8004024:	5cd3      	ldrb	r3, [r2, r3]
 8004026:	fa21 f303 	lsr.w	r3, r1, r3
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <HAL_RCC_ClockConfig+0x2f0>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_RCC_ClockConfig+0x2f4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fc fc6c 	bl	8000910 <HAL_InitTick>
  
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3778      	adds	r7, #120	; 0x78
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	0800c730 	.word	0x0800c730
 800404c:	20000000 	.word	0x20000000
 8004050:	20000004 	.word	0x20000004

08004054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b08b      	sub	sp, #44	; 0x2c
 8004058:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800406e:	4b29      	ldr	r3, [pc, #164]	; (8004114 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b04      	cmp	r3, #4
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x30>
 800407e:	2b08      	cmp	r3, #8
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x36>
 8004082:	e03c      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004086:	623b      	str	r3, [r7, #32]
      break;
 8004088:	e03c      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004090:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004094:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	fa92 f2a2 	rbit	r2, r2
 800409c:	607a      	str	r2, [r7, #4]
  return result;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	fab2 f282 	clz	r2, r2
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	40d3      	lsrs	r3, r2
 80040a8:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_RCC_GetSysClockFreq+0xc8>)
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040ae:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	220f      	movs	r2, #15
 80040b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	fa92 f2a2 	rbit	r2, r2
 80040c0:	60fa      	str	r2, [r7, #12]
  return result;
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	fab2 f282 	clz	r2, r2
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	40d3      	lsrs	r3, r2
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040ce:	5cd3      	ldrb	r3, [r2, r3]
 80040d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040dc:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	e004      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	623b      	str	r3, [r7, #32]
      break;
 80040fc:	e002      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004100:	623b      	str	r3, [r7, #32]
      break;
 8004102:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004104:	6a3b      	ldr	r3, [r7, #32]
}
 8004106:	4618      	mov	r0, r3
 8004108:	372c      	adds	r7, #44	; 0x2c
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	007a1200 	.word	0x007a1200
 800411c:	0800c748 	.word	0x0800c748
 8004120:	0800c758 	.word	0x0800c758
 8004124:	003d0900 	.word	0x003d0900

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_RCC_GetHCLKFreq+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000000 	.word	0x20000000

08004140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004146:	f7ff ffef 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 800414a:	4601      	mov	r1, r0
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004154:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004158:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	fa92 f2a2 	rbit	r2, r2
 8004160:	603a      	str	r2, [r7, #0]
  return result;
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	fab2 f282 	clz	r2, r2
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	40d3      	lsrs	r3, r2
 800416c:	4a04      	ldr	r2, [pc, #16]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x40>)
 800416e:	5cd3      	ldrb	r3, [r2, r3]
 8004170:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	0800c740 	.word	0x0800c740

08004184 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	220f      	movs	r2, #15
 8004192:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0203 	and.w	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_GetClockConfig+0x5c>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	08db      	lsrs	r3, r3, #3
 80041be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_RCC_GetClockConfig+0x60>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0207 	and.w	r2, r3, #7
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	601a      	str	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40022000 	.word	0x40022000

080041e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b092      	sub	sp, #72	; 0x48
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80d4 	beq.w	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420c:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10e      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a4a      	ldr	r2, [pc, #296]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	61d3      	str	r3, [r2, #28]
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b45      	ldr	r3, [pc, #276]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d118      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004242:	4b42      	ldr	r3, [pc, #264]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a41      	ldr	r2, [pc, #260]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424e:	f7fc fc95 	bl	8000b7c <HAL_GetTick>
 8004252:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	e008      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004256:	f7fc fc91 	bl	8000b7c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b64      	cmp	r3, #100	; 0x64
 8004262:	d901      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e169      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	4b38      	ldr	r3, [pc, #224]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004274:	4b34      	ldr	r3, [pc, #208]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8084 	beq.w	800438e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004290:	429a      	cmp	r2, r3
 8004292:	d07c      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	461a      	mov	r2, r3
 80042be:	2301      	movs	r3, #1
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	461a      	mov	r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04b      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fc fc41 	bl	8000b7c <HAL_GetTick>
 80042fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fc fc3d 	bl	8000b7c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e113      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004314:	2302      	movs	r3, #2
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
 8004320:	2302      	movs	r3, #2
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	fa93 f3a3 	rbit	r3, r3
 800432a:	61fb      	str	r3, [r7, #28]
  return result;
 800432c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d108      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004342:	4b01      	ldr	r3, [pc, #4]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	e00d      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004348:	40021000 	.word	0x40021000
 800434c:	40007000 	.word	0x40007000
 8004350:	10908100 	.word	0x10908100
 8004354:	2302      	movs	r3, #2
 8004356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	4b78      	ldr	r3, [pc, #480]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2202      	movs	r2, #2
 8004366:	613a      	str	r2, [r7, #16]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	fa92 f2a2 	rbit	r2, r2
 800436e:	60fa      	str	r2, [r7, #12]
  return result;
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	fab2 f282 	clz	r2, r2
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f002 021f 	and.w	r2, r2, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0b7      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	496a      	ldr	r1, [pc, #424]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800439c:	4313      	orrs	r3, r2
 800439e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b66      	ldr	r3, [pc, #408]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	4a65      	ldr	r2, [pc, #404]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043c0:	4b60      	ldr	r3, [pc, #384]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	f023 0203 	bic.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	495d      	ldr	r1, [pc, #372]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043de:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4956      	ldr	r1, [pc, #344]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043fc:	4b51      	ldr	r3, [pc, #324]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	494e      	ldr	r1, [pc, #312]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800441a:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f023 0210 	bic.w	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4947      	ldr	r1, [pc, #284]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004428:	4313      	orrs	r3, r2
 800442a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	493f      	ldr	r1, [pc, #252]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004446:	4313      	orrs	r3, r2
 8004448:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004456:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f023 0220 	bic.w	r2, r3, #32
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4938      	ldr	r1, [pc, #224]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	4930      	ldr	r1, [pc, #192]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004492:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	4929      	ldr	r1, [pc, #164]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4921      	ldr	r1, [pc, #132]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	491a      	ldr	r1, [pc, #104]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	4912      	ldr	r1, [pc, #72]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	490b      	ldr	r1, [pc, #44]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004518:	4313      	orrs	r3, r2
 800451a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3748      	adds	r7, #72	; 0x48
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000

08004548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e09d      	b.n	8004696 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800456a:	d009      	beq.n	8004580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	61da      	str	r2, [r3, #28]
 8004572:	e005      	b.n	8004580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc f976 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c0:	d902      	bls.n	80045c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e002      	b.n	80045ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045d6:	d007      	beq.n	80045e8 <HAL_SPI_Init+0xa0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	ea42 0103 	orr.w	r1, r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	f003 0204 	and.w	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004684:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e049      	b.n	8004744 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f841 	bl	800474c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3304      	adds	r3, #4
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f000 f9f1 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d001      	beq.n	8004778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e04a      	b.n	800480e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a21      	ldr	r2, [pc, #132]	; (800481c <HAL_TIM_Base_Start_IT+0xbc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x6c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a2:	d013      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x6c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_TIM_Base_Start_IT+0xc0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x6c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_TIM_Base_Start_IT+0xc4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x6c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <HAL_TIM_Base_Start_IT+0xc8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x6c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_TIM_Base_Start_IT+0xcc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d115      	bne.n	80047f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <HAL_TIM_Base_Start_IT+0xd0>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d015      	beq.n	800480a <HAL_TIM_Base_Start_IT+0xaa>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d011      	beq.n	800480a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f6:	e008      	b.n	800480a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e000      	b.n	800480c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40013400 	.word	0x40013400
 800482c:	40014000 	.word	0x40014000
 8004830:	00010007 	.word	0x00010007

08004834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b02      	cmp	r3, #2
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b02      	cmp	r3, #2
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0202 	mvn.w	r2, #2
 8004860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f905 	bl	8004a86 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8f7 	bl	8004a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f908 	bl	8004a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b04      	cmp	r3, #4
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0204 	mvn.w	r2, #4
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8db 	bl	8004a86 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8cd 	bl	8004a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8de 	bl	8004a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0208 	mvn.w	r2, #8
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2204      	movs	r2, #4
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8b1 	bl	8004a86 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8a3 	bl	8004a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8b4 	bl	8004a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b10      	cmp	r3, #16
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b10      	cmp	r3, #16
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0210 	mvn.w	r2, #16
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2208      	movs	r2, #8
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f887 	bl	8004a86 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f879 	bl	8004a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f88a 	bl	8004a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0201 	mvn.w	r2, #1
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fb fee6 	bl	8000784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b80      	cmp	r3, #128	; 0x80
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f90a 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f2:	d10e      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d107      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f8fd 	bl	8004c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d10e      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d107      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f838 	bl	8004aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d10e      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f06f 0220 	mvn.w	r2, #32
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8bd 	bl	8004be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3c      	ldr	r2, [pc, #240]	; (8004bc8 <TIM_Base_SetConfig+0x104>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae2:	d00b      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a39      	ldr	r2, [pc, #228]	; (8004bcc <TIM_Base_SetConfig+0x108>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a38      	ldr	r2, [pc, #224]	; (8004bd0 <TIM_Base_SetConfig+0x10c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_Base_SetConfig+0x38>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a37      	ldr	r2, [pc, #220]	; (8004bd4 <TIM_Base_SetConfig+0x110>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d108      	bne.n	8004b0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2d      	ldr	r2, [pc, #180]	; (8004bc8 <TIM_Base_SetConfig+0x104>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01b      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1c:	d017      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2a      	ldr	r2, [pc, #168]	; (8004bcc <TIM_Base_SetConfig+0x108>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <TIM_Base_SetConfig+0x10c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <TIM_Base_SetConfig+0x110>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a27      	ldr	r2, [pc, #156]	; (8004bd8 <TIM_Base_SetConfig+0x114>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a26      	ldr	r2, [pc, #152]	; (8004bdc <TIM_Base_SetConfig+0x118>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <TIM_Base_SetConfig+0x11c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <TIM_Base_SetConfig+0x104>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a11      	ldr	r2, [pc, #68]	; (8004bd4 <TIM_Base_SetConfig+0x110>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <TIM_Base_SetConfig+0x114>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a0f      	ldr	r2, [pc, #60]	; (8004bdc <TIM_Base_SetConfig+0x118>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0xe8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <TIM_Base_SetConfig+0x11c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d103      	bne.n	8004bb4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	615a      	str	r2, [r3, #20]
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c56:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c84:	b084      	sub	sp, #16
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	f107 0014 	add.w	r0, r7, #20
 8004c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	b004      	add	sp, #16
 8004cc4:	4770      	bx	lr
	...

08004cc8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b09d      	sub	sp, #116	; 0x74
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	78db      	ldrb	r3, [r3, #3]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d81f      	bhi.n	8004d3a <USB_ActivateEndpoint+0x72>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <USB_ActivateEndpoint+0x38>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	08004d43 	.word	0x08004d43
 8004d0c:	08004d1f 	.word	0x08004d1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d1c:	e012      	b.n	8004d44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d1e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d2a:	e00b      	b.n	8004d44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d38:	e004      	b.n	8004d44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004d40:	e000      	b.n	8004d44 <USB_ActivateEndpoint+0x7c>
      break;
 8004d42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	b21b      	sxth	r3, r3
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	b21a      	sxth	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	4313      	orrs	r3, r2
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	7b1b      	ldrb	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 8178 	bne.w	80050aa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8084 	beq.w	8004ecc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	88db      	ldrh	r3, [r3, #6]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	827b      	strh	r3, [r7, #18]
 8004e06:	8a7b      	ldrh	r3, [r7, #18]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <USB_ActivateEndpoint+0x180>
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	823b      	strh	r3, [r7, #16]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	8a3b      	ldrh	r3, [r7, #16]
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d020      	beq.n	8004e92 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e66:	81bb      	strh	r3, [r7, #12]
 8004e68:	89bb      	ldrh	r3, [r7, #12]
 8004e6a:	f083 0320 	eor.w	r3, r3, #32
 8004e6e:	81bb      	strh	r3, [r7, #12]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	89bb      	ldrh	r3, [r7, #12]
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]
 8004e90:	e2d5      	b.n	800543e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea8:	81fb      	strh	r3, [r7, #14]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	8013      	strh	r3, [r2, #0]
 8004eca:	e2b8      	b.n	800543e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	4413      	add	r3, r2
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	88db      	ldrh	r3, [r3, #6]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	4413      	add	r3, r2
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3a:	d91d      	bls.n	8004f78 <USB_ActivateEndpoint+0x2b0>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <USB_ActivateEndpoint+0x28e>
 8004f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f52:	3b01      	subs	r3, #1
 8004f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	e026      	b.n	8004fc6 <USB_ActivateEndpoint+0x2fe>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <USB_ActivateEndpoint+0x2ce>
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e017      	b.n	8004fc6 <USB_ActivateEndpoint+0x2fe>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <USB_ActivateEndpoint+0x2e8>
 8004faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fac:	3301      	adds	r3, #1
 8004fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	029b      	lsls	r3, r3, #10
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <USB_ActivateEndpoint+0x34e>
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	843b      	strh	r3, [r7, #32]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	8c3b      	ldrh	r3, [r7, #32]
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d124      	bne.n	8005068 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005034:	83bb      	strh	r3, [r7, #28]
 8005036:	8bbb      	ldrh	r3, [r7, #28]
 8005038:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800503c:	83bb      	strh	r3, [r7, #28]
 800503e:	8bbb      	ldrh	r3, [r7, #28]
 8005040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005044:	83bb      	strh	r3, [r7, #28]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	8bbb      	ldrh	r3, [r7, #28]
 8005052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]
 8005066:	e1ea      	b.n	800543e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	83fb      	strh	r3, [r7, #30]
 8005080:	8bfb      	ldrh	r3, [r7, #30]
 8005082:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005086:	83fb      	strh	r3, [r7, #30]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	8bfb      	ldrh	r3, [r7, #30]
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]
 80050a8:	e1c9      	b.n	800543e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	78db      	ldrb	r3, [r3, #3]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d11e      	bne.n	80050f0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
 80050ee:	e01d      	b.n	800512c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	441a      	add	r2, r3
 8005114:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	b29b      	uxth	r3, r3
 800512a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800513c:	4413      	add	r3, r2
 800513e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005148:	4413      	add	r3, r2
 800514a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	891b      	ldrh	r3, [r3, #8]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	b29b      	uxth	r3, r3
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005170:	4413      	add	r3, r2
 8005172:	657b      	str	r3, [r7, #84]	; 0x54
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	011a      	lsls	r2, r3, #4
 800517a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800517c:	4413      	add	r3, r2
 800517e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005182:	653b      	str	r3, [r7, #80]	; 0x50
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	895b      	ldrh	r3, [r3, #10]
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	b29b      	uxth	r3, r3
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005192:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 8093 	bne.w	80052c4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <USB_ActivateEndpoint+0x52a>
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005200:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01b      	beq.n	8005242 <USB_ActivateEndpoint+0x57a>
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005220:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	441a      	add	r2, r3
 800522c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800522e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800523e:	b29b      	uxth	r3, r3
 8005240:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	873b      	strh	r3, [r7, #56]	; 0x38
 800525a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800525c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005260:	873b      	strh	r3, [r7, #56]	; 0x38
 8005262:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005268:	873b      	strh	r3, [r7, #56]	; 0x38
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	441a      	add	r2, r3
 8005274:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005286:	b29b      	uxth	r3, r3
 8005288:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
 80052c2:	e0bc      	b.n	800543e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80052d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01d      	beq.n	800531c <USB_ActivateEndpoint+0x654>
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800532c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01d      	beq.n	8005374 <USB_ActivateEndpoint+0x6ac>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	78db      	ldrb	r3, [r3, #3]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d024      	beq.n	80053c6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005392:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005396:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800539a:	f083 0320 	eor.w	r3, r3, #32
 800539e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]
 80053c4:	e01d      	b.n	8005402 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	441a      	add	r2, r3
 80053ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005418:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800543e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005442:	4618      	mov	r0, r3
 8005444:	3774      	adds	r7, #116	; 0x74
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005450:	b480      	push	{r7}
 8005452:	b08d      	sub	sp, #52	; 0x34
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	7b1b      	ldrb	r3, [r3, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f040 808e 	bne.w	8005580 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d044      	beq.n	80054f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	81bb      	strh	r3, [r7, #12]
 800547a:	89bb      	ldrh	r3, [r7, #12]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <USB_DeactivateEndpoint+0x6c>
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	817b      	strh	r3, [r7, #10]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d2:	813b      	strh	r3, [r7, #8]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]
 80054f4:	e192      	b.n	800581c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	827b      	strh	r3, [r7, #18]
 8005504:	8a7b      	ldrh	r3, [r7, #18]
 8005506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01b      	beq.n	8005546 <USB_DeactivateEndpoint+0xf6>
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005524:	823b      	strh	r3, [r7, #16]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	441a      	add	r2, r3
 8005530:	8a3b      	ldrh	r3, [r7, #16]
 8005532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005542:	b29b      	uxth	r3, r3
 8005544:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	81fb      	strh	r3, [r7, #14]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]
 800557e:	e14d      	b.n	800581c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 80a5 	bne.w	80056d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	843b      	strh	r3, [r7, #32]
 8005598:	8c3b      	ldrh	r3, [r7, #32]
 800559a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01b      	beq.n	80055da <USB_DeactivateEndpoint+0x18a>
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	83fb      	strh	r3, [r7, #30]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	441a      	add	r2, r3
 80055c4:	8bfb      	ldrh	r3, [r7, #30]
 80055c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	83bb      	strh	r3, [r7, #28]
 80055e8:	8bbb      	ldrh	r3, [r7, #28]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01b      	beq.n	800562a <USB_DeactivateEndpoint+0x1da>
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005608:	837b      	strh	r3, [r7, #26]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	8b7b      	ldrh	r3, [r7, #26]
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	833b      	strh	r3, [r7, #24]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	8b3b      	ldrh	r3, [r7, #24]
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	82fb      	strh	r3, [r7, #22]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	8afb      	ldrh	r3, [r7, #22]
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b0:	82bb      	strh	r3, [r7, #20]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	441a      	add	r2, r3
 80056bc:	8abb      	ldrh	r3, [r7, #20]
 80056be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]
 80056d2:	e0a3      	b.n	800581c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <USB_DeactivateEndpoint+0x2d4>
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	441a      	add	r2, r3
 800570e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005720:	b29b      	uxth	r3, r3
 8005722:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005732:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01b      	beq.n	8005774 <USB_DeactivateEndpoint+0x324>
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	853b      	strh	r3, [r7, #40]	; 0x28
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	441a      	add	r2, r3
 8005806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3734      	adds	r7, #52	; 0x34
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b0c2      	sub	sp, #264	; 0x108
 800582e:	af00      	add	r7, sp, #0
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005838:	6018      	str	r0, [r3, #0]
 800583a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005842:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b01      	cmp	r3, #1
 8005852:	f040 86b7 	bne.w	80065c4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	d908      	bls.n	8005884 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005882:	e007      	b.n	8005894 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	7b1b      	ldrb	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d13a      	bne.n	800591a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6959      	ldr	r1, [r3, #20]
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	88da      	ldrh	r2, [r3, #6]
 80058bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	f001 fc8c 	bl	80071e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4413      	add	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	011a      	lsls	r2, r3, #4
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	f000 be1f 	b.w	8006558 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800591a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	78db      	ldrb	r3, [r3, #3]
 8005926:	2b02      	cmp	r3, #2
 8005928:	f040 8462 	bne.w	80061f0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	429a      	cmp	r2, r3
 8005946:	f240 83df 	bls.w	8006108 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800599e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a1a      	ldr	r2, [r3, #32]
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b6:	1ad2      	subs	r2, r2, r3
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 81c7 	beq.w	8005d7a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d177      	bne.n	8005af8 <USB_EPStartXfer+0x2ce>
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	4413      	add	r3, r2
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	011a      	lsls	r2, r3, #4
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a58:	2b3e      	cmp	r3, #62	; 0x3e
 8005a5a:	d921      	bls.n	8005aa0 <USB_EPStartXfer+0x276>
 8005a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <USB_EPStartXfer+0x252>
 8005a72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a76:	3b01      	subs	r3, #1
 8005a78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e050      	b.n	8005b42 <USB_EPStartXfer+0x318>
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <USB_EPStartXfer+0x294>
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e041      	b.n	8005b42 <USB_EPStartXfer+0x318>
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <USB_EPStartXfer+0x2b4>
 8005ad4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ad8:	3301      	adds	r3, #1
 8005ada:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	029b      	lsls	r3, r3, #10
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4313      	orrs	r3, r2
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e024      	b.n	8005b42 <USB_EPStartXfer+0x318>
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d11c      	bne.n	8005b42 <USB_EPStartXfer+0x318>
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	4413      	add	r3, r2
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	011a      	lsls	r2, r3, #4
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	4413      	add	r3, r2
 8005b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	895b      	ldrh	r3, [r3, #10]
 8005b4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6959      	ldr	r1, [r3, #20]
 8005b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b70:	6800      	ldr	r0, [r0, #0]
 8005b72:	f001 fb39 	bl	80071e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b86:	441a      	add	r2, r3
 8005b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d90f      	bls.n	8005bd0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc0:	1ad2      	subs	r2, r2, r3
 8005bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	621a      	str	r2, [r3, #32]
 8005bce:	e00e      	b.n	8005bee <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d177      	bne.n	8005cee <USB_EPStartXfer+0x4c4>
 8005bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	4413      	add	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	011a      	lsls	r2, r3, #4
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	4413      	add	r3, r2
 8005c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c50:	d921      	bls.n	8005c96 <USB_EPStartXfer+0x46c>
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d104      	bne.n	8005c72 <USB_EPStartXfer+0x448>
 8005c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	029b      	lsls	r3, r3, #10
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e056      	b.n	8005d44 <USB_EPStartXfer+0x51a>
 8005c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <USB_EPStartXfer+0x48a>
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e047      	b.n	8005d44 <USB_EPStartXfer+0x51a>
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <USB_EPStartXfer+0x4aa>
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	e02a      	b.n	8005d44 <USB_EPStartXfer+0x51a>
 8005cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d122      	bne.n	8005d44 <USB_EPStartXfer+0x51a>
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	4413      	add	r3, r2
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	011a      	lsls	r2, r3, #4
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	4413      	add	r3, r2
 8005d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	891b      	ldrh	r3, [r3, #8]
 8005d50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6959      	ldr	r1, [r3, #20]
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d72:	6800      	ldr	r0, [r0, #0]
 8005d74:	f001 fa38 	bl	80071e8 <USB_WritePMA>
 8005d78:	e3ee      	b.n	8006558 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d177      	bne.n	8005e7a <USB_EPStartXfer+0x650>
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005daa:	4413      	add	r3, r2
 8005dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	011a      	lsls	r2, r3, #4
 8005dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	2b3e      	cmp	r3, #62	; 0x3e
 8005ddc:	d921      	bls.n	8005e22 <USB_EPStartXfer+0x5f8>
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <USB_EPStartXfer+0x5d4>
 8005df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	e056      	b.n	8005ed0 <USB_EPStartXfer+0x6a6>
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <USB_EPStartXfer+0x616>
 8005e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	e047      	b.n	8005ed0 <USB_EPStartXfer+0x6a6>
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <USB_EPStartXfer+0x636>
 8005e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	e02a      	b.n	8005ed0 <USB_EPStartXfer+0x6a6>
 8005e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d122      	bne.n	8005ed0 <USB_EPStartXfer+0x6a6>
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	653b      	str	r3, [r7, #80]	; 0x50
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	4413      	add	r3, r2
 8005eac:	653b      	str	r3, [r7, #80]	; 0x50
 8005eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	011a      	lsls	r2, r3, #4
 8005ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ece:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	891b      	ldrh	r3, [r3, #8]
 8005edc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6959      	ldr	r1, [r3, #20]
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ef6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005efa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005efe:	6800      	ldr	r0, [r0, #0]
 8005f00:	f001 f972 	bl	80071e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695a      	ldr	r2, [r3, #20]
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f14:	441a      	add	r2, r3
 8005f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d90f      	bls.n	8005f5e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	621a      	str	r2, [r3, #32]
 8005f5c:	e00e      	b.n	8005f7c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	643b      	str	r3, [r7, #64]	; 0x40
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d177      	bne.n	8006088 <USB_EPStartXfer+0x85e>
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	4413      	add	r3, r2
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	011a      	lsls	r2, r3, #4
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	4413      	add	r3, r2
 8005fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fea:	d921      	bls.n	8006030 <USB_EPStartXfer+0x806>
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <USB_EPStartXfer+0x7e2>
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	3b01      	subs	r3, #1
 8006008:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29a      	uxth	r2, r3
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	b29b      	uxth	r3, r3
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	b29b      	uxth	r3, r3
 800601c:	4313      	orrs	r3, r2
 800601e:	b29b      	uxth	r3, r3
 8006020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006028:	b29a      	uxth	r2, r3
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	e050      	b.n	80060d2 <USB_EPStartXfer+0x8a8>
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <USB_EPStartXfer+0x824>
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e041      	b.n	80060d2 <USB_EPStartXfer+0x8a8>
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <USB_EPStartXfer+0x844>
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	3301      	adds	r3, #1
 800606a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29b      	uxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b29a      	uxth	r2, r3
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e024      	b.n	80060d2 <USB_EPStartXfer+0x8a8>
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d11c      	bne.n	80060d2 <USB_EPStartXfer+0x8a8>
 8006098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ac:	4413      	add	r3, r2
 80060ae:	643b      	str	r3, [r7, #64]	; 0x40
 80060b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	011a      	lsls	r2, r3, #4
 80060be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	895b      	ldrh	r3, [r3, #10]
 80060de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6959      	ldr	r1, [r3, #20]
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006100:	6800      	ldr	r0, [r0, #0]
 8006102:	f001 f871 	bl	80071e8 <USB_WritePMA>
 8006106:	e227      	b.n	8006558 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006170:	b29b      	uxth	r3, r3
 8006172:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618e:	b29b      	uxth	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006194:	4413      	add	r3, r2
 8006196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	011a      	lsls	r2, r3, #4
 80061a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a8:	4413      	add	r3, r2
 80061aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	891b      	ldrh	r3, [r3, #8]
 80061c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6959      	ldr	r1, [r3, #20]
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061e8:	6800      	ldr	r0, [r0, #0]
 80061ea:	f000 fffd 	bl	80071e8 <USB_WritePMA>
 80061ee:	e1b3      	b.n	8006558 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800620e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80c6 	beq.w	80063c2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	673b      	str	r3, [r7, #112]	; 0x70
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d177      	bne.n	8006342 <USB_EPStartXfer+0xb18>
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	66bb      	str	r3, [r7, #104]	; 0x68
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006272:	4413      	add	r3, r2
 8006274:	66bb      	str	r3, [r7, #104]	; 0x68
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	011a      	lsls	r2, r3, #4
 8006284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006286:	4413      	add	r3, r2
 8006288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800628c:	667b      	str	r3, [r7, #100]	; 0x64
 800628e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006298:	b29a      	uxth	r2, r3
 800629a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a2:	2b3e      	cmp	r3, #62	; 0x3e
 80062a4:	d921      	bls.n	80062ea <USB_EPStartXfer+0xac0>
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <USB_EPStartXfer+0xa9c>
 80062bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062c0:	3b01      	subs	r3, #1
 80062c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	e050      	b.n	800638c <USB_EPStartXfer+0xb62>
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <USB_EPStartXfer+0xade>
 80062f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e041      	b.n	800638c <USB_EPStartXfer+0xb62>
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <USB_EPStartXfer+0xafe>
 800631e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006322:	3301      	adds	r3, #1
 8006324:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006332:	b29b      	uxth	r3, r3
 8006334:	029b      	lsls	r3, r3, #10
 8006336:	b29b      	uxth	r3, r3
 8006338:	4313      	orrs	r3, r2
 800633a:	b29a      	uxth	r2, r3
 800633c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	e024      	b.n	800638c <USB_EPStartXfer+0xb62>
 8006342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d11c      	bne.n	800638c <USB_EPStartXfer+0xb62>
 8006352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006366:	4413      	add	r3, r2
 8006368:	673b      	str	r3, [r7, #112]	; 0x70
 800636a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	011a      	lsls	r2, r3, #4
 8006378:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800637a:	4413      	add	r3, r2
 800637c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006380:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006386:	b29a      	uxth	r2, r3
 8006388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	895b      	ldrh	r3, [r3, #10]
 8006398:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6959      	ldr	r1, [r3, #20]
 80063a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063ba:	6800      	ldr	r0, [r0, #0]
 80063bc:	f000 ff14 	bl	80071e8 <USB_WritePMA>
 80063c0:	e0ca      	b.n	8006558 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d177      	bne.n	80064c2 <USB_EPStartXfer+0xc98>
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063f2:	4413      	add	r3, r2
 80063f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	011a      	lsls	r2, r3, #4
 8006404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006406:	4413      	add	r3, r2
 8006408:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800640c:	67bb      	str	r3, [r7, #120]	; 0x78
 800640e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006418:	b29a      	uxth	r2, r3
 800641a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006422:	2b3e      	cmp	r3, #62	; 0x3e
 8006424:	d921      	bls.n	800646a <USB_EPStartXfer+0xc40>
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <USB_EPStartXfer+0xc1c>
 800643c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006440:	3b01      	subs	r3, #1
 8006442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006450:	b29b      	uxth	r3, r3
 8006452:	029b      	lsls	r3, r3, #10
 8006454:	b29b      	uxth	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e05c      	b.n	8006524 <USB_EPStartXfer+0xcfa>
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <USB_EPStartXfer+0xc5e>
 8006472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006480:	b29a      	uxth	r2, r3
 8006482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	e04d      	b.n	8006524 <USB_EPStartXfer+0xcfa>
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <USB_EPStartXfer+0xc7e>
 800649e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064a2:	3301      	adds	r3, #1
 80064a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e030      	b.n	8006524 <USB_EPStartXfer+0xcfa>
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d128      	bne.n	8006524 <USB_EPStartXfer+0xcfa>
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064f6:	4413      	add	r3, r2
 80064f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	011a      	lsls	r2, r3, #4
 800650a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800650e:	4413      	add	r3, r2
 8006510:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	b29a      	uxth	r2, r3
 800651e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006522:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	891b      	ldrh	r3, [r3, #8]
 8006530:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6959      	ldr	r1, [r3, #20]
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006544:	b29b      	uxth	r3, r3
 8006546:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800654a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800654e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006552:	6800      	ldr	r0, [r0, #0]
 8006554:	f000 fe48 	bl	80071e8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657e:	817b      	strh	r3, [r7, #10]
 8006580:	897b      	ldrh	r3, [r7, #10]
 8006582:	f083 0310 	eor.w	r3, r3, #16
 8006586:	817b      	strh	r3, [r7, #10]
 8006588:	897b      	ldrh	r3, [r7, #10]
 800658a:	f083 0320 	eor.w	r3, r3, #32
 800658e:	817b      	strh	r3, [r7, #10]
 8006590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	897b      	ldrh	r3, [r7, #10]
 80065ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]
 80065c0:	f000 bcde 	b.w	8006f80 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	7b1b      	ldrb	r3, [r3, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 80bb 	bne.w	800674c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d917      	bls.n	8006622 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	619a      	str	r2, [r3, #24]
 8006620:	e00e      	b.n	8006640 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2200      	movs	r2, #0
 800663e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665c:	b29b      	uxth	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006664:	4413      	add	r3, r2
 8006666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800666a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	011a      	lsls	r2, r3, #4
 8006678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800667c:	4413      	add	r3, r2
 800667e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006692:	b29a      	uxth	r2, r3
 8006694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669e:	2b3e      	cmp	r3, #62	; 0x3e
 80066a0:	d924      	bls.n	80066ec <USB_EPStartXfer+0xec2>
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <USB_EPStartXfer+0xe98>
 80066b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066bc:	3b01      	subs	r3, #1
 80066be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	029b      	lsls	r3, r3, #10
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	f000 bc10 	b.w	8006f0c <USB_EPStartXfer+0x16e2>
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10c      	bne.n	800670e <USB_EPStartXfer+0xee4>
 80066f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006704:	b29a      	uxth	r2, r3
 8006706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	e3fe      	b.n	8006f0c <USB_EPStartXfer+0x16e2>
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <USB_EPStartXfer+0xf04>
 8006724:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006728:	3301      	adds	r3, #1
 800672a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800672e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800673a:	b29b      	uxth	r3, r3
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	b29b      	uxth	r3, r3
 8006740:	4313      	orrs	r3, r2
 8006742:	b29a      	uxth	r2, r3
 8006744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	e3df      	b.n	8006f0c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800674c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	78db      	ldrb	r3, [r3, #3]
 8006758:	2b02      	cmp	r3, #2
 800675a:	f040 8218 	bne.w	8006b8e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 809d 	bne.w	80068aa <USB_EPStartXfer+0x1080>
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006794:	4413      	add	r3, r2
 8006796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	011a      	lsls	r2, r3, #4
 80067a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b3e      	cmp	r3, #62	; 0x3e
 80067d8:	d92b      	bls.n	8006832 <USB_EPStartXfer+0x1008>
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <USB_EPStartXfer+0xfe0>
 8006800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006804:	3b01      	subs	r3, #1
 8006806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800680a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29b      	uxth	r3, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	e070      	b.n	8006914 <USB_EPStartXfer+0x10ea>
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10c      	bne.n	800685c <USB_EPStartXfer+0x1032>
 8006842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006852:	b29a      	uxth	r2, r3
 8006854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	e05b      	b.n	8006914 <USB_EPStartXfer+0x10ea>
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800686e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d004      	beq.n	800688c <USB_EPStartXfer+0x1062>
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	3301      	adds	r3, #1
 8006888:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800688c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29a      	uxth	r2, r3
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006898:	b29b      	uxth	r3, r3
 800689a:	029b      	lsls	r3, r3, #10
 800689c:	b29b      	uxth	r3, r3
 800689e:	4313      	orrs	r3, r2
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	e034      	b.n	8006914 <USB_EPStartXfer+0x10ea>
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d12c      	bne.n	8006914 <USB_EPStartXfer+0x10ea>
 80068ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068de:	4413      	add	r3, r2
 80068e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068f6:	4413      	add	r3, r2
 80068f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	b29a      	uxth	r2, r3
 800690e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006912:	801a      	strh	r2, [r3, #0]
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 809d 	bne.w	8006a6e <USB_EPStartXfer+0x1244>
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006958:	4413      	add	r3, r2
 800695a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	011a      	lsls	r2, r3, #4
 800696c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006970:	4413      	add	r3, r2
 8006972:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006976:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800697a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006986:	b29a      	uxth	r2, r3
 8006988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b3e      	cmp	r3, #62	; 0x3e
 800699c:	d92b      	bls.n	80069f6 <USB_EPStartXfer+0x11cc>
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <USB_EPStartXfer+0x11a4>
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c8:	3b01      	subs	r3, #1
 80069ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069da:	b29b      	uxth	r3, r3
 80069dc:	029b      	lsls	r3, r3, #10
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4313      	orrs	r3, r2
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e069      	b.n	8006aca <USB_EPStartXfer+0x12a0>
 80069f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10c      	bne.n	8006a20 <USB_EPStartXfer+0x11f6>
 8006a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e054      	b.n	8006aca <USB_EPStartXfer+0x12a0>
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <USB_EPStartXfer+0x1226>
 8006a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	029b      	lsls	r3, r3, #10
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4313      	orrs	r3, r2
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e02d      	b.n	8006aca <USB_EPStartXfer+0x12a0>
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d125      	bne.n	8006aca <USB_EPStartXfer+0x12a0>
 8006a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a94:	4413      	add	r3, r2
 8006a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	011a      	lsls	r2, r3, #4
 8006aa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006aac:	4413      	add	r3, r2
 8006aae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ac8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8218 	beq.w	8006f0c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006afc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <USB_EPStartXfer+0x12ea>
 8006b08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10d      	bne.n	8006b30 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 81f5 	bne.w	8006f0c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 81ee 	bne.w	8006f0c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b56:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	441a      	add	r2, r3
 8006b74:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	8013      	strh	r3, [r2, #0]
 8006b8c:	e1be      	b.n	8006f0c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	78db      	ldrb	r3, [r3, #3]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	f040 81b4 	bne.w	8006f08 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d917      	bls.n	8006bec <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699a      	ldr	r2, [r3, #24]
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	1ad2      	subs	r2, r2, r3
 8006bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	619a      	str	r2, [r3, #24]
 8006bea:	e00e      	b.n	8006c0a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f040 8085 	bne.w	8006d26 <USB_EPStartXfer+0x14fc>
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c40:	4413      	add	r3, r2
 8006c42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	011a      	lsls	r2, r3, #4
 8006c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c58:	4413      	add	r3, r2
 8006c5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c7c:	d923      	bls.n	8006cc6 <USB_EPStartXfer+0x149c>
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <USB_EPStartXfer+0x1474>
 8006c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	029b      	lsls	r3, r3, #10
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e060      	b.n	8006d88 <USB_EPStartXfer+0x155e>
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10c      	bne.n	8006ce8 <USB_EPStartXfer+0x14be>
 8006cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	e04f      	b.n	8006d88 <USB_EPStartXfer+0x155e>
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <USB_EPStartXfer+0x14de>
 8006cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d02:	3301      	adds	r3, #1
 8006d04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	029b      	lsls	r3, r3, #10
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e030      	b.n	8006d88 <USB_EPStartXfer+0x155e>
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d128      	bne.n	8006d88 <USB_EPStartXfer+0x155e>
 8006d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	011a      	lsls	r2, r3, #4
 8006d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d72:	4413      	add	r3, r2
 8006d74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 8085 	bne.w	8006eb2 <USB_EPStartXfer+0x1688>
 8006da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dcc:	4413      	add	r3, r2
 8006dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	011a      	lsls	r2, r3, #4
 8006de0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de4:	4413      	add	r3, r2
 8006de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e06:	2b3e      	cmp	r3, #62	; 0x3e
 8006e08:	d923      	bls.n	8006e52 <USB_EPStartXfer+0x1628>
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <USB_EPStartXfer+0x1600>
 8006e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e24:	3b01      	subs	r3, #1
 8006e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	029b      	lsls	r3, r3, #10
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e05c      	b.n	8006f0c <USB_EPStartXfer+0x16e2>
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <USB_EPStartXfer+0x164a>
 8006e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	e04b      	b.n	8006f0c <USB_EPStartXfer+0x16e2>
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <USB_EPStartXfer+0x166a>
 8006e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e8e:	3301      	adds	r3, #1
 8006e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	e02c      	b.n	8006f0c <USB_EPStartXfer+0x16e2>
 8006eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d124      	bne.n	8006f0c <USB_EPStartXfer+0x16e2>
 8006ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ed8:	4413      	add	r3, r2
 8006eda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	011a      	lsls	r2, r3, #4
 8006eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f04:	801a      	strh	r2, [r3, #0]
 8006f06:	e001      	b.n	8006f0c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e03a      	b.n	8006f82 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f3e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb4:	81bb      	strh	r3, [r7, #12]
 8006fb6:	89bb      	ldrh	r3, [r7, #12]
 8006fb8:	f083 0310 	eor.w	r3, r3, #16
 8006fbc:	81bb      	strh	r3, [r7, #12]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	89bb      	ldrh	r3, [r7, #12]
 8006fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	8013      	strh	r3, [r2, #0]
 8006fde:	e01f      	b.n	8007020 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	81fb      	strh	r3, [r7, #14]
 8006ff8:	89fb      	ldrh	r3, [r7, #14]
 8006ffa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ffe:	81fb      	strh	r3, [r7, #14]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	89fb      	ldrh	r3, [r7, #14]
 800700c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	b29b      	uxth	r3, r3
 800701e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800702e:	b480      	push	{r7}
 8007030:	b087      	sub	sp, #28
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	7b1b      	ldrb	r3, [r3, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 809d 	bne.w	800717c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d04c      	beq.n	80070e4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	823b      	strh	r3, [r7, #16]
 8007058:	8a3b      	ldrh	r3, [r7, #16]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01b      	beq.n	800709a <USB_EPClearStall+0x6c>
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007078:	81fb      	strh	r3, [r7, #14]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	441a      	add	r2, r3
 8007084:	89fb      	ldrh	r3, [r7, #14]
 8007086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800708a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800708e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007092:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007096:	b29b      	uxth	r3, r3
 8007098:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	78db      	ldrb	r3, [r3, #3]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d06c      	beq.n	800717c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b8:	81bb      	strh	r3, [r7, #12]
 80070ba:	89bb      	ldrh	r3, [r7, #12]
 80070bc:	f083 0320 	eor.w	r3, r3, #32
 80070c0:	81bb      	strh	r3, [r7, #12]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	441a      	add	r2, r3
 80070cc:	89bb      	ldrh	r3, [r7, #12]
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8013      	strh	r3, [r2, #0]
 80070e2:	e04b      	b.n	800717c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	82fb      	strh	r3, [r7, #22]
 80070f2:	8afb      	ldrh	r3, [r7, #22]
 80070f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01b      	beq.n	8007134 <USB_EPClearStall+0x106>
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	82bb      	strh	r3, [r7, #20]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	8abb      	ldrh	r3, [r7, #20]
 8007120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800712c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007130:	b29b      	uxth	r3, r3
 8007132:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714a:	827b      	strh	r3, [r7, #18]
 800714c:	8a7b      	ldrh	r3, [r7, #18]
 800714e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007152:	827b      	strh	r3, [r7, #18]
 8007154:	8a7b      	ldrh	r3, [r7, #18]
 8007156:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800715a:	827b      	strh	r3, [r7, #18]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	8a7b      	ldrh	r3, [r7, #18]
 8007168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007178:	b29b      	uxth	r3, r3
 800717a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2280      	movs	r2, #128	; 0x80
 80071a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071da:	68fb      	ldr	r3, [r7, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b08b      	sub	sp, #44	; 0x2c
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4611      	mov	r1, r2
 80071f4:	461a      	mov	r2, r3
 80071f6:	460b      	mov	r3, r1
 80071f8:	80fb      	strh	r3, [r7, #6]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071fe:	88bb      	ldrh	r3, [r7, #4]
 8007200:	3301      	adds	r3, #1
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	005a      	lsls	r2, r3, #1
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
 8007220:	e01e      	b.n	8007260 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3301      	adds	r3, #1
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	b21a      	sxth	r2, r3
 8007232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007236:	4313      	orrs	r3, r2
 8007238:	b21b      	sxth	r3, r3
 800723a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	8a7a      	ldrh	r2, [r7, #18]
 8007240:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	3302      	adds	r3, #2
 8007246:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	3302      	adds	r3, #2
 800724c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	3301      	adds	r3, #1
 8007252:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	3301      	adds	r3, #1
 8007258:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	3b01      	subs	r3, #1
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1dd      	bne.n	8007222 <USB_WritePMA+0x3a>
  }
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	372c      	adds	r7, #44	; 0x2c
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007274:	b480      	push	{r7}
 8007276:	b08b      	sub	sp, #44	; 0x2c
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4611      	mov	r1, r2
 8007280:	461a      	mov	r2, r3
 8007282:	460b      	mov	r3, r1
 8007284:	80fb      	strh	r3, [r7, #6]
 8007286:	4613      	mov	r3, r2
 8007288:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800728a:	88bb      	ldrh	r3, [r7, #4]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	b29b      	uxth	r3, r3
 8007290:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	005a      	lsls	r2, r3, #1
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
 80072ac:	e01b      	b.n	80072e6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	3302      	adds	r3, #2
 80072ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3301      	adds	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	0a1b      	lsrs	r3, r3, #8
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	3302      	adds	r3, #2
 80072de:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	3b01      	subs	r3, #1
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e0      	bne.n	80072ae <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80072ec:	88bb      	ldrh	r3, [r7, #4]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	b2da      	uxtb	r2, r3
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	701a      	strb	r2, [r3, #0]
  }
}
 8007308:	bf00      	nop
 800730a:	372c      	adds	r7, #44	; 0x2c
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	7c1b      	ldrb	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d115      	bne.n	8007358 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800732c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007330:	2202      	movs	r2, #2
 8007332:	2181      	movs	r1, #129	; 0x81
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f004 fb2c 	bl	800b992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007344:	2202      	movs	r2, #2
 8007346:	2101      	movs	r1, #1
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f004 fb22 	bl	800b992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007356:	e012      	b.n	800737e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007358:	2340      	movs	r3, #64	; 0x40
 800735a:	2202      	movs	r2, #2
 800735c:	2181      	movs	r1, #129	; 0x81
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f004 fb17 	bl	800b992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2202      	movs	r2, #2
 800736e:	2101      	movs	r1, #1
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f004 fb0e 	bl	800b992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800737e:	2308      	movs	r3, #8
 8007380:	2203      	movs	r2, #3
 8007382:	2182      	movs	r1, #130	; 0x82
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f004 fb04 	bl	800b992 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007390:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007394:	f004 fc26 	bl	800bbe4 <USBD_static_malloc>
 8007398:	4602      	mov	r2, r0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80073aa:	2301      	movs	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
 80073ae:	e026      	b.n	80073fe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7c1b      	ldrb	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e4:	2101      	movs	r1, #1
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f004 fbc5 	bl	800bb76 <USBD_LL_PrepareReceive>
 80073ec:	e007      	b.n	80073fe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073f4:	2340      	movs	r3, #64	; 0x40
 80073f6:	2101      	movs	r1, #1
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f004 fbbc 	bl	800bb76 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007418:	2181      	movs	r1, #129	; 0x81
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f004 fadf 	bl	800b9de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007426:	2101      	movs	r1, #1
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f004 fad8 	bl	800b9de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007436:	2182      	movs	r1, #130	; 0x82
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f004 fad0 	bl	800b9de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745e:	4618      	mov	r0, r3
 8007460:	f004 fbce 	bl	800bc00 <USBD_static_free>
    pdev->pClassData = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007486:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800749c:	2b00      	cmp	r3, #0
 800749e:	d039      	beq.n	8007514 <USBD_CDC_Setup+0x9e>
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d17f      	bne.n	80075a4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	88db      	ldrh	r3, [r3, #6]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d029      	beq.n	8007500 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b25b      	sxtb	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	da11      	bge.n	80074da <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80074c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	88d2      	ldrh	r2, [r2, #6]
 80074c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074ca:	6939      	ldr	r1, [r7, #16]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	88db      	ldrh	r3, [r3, #6]
 80074d0:	461a      	mov	r2, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fa13 	bl	80088fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80074d8:	e06b      	b.n	80075b2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	785a      	ldrb	r2, [r3, #1]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	88db      	ldrh	r3, [r3, #6]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074f0:	6939      	ldr	r1, [r7, #16]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	88db      	ldrh	r3, [r3, #6]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fa2e 	bl	800895a <USBD_CtlPrepareRx>
      break;
 80074fe:	e058      	b.n	80075b2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	7850      	ldrb	r0, [r2, #1]
 800750c:	2200      	movs	r2, #0
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	4798      	blx	r3
      break;
 8007512:	e04e      	b.n	80075b2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b0b      	cmp	r3, #11
 800751a:	d02e      	beq.n	800757a <USBD_CDC_Setup+0x104>
 800751c:	2b0b      	cmp	r3, #11
 800751e:	dc38      	bgt.n	8007592 <USBD_CDC_Setup+0x11c>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <USBD_CDC_Setup+0xb4>
 8007524:	2b0a      	cmp	r3, #10
 8007526:	d014      	beq.n	8007552 <USBD_CDC_Setup+0xdc>
 8007528:	e033      	b.n	8007592 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007530:	2b03      	cmp	r3, #3
 8007532:	d107      	bne.n	8007544 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007534:	f107 030c 	add.w	r3, r7, #12
 8007538:	2202      	movs	r2, #2
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 f9de 	bl	80088fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007542:	e02e      	b.n	80075a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 f96e 	bl	8008828 <USBD_CtlError>
            ret = USBD_FAIL;
 800754c:	2302      	movs	r3, #2
 800754e:	75fb      	strb	r3, [r7, #23]
          break;
 8007550:	e027      	b.n	80075a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007558:	2b03      	cmp	r3, #3
 800755a:	d107      	bne.n	800756c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800755c:	f107 030f 	add.w	r3, r7, #15
 8007560:	2201      	movs	r2, #1
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 f9ca 	bl	80088fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800756a:	e01a      	b.n	80075a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 f95a 	bl	8008828 <USBD_CtlError>
            ret = USBD_FAIL;
 8007574:	2302      	movs	r3, #2
 8007576:	75fb      	strb	r3, [r7, #23]
          break;
 8007578:	e013      	b.n	80075a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007580:	2b03      	cmp	r3, #3
 8007582:	d00d      	beq.n	80075a0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f94e 	bl	8008828 <USBD_CtlError>
            ret = USBD_FAIL;
 800758c:	2302      	movs	r3, #2
 800758e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007590:	e006      	b.n	80075a0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f947 	bl	8008828 <USBD_CtlError>
          ret = USBD_FAIL;
 800759a:	2302      	movs	r3, #2
 800759c:	75fb      	strb	r3, [r7, #23]
          break;
 800759e:	e000      	b.n	80075a2 <USBD_CDC_Setup+0x12c>
          break;
 80075a0:	bf00      	nop
      }
      break;
 80075a2:	e006      	b.n	80075b2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f93e 	bl	8008828 <USBD_CtlError>
      ret = USBD_FAIL;
 80075ac:	2302      	movs	r3, #2
 80075ae:	75fb      	strb	r3, [r7, #23]
      break;
 80075b0:	bf00      	nop
  }

  return ret;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075d6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d03a      	beq.n	8007658 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	331c      	adds	r3, #28
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d029      	beq.n	800764c <USBD_CDC_DataIn+0x90>
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	331c      	adds	r3, #28
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	78f9      	ldrb	r1, [r7, #3]
 800760c:	68b8      	ldr	r0, [r7, #8]
 800760e:	460b      	mov	r3, r1
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	4403      	add	r3, r0
 8007618:	3338      	adds	r3, #56	; 0x38
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d110      	bne.n	800764c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	331c      	adds	r3, #28
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800763e:	78f9      	ldrb	r1, [r7, #3]
 8007640:	2300      	movs	r3, #0
 8007642:	2200      	movs	r2, #0
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f004 fa73 	bl	800bb30 <USBD_LL_Transmit>
 800764a:	e003      	b.n	8007654 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	e000      	b.n	800765a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007658:	2302      	movs	r3, #2
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f004 fa9e 	bl	800bbbc <USBD_LL_GetRxDataSize>
 8007680:	4602      	mov	r2, r0
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00d      	beq.n	80076ae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076a6:	4611      	mov	r1, r2
 80076a8:	4798      	blx	r3

    return USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e000      	b.n	80076b0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80076ae:	2302      	movs	r3, #2
  }
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d015      	beq.n	80076fe <USBD_CDC_EP0_RxReady+0x46>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076d8:	2bff      	cmp	r3, #255	; 0xff
 80076da:	d010      	beq.n	80076fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80076ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076f2:	b292      	uxth	r2, r2
 80076f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	22ff      	movs	r2, #255	; 0xff
 80076fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2243      	movs	r2, #67	; 0x43
 8007714:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007716:	4b03      	ldr	r3, [pc, #12]	; (8007724 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000094 	.word	0x20000094

08007728 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2243      	movs	r2, #67	; 0x43
 8007734:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007736:	4b03      	ldr	r3, [pc, #12]	; (8007744 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20000050 	.word	0x20000050

08007748 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2243      	movs	r2, #67	; 0x43
 8007754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007756:	4b03      	ldr	r3, [pc, #12]	; (8007764 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	200000d8 	.word	0x200000d8

08007768 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	220a      	movs	r2, #10
 8007774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007776:	4b03      	ldr	r3, [pc, #12]	; (8007784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	2000000c 	.word	0x2000000c

08007788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007792:	2302      	movs	r3, #2
 8007794:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	4613      	mov	r3, r2
 80077c2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ca:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077d4:	88fa      	ldrh	r2, [r7, #6]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01c      	beq.n	8007866 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007832:	2b00      	cmp	r3, #0
 8007834:	d115      	bne.n	8007862 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007854:	b29b      	uxth	r3, r3
 8007856:	2181      	movs	r1, #129	; 0x81
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f004 f969 	bl	800bb30 <USBD_LL_Transmit>

      return USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	e002      	b.n	8007868 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007866:	2302      	movs	r3, #2
  }
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d017      	beq.n	80078ba <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7c1b      	ldrb	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800789c:	2101      	movs	r1, #1
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f004 f969 	bl	800bb76 <USBD_LL_PrepareReceive>
 80078a4:	e007      	b.n	80078b6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	2101      	movs	r1, #1
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f004 f960 	bl	800bb76 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078d8:	2302      	movs	r3, #2
 80078da:	e01a      	b.n	8007912 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	79fa      	ldrb	r2, [r7, #7]
 8007908:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f003 ffcc 	bl	800b8a8 <USBD_LL_Init>

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d006      	beq.n	800793c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]
 800793a:	e001      	b.n	8007940 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800793c:	2302      	movs	r3, #2
 800793e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f004 f800 	bl	800b95c <USBD_LL_Start>

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007988:	2302      	movs	r3, #2
 800798a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00c      	beq.n	80079b0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	4611      	mov	r1, r2
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	4611      	mov	r1, r2
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fedb 	bl	80087ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d016      	beq.n	8007a4a <USBD_LL_SetupStage+0x6a>
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d81c      	bhi.n	8007a5a <USBD_LL_SetupStage+0x7a>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <USBD_LL_SetupStage+0x4a>
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d008      	beq.n	8007a3a <USBD_LL_SetupStage+0x5a>
 8007a28:	e017      	b.n	8007a5a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9ce 	bl	8007dd4 <USBD_StdDevReq>
      break;
 8007a38:	e01a      	b.n	8007a70 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa30 	bl	8007ea8 <USBD_StdItfReq>
      break;
 8007a48:	e012      	b.n	8007a70 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa70 	bl	8007f38 <USBD_StdEPReq>
      break;
 8007a58:	e00a      	b.n	8007a70 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f003 ffd7 	bl	800ba1c <USBD_LL_StallEP>
      break;
 8007a6e:	bf00      	nop
  }

  return USBD_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	460b      	mov	r3, r1
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d14b      	bne.n	8007b26 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d134      	bne.n	8007b0a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d919      	bls.n	8007ae0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	1ad2      	subs	r2, r2, r3
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d203      	bcs.n	8007ace <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	e002      	b.n	8007ad4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 ff5c 	bl	8008996 <USBD_CtlContinueRx>
 8007ade:	e038      	b.n	8007b52 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d105      	bne.n	8007b02 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 ff59 	bl	80089ba <USBD_CtlSendStatus>
 8007b08:	e023      	b.n	8007b52 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	d11e      	bne.n	8007b52 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f003 ff7c 	bl	800ba1c <USBD_LL_StallEP>
 8007b24:	e015      	b.n	8007b52 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d108      	bne.n	8007b4e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	7afa      	ldrb	r2, [r7, #11]
 8007b46:	4611      	mov	r1, r2
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	4798      	blx	r3
 8007b4c:	e001      	b.n	8007b52 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e000      	b.n	8007b54 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	460b      	mov	r3, r1
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d17f      	bne.n	8007c70 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3314      	adds	r3, #20
 8007b74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d15c      	bne.n	8007c3a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d915      	bls.n	8007bb8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	1ad2      	subs	r2, r2, r3
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fec6 	bl	8008936 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007baa:	2300      	movs	r3, #0
 8007bac:	2200      	movs	r2, #0
 8007bae:	2100      	movs	r1, #0
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f003 ffe0 	bl	800bb76 <USBD_LL_PrepareReceive>
 8007bb6:	e04e      	b.n	8007c56 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	6912      	ldr	r2, [r2, #16]
 8007bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bc4:	fb01 f202 	mul.w	r2, r1, r2
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d11c      	bne.n	8007c08 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d316      	bcc.n	8007c08 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d20f      	bcs.n	8007c08 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fea2 	bl	8008936 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2100      	movs	r1, #0
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f003 ffb8 	bl	800bb76 <USBD_LL_PrepareReceive>
 8007c06:	e026      	b.n	8007c56 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d105      	bne.n	8007c2a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c2a:	2180      	movs	r1, #128	; 0x80
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f003 fef5 	bl	800ba1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fed4 	bl	80089e0 <USBD_CtlReceiveStatus>
 8007c38:	e00d      	b.n	8007c56 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d004      	beq.n	8007c4e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c4e:	2180      	movs	r1, #128	; 0x80
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f003 fee3 	bl	800ba1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d11d      	bne.n	8007c9c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff fe80 	bl	8007966 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c6e:	e015      	b.n	8007c9c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d108      	bne.n	8007c98 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	7afa      	ldrb	r2, [r7, #11]
 8007c90:	4611      	mov	r1, r2
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	4798      	blx	r3
 8007c96:	e001      	b.n	8007c9c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e000      	b.n	8007c9e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f003 fe6c 	bl	800b992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2240      	movs	r2, #64	; 0x40
 8007cc6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cca:	2340      	movs	r3, #64	; 0x40
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2180      	movs	r1, #128	; 0x80
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f003 fe5e 	bl	800b992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2240      	movs	r2, #64	; 0x40
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6852      	ldr	r2, [r2, #4]
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	4611      	mov	r1, r2
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4798      	blx	r3
  }

  return USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	d105      	bne.n	8007d90 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d10b      	bne.n	8007dc8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dea:	2b40      	cmp	r3, #64	; 0x40
 8007dec:	d005      	beq.n	8007dfa <USBD_StdDevReq+0x26>
 8007dee:	2b40      	cmp	r3, #64	; 0x40
 8007df0:	d84f      	bhi.n	8007e92 <USBD_StdDevReq+0xbe>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <USBD_StdDevReq+0x36>
 8007df6:	2b20      	cmp	r3, #32
 8007df8:	d14b      	bne.n	8007e92 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
      break;
 8007e08:	e048      	b.n	8007e9c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b09      	cmp	r3, #9
 8007e10:	d839      	bhi.n	8007e86 <USBD_StdDevReq+0xb2>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <USBD_StdDevReq+0x44>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e69 	.word	0x08007e69
 8007e1c:	08007e7d 	.word	0x08007e7d
 8007e20:	08007e87 	.word	0x08007e87
 8007e24:	08007e73 	.word	0x08007e73
 8007e28:	08007e87 	.word	0x08007e87
 8007e2c:	08007e4b 	.word	0x08007e4b
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e87 	.word	0x08007e87
 8007e38:	08007e5f 	.word	0x08007e5f
 8007e3c:	08007e55 	.word	0x08007e55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9dc 	bl	8008200 <USBD_GetDescriptor>
          break;
 8007e48:	e022      	b.n	8007e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fb3f 	bl	80084d0 <USBD_SetAddress>
          break;
 8007e52:	e01d      	b.n	8007e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fb7e 	bl	8008558 <USBD_SetConfig>
          break;
 8007e5c:	e018      	b.n	8007e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fc07 	bl	8008674 <USBD_GetConfig>
          break;
 8007e66:	e013      	b.n	8007e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fc37 	bl	80086de <USBD_GetStatus>
          break;
 8007e70:	e00e      	b.n	8007e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fc65 	bl	8008744 <USBD_SetFeature>
          break;
 8007e7a:	e009      	b.n	8007e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc74 	bl	800876c <USBD_ClrFeature>
          break;
 8007e84:	e004      	b.n	8007e90 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fccd 	bl	8008828 <USBD_CtlError>
          break;
 8007e8e:	bf00      	nop
      }
      break;
 8007e90:	e004      	b.n	8007e9c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fcc7 	bl	8008828 <USBD_CtlError>
      break;
 8007e9a:	bf00      	nop
  }

  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop

08007ea8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d005      	beq.n	8007ece <USBD_StdItfReq+0x26>
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d82e      	bhi.n	8007f24 <USBD_StdItfReq+0x7c>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <USBD_StdItfReq+0x26>
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d12a      	bne.n	8007f24 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d81d      	bhi.n	8007f16 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	889b      	ldrh	r3, [r3, #4]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d813      	bhi.n	8007f0c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d110      	bne.n	8007f20 <USBD_StdItfReq+0x78>
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fd58 	bl	80089ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f0a:	e009      	b.n	8007f20 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fc8a 	bl	8008828 <USBD_CtlError>
          break;
 8007f14:	e004      	b.n	8007f20 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc85 	bl	8008828 <USBD_CtlError>
          break;
 8007f1e:	e000      	b.n	8007f22 <USBD_StdItfReq+0x7a>
          break;
 8007f20:	bf00      	nop
      }
      break;
 8007f22:	e004      	b.n	8007f2e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fc7e 	bl	8008828 <USBD_CtlError>
      break;
 8007f2c:	bf00      	nop
  }

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	889b      	ldrh	r3, [r3, #4]
 8007f4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d007      	beq.n	8007f68 <USBD_StdEPReq+0x30>
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	f200 8146 	bhi.w	80081ea <USBD_StdEPReq+0x2b2>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <USBD_StdEPReq+0x40>
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	f040 8141 	bne.w	80081ea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
      break;
 8007f76:	e13d      	b.n	80081f4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d10a      	bne.n	8007f9a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	e12d      	b.n	80081f6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	785b      	ldrb	r3, [r3, #1]
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d007      	beq.n	8007fb2 <USBD_StdEPReq+0x7a>
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	f300 811b 	bgt.w	80081de <USBD_StdEPReq+0x2a6>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d072      	beq.n	8008092 <USBD_StdEPReq+0x15a>
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d03a      	beq.n	8008026 <USBD_StdEPReq+0xee>
 8007fb0:	e115      	b.n	80081de <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d002      	beq.n	8007fc2 <USBD_StdEPReq+0x8a>
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d015      	beq.n	8007fec <USBD_StdEPReq+0xb4>
 8007fc0:	e02b      	b.n	800801a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00c      	beq.n	8007fe2 <USBD_StdEPReq+0xaa>
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b80      	cmp	r3, #128	; 0x80
 8007fcc:	d009      	beq.n	8007fe2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f003 fd22 	bl	800ba1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007fd8:	2180      	movs	r1, #128	; 0x80
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f003 fd1e 	bl	800ba1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fe0:	e020      	b.n	8008024 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fc1f 	bl	8008828 <USBD_CtlError>
              break;
 8007fea:	e01b      	b.n	8008024 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	885b      	ldrh	r3, [r3, #2]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10e      	bne.n	8008012 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00b      	beq.n	8008012 <USBD_StdEPReq+0xda>
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b80      	cmp	r3, #128	; 0x80
 8007ffe:	d008      	beq.n	8008012 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	88db      	ldrh	r3, [r3, #6]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f003 fd05 	bl	800ba1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fcd1 	bl	80089ba <USBD_CtlSendStatus>

              break;
 8008018:	e004      	b.n	8008024 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fc03 	bl	8008828 <USBD_CtlError>
              break;
 8008022:	bf00      	nop
          }
          break;
 8008024:	e0e0      	b.n	80081e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802c:	2b02      	cmp	r3, #2
 800802e:	d002      	beq.n	8008036 <USBD_StdEPReq+0xfe>
 8008030:	2b03      	cmp	r3, #3
 8008032:	d015      	beq.n	8008060 <USBD_StdEPReq+0x128>
 8008034:	e026      	b.n	8008084 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <USBD_StdEPReq+0x11e>
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d009      	beq.n	8008056 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f003 fce8 	bl	800ba1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800804c:	2180      	movs	r1, #128	; 0x80
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f003 fce4 	bl	800ba1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008054:	e01c      	b.n	8008090 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fbe5 	bl	8008828 <USBD_CtlError>
              break;
 800805e:	e017      	b.n	8008090 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d112      	bne.n	800808e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f003 fcef 	bl	800ba5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc9c 	bl	80089ba <USBD_CtlSendStatus>
              }
              break;
 8008082:	e004      	b.n	800808e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fbce 	bl	8008828 <USBD_CtlError>
              break;
 800808c:	e000      	b.n	8008090 <USBD_StdEPReq+0x158>
              break;
 800808e:	bf00      	nop
          }
          break;
 8008090:	e0aa      	b.n	80081e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	2b02      	cmp	r3, #2
 800809a:	d002      	beq.n	80080a2 <USBD_StdEPReq+0x16a>
 800809c:	2b03      	cmp	r3, #3
 800809e:	d032      	beq.n	8008106 <USBD_StdEPReq+0x1ce>
 80080a0:	e097      	b.n	80081d2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <USBD_StdEPReq+0x180>
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b80      	cmp	r3, #128	; 0x80
 80080ac:	d004      	beq.n	80080b8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fbb9 	bl	8008828 <USBD_CtlError>
                break;
 80080b6:	e091      	b.n	80081dc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da0b      	bge.n	80080d8 <USBD_StdEPReq+0x1a0>
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	3310      	adds	r3, #16
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	3304      	adds	r3, #4
 80080d6:	e00b      	b.n	80080f0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	3304      	adds	r3, #4
 80080f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2202      	movs	r2, #2
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fbfd 	bl	80088fe <USBD_CtlSendData>
              break;
 8008104:	e06a      	b.n	80081dc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800810a:	2b00      	cmp	r3, #0
 800810c:	da11      	bge.n	8008132 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	f003 020f 	and.w	r2, r3, #15
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	3318      	adds	r3, #24
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d117      	bne.n	8008158 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fb7c 	bl	8008828 <USBD_CtlError>
                  break;
 8008130:	e054      	b.n	80081dc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	f003 020f 	and.w	r2, r3, #15
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d104      	bne.n	8008158 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb69 	bl	8008828 <USBD_CtlError>
                  break;
 8008156:	e041      	b.n	80081dc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800815c:	2b00      	cmp	r3, #0
 800815e:	da0b      	bge.n	8008178 <USBD_StdEPReq+0x240>
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	3310      	adds	r3, #16
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	3304      	adds	r3, #4
 8008176:	e00b      	b.n	8008190 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	3304      	adds	r3, #4
 8008190:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <USBD_StdEPReq+0x266>
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b80      	cmp	r3, #128	; 0x80
 800819c:	d103      	bne.n	80081a6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	e00e      	b.n	80081c4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f003 fc74 	bl	800ba98 <USBD_LL_IsStallEP>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2201      	movs	r2, #1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e002      	b.n	80081c4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2202      	movs	r2, #2
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb97 	bl	80088fe <USBD_CtlSendData>
              break;
 80081d0:	e004      	b.n	80081dc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fb27 	bl	8008828 <USBD_CtlError>
              break;
 80081da:	bf00      	nop
          }
          break;
 80081dc:	e004      	b.n	80081e8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fb21 	bl	8008828 <USBD_CtlError>
          break;
 80081e6:	bf00      	nop
      }
      break;
 80081e8:	e004      	b.n	80081f4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb1b 	bl	8008828 <USBD_CtlError>
      break;
 80081f2:	bf00      	nop
  }

  return ret;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	885b      	ldrh	r3, [r3, #2]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	2b06      	cmp	r3, #6
 8008222:	f200 8128 	bhi.w	8008476 <USBD_GetDescriptor+0x276>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBD_GetDescriptor+0x2c>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008249 	.word	0x08008249
 8008230:	08008261 	.word	0x08008261
 8008234:	080082a1 	.word	0x080082a1
 8008238:	08008477 	.word	0x08008477
 800823c:	08008477 	.word	0x08008477
 8008240:	08008417 	.word	0x08008417
 8008244:	08008443 	.word	0x08008443
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	7c12      	ldrb	r2, [r2, #16]
 8008254:	f107 0108 	add.w	r1, r7, #8
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	60f8      	str	r0, [r7, #12]
      break;
 800825e:	e112      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	7c1b      	ldrb	r3, [r3, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10d      	bne.n	8008284 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	f107 0208 	add.w	r2, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3301      	adds	r3, #1
 800827e:	2202      	movs	r2, #2
 8008280:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008282:	e100      	b.n	8008486 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	f107 0208 	add.w	r2, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	2202      	movs	r2, #2
 800829c:	701a      	strb	r2, [r3, #0]
      break;
 800829e:	e0f2      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	885b      	ldrh	r3, [r3, #2]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	f200 80ac 	bhi.w	8008404 <USBD_GetDescriptor+0x204>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <USBD_GetDescriptor+0xb4>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	08008301 	.word	0x08008301
 80082bc:	08008335 	.word	0x08008335
 80082c0:	08008369 	.word	0x08008369
 80082c4:	0800839d 	.word	0x0800839d
 80082c8:	080083d1 	.word	0x080083d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	7c12      	ldrb	r2, [r2, #16]
 80082e4:	f107 0108 	add.w	r1, r7, #8
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ee:	e091      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa98 	bl	8008828 <USBD_CtlError>
            err++;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	3301      	adds	r3, #1
 80082fc:	72fb      	strb	r3, [r7, #11]
          break;
 80082fe:	e089      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	7c12      	ldrb	r2, [r2, #16]
 8008318:	f107 0108 	add.w	r1, r7, #8
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008322:	e077      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa7e 	bl	8008828 <USBD_CtlError>
            err++;
 800832c:	7afb      	ldrb	r3, [r7, #11]
 800832e:	3301      	adds	r3, #1
 8008330:	72fb      	strb	r3, [r7, #11]
          break;
 8008332:	e06f      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	7c12      	ldrb	r2, [r2, #16]
 800834c:	f107 0108 	add.w	r1, r7, #8
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3
 8008354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008356:	e05d      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa64 	bl	8008828 <USBD_CtlError>
            err++;
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	3301      	adds	r3, #1
 8008364:	72fb      	strb	r3, [r7, #11]
          break;
 8008366:	e055      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	7c12      	ldrb	r2, [r2, #16]
 8008380:	f107 0108 	add.w	r1, r7, #8
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
 8008388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800838a:	e043      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa4a 	bl	8008828 <USBD_CtlError>
            err++;
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	3301      	adds	r3, #1
 8008398:	72fb      	strb	r3, [r7, #11]
          break;
 800839a:	e03b      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00b      	beq.n	80083c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7c12      	ldrb	r2, [r2, #16]
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083be:	e029      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa30 	bl	8008828 <USBD_CtlError>
            err++;
 80083c8:	7afb      	ldrb	r3, [r7, #11]
 80083ca:	3301      	adds	r3, #1
 80083cc:	72fb      	strb	r3, [r7, #11]
          break;
 80083ce:	e021      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7c12      	ldrb	r2, [r2, #16]
 80083e8:	f107 0108 	add.w	r1, r7, #8
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
 80083f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f2:	e00f      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa16 	bl	8008828 <USBD_CtlError>
            err++;
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	3301      	adds	r3, #1
 8008400:	72fb      	strb	r3, [r7, #11]
          break;
 8008402:	e007      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa0e 	bl	8008828 <USBD_CtlError>
          err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008412:	e038      	b.n	8008486 <USBD_GetDescriptor+0x286>
 8008414:	e037      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7c1b      	ldrb	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008426:	f107 0208 	add.w	r2, r7, #8
 800842a:	4610      	mov	r0, r2
 800842c:	4798      	blx	r3
 800842e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008430:	e029      	b.n	8008486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f9f7 	bl	8008828 <USBD_CtlError>
        err++;
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	3301      	adds	r3, #1
 800843e:	72fb      	strb	r3, [r7, #11]
      break;
 8008440:	e021      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	7c1b      	ldrb	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10d      	bne.n	8008466 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	f107 0208 	add.w	r2, r7, #8
 8008456:	4610      	mov	r0, r2
 8008458:	4798      	blx	r3
 800845a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3301      	adds	r3, #1
 8008460:	2207      	movs	r2, #7
 8008462:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008464:	e00f      	b.n	8008486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f9dd 	bl	8008828 <USBD_CtlError>
        err++;
 800846e:	7afb      	ldrb	r3, [r7, #11]
 8008470:	3301      	adds	r3, #1
 8008472:	72fb      	strb	r3, [r7, #11]
      break;
 8008474:	e007      	b.n	8008486 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f9d5 	bl	8008828 <USBD_CtlError>
      err++;
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	3301      	adds	r3, #1
 8008482:	72fb      	strb	r3, [r7, #11]
      break;
 8008484:	bf00      	nop
  }

  if (err != 0U)
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11c      	bne.n	80084c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800848c:	893b      	ldrh	r3, [r7, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d011      	beq.n	80084b6 <USBD_GetDescriptor+0x2b6>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	88db      	ldrh	r3, [r3, #6]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	88da      	ldrh	r2, [r3, #6]
 800849e:	893b      	ldrh	r3, [r7, #8]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bf28      	it	cs
 80084a4:	4613      	movcs	r3, r2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	461a      	mov	r2, r3
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa24 	bl	80088fe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	88db      	ldrh	r3, [r3, #6]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa7b 	bl	80089ba <USBD_CtlSendStatus>
 80084c4:	e000      	b.n	80084c8 <USBD_GetDescriptor+0x2c8>
    return;
 80084c6:	bf00      	nop
    }
  }
}
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop

080084d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	889b      	ldrh	r3, [r3, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d130      	bne.n	8008544 <USBD_SetAddress+0x74>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d12c      	bne.n	8008544 <USBD_SetAddress+0x74>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	2b7f      	cmp	r3, #127	; 0x7f
 80084f0:	d828      	bhi.n	8008544 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	885b      	ldrh	r3, [r3, #2]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008504:	2b03      	cmp	r3, #3
 8008506:	d104      	bne.n	8008512 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f98c 	bl	8008828 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008510:	e01d      	b.n	800854e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7bfa      	ldrb	r2, [r7, #15]
 8008516:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f003 fae7 	bl	800baf2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa48 	bl	80089ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d004      	beq.n	800853a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008538:	e009      	b.n	800854e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008542:	e004      	b.n	800854e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f96e 	bl	8008828 <USBD_CtlError>
  }
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	885b      	ldrh	r3, [r3, #2]
 8008566:	b2da      	uxtb	r2, r3
 8008568:	4b41      	ldr	r3, [pc, #260]	; (8008670 <USBD_SetConfig+0x118>)
 800856a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800856c:	4b40      	ldr	r3, [pc, #256]	; (8008670 <USBD_SetConfig+0x118>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d904      	bls.n	800857e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f956 	bl	8008828 <USBD_CtlError>
 800857c:	e075      	b.n	800866a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008584:	2b02      	cmp	r3, #2
 8008586:	d002      	beq.n	800858e <USBD_SetConfig+0x36>
 8008588:	2b03      	cmp	r3, #3
 800858a:	d023      	beq.n	80085d4 <USBD_SetConfig+0x7c>
 800858c:	e062      	b.n	8008654 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800858e:	4b38      	ldr	r3, [pc, #224]	; (8008670 <USBD_SetConfig+0x118>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d01a      	beq.n	80085cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008596:	4b36      	ldr	r3, [pc, #216]	; (8008670 <USBD_SetConfig+0x118>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2203      	movs	r2, #3
 80085a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085a8:	4b31      	ldr	r3, [pc, #196]	; (8008670 <USBD_SetConfig+0x118>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff f9e4 	bl	800797c <USBD_SetClassConfig>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d104      	bne.n	80085c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f933 	bl	8008828 <USBD_CtlError>
            return;
 80085c2:	e052      	b.n	800866a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f9f8 	bl	80089ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80085ca:	e04e      	b.n	800866a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9f4 	bl	80089ba <USBD_CtlSendStatus>
        break;
 80085d2:	e04a      	b.n	800866a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80085d4:	4b26      	ldr	r3, [pc, #152]	; (8008670 <USBD_SetConfig+0x118>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d112      	bne.n	8008602 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80085e4:	4b22      	ldr	r3, [pc, #136]	; (8008670 <USBD_SetConfig+0x118>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80085ee:	4b20      	ldr	r3, [pc, #128]	; (8008670 <USBD_SetConfig+0x118>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff f9e0 	bl	80079ba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9dd 	bl	80089ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008600:	e033      	b.n	800866a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008602:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <USBD_SetConfig+0x118>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d01d      	beq.n	800864c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff f9ce 	bl	80079ba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800861e:	4b14      	ldr	r3, [pc, #80]	; (8008670 <USBD_SetConfig+0x118>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <USBD_SetConfig+0x118>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff f9a4 	bl	800797c <USBD_SetClassConfig>
 8008634:	4603      	mov	r3, r0
 8008636:	2b02      	cmp	r3, #2
 8008638:	d104      	bne.n	8008644 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8f3 	bl	8008828 <USBD_CtlError>
            return;
 8008642:	e012      	b.n	800866a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9b8 	bl	80089ba <USBD_CtlSendStatus>
        break;
 800864a:	e00e      	b.n	800866a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f9b4 	bl	80089ba <USBD_CtlSendStatus>
        break;
 8008652:	e00a      	b.n	800866a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8e6 	bl	8008828 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800865c:	4b04      	ldr	r3, [pc, #16]	; (8008670 <USBD_SetConfig+0x118>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff f9a9 	bl	80079ba <USBD_ClrClassConfig>
        break;
 8008668:	bf00      	nop
    }
  }
}
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000a8c 	.word	0x20000a8c

08008674 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	88db      	ldrh	r3, [r3, #6]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d004      	beq.n	8008690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f8cd 	bl	8008828 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800868e:	e022      	b.n	80086d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008696:	2b02      	cmp	r3, #2
 8008698:	dc02      	bgt.n	80086a0 <USBD_GetConfig+0x2c>
 800869a:	2b00      	cmp	r3, #0
 800869c:	dc03      	bgt.n	80086a6 <USBD_GetConfig+0x32>
 800869e:	e015      	b.n	80086cc <USBD_GetConfig+0x58>
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d00b      	beq.n	80086bc <USBD_GetConfig+0x48>
 80086a4:	e012      	b.n	80086cc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3308      	adds	r3, #8
 80086b0:	2201      	movs	r2, #1
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f922 	bl	80088fe <USBD_CtlSendData>
        break;
 80086ba:	e00c      	b.n	80086d6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3304      	adds	r3, #4
 80086c0:	2201      	movs	r2, #1
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f91a 	bl	80088fe <USBD_CtlSendData>
        break;
 80086ca:	e004      	b.n	80086d6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f8aa 	bl	8008828 <USBD_CtlError>
        break;
 80086d4:	bf00      	nop
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ee:	3b01      	subs	r3, #1
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d81e      	bhi.n	8008732 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	88db      	ldrh	r3, [r3, #6]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d004      	beq.n	8008706 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f892 	bl	8008828 <USBD_CtlError>
        break;
 8008704:	e01a      	b.n	800873c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f043 0202 	orr.w	r2, r3, #2
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	330c      	adds	r3, #12
 8008726:	2202      	movs	r2, #2
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f8e7 	bl	80088fe <USBD_CtlSendData>
      break;
 8008730:	e004      	b.n	800873c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f877 	bl	8008828 <USBD_CtlError>
      break;
 800873a:	bf00      	nop
  }
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	885b      	ldrh	r3, [r3, #2]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d106      	bne.n	8008764 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f92b 	bl	80089ba <USBD_CtlSendStatus>
  }
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877c:	3b01      	subs	r3, #1
 800877e:	2b02      	cmp	r3, #2
 8008780:	d80b      	bhi.n	800879a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	885b      	ldrh	r3, [r3, #2]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10c      	bne.n	80087a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f911 	bl	80089ba <USBD_CtlSendStatus>
      }
      break;
 8008798:	e004      	b.n	80087a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f843 	bl	8008828 <USBD_CtlError>
      break;
 80087a2:	e000      	b.n	80087a6 <USBD_ClrFeature+0x3a>
      break;
 80087a4:	bf00      	nop
  }
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785a      	ldrb	r2, [r3, #1]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	3302      	adds	r3, #2
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	3303      	adds	r3, #3
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4413      	add	r3, r2
 80087de:	b29a      	uxth	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	3304      	adds	r3, #4
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	3305      	adds	r3, #5
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	3306      	adds	r3, #6
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	b29a      	uxth	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	3307      	adds	r3, #7
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	b29b      	uxth	r3, r3
 8008814:	4413      	add	r3, r2
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	80da      	strh	r2, [r3, #6]

}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008832:	2180      	movs	r1, #128	; 0x80
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f003 f8f1 	bl	800ba1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800883a:	2100      	movs	r1, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f003 f8ed 	bl	800ba1c <USBD_LL_StallEP>
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b086      	sub	sp, #24
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d032      	beq.n	80088c6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f834 	bl	80088ce <USBD_GetLen>
 8008866:	4603      	mov	r3, r0
 8008868:	3301      	adds	r3, #1
 800886a:	b29b      	uxth	r3, r3
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	75fa      	strb	r2, [r7, #23]
 800887a:	461a      	mov	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4413      	add	r3, r2
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	7812      	ldrb	r2, [r2, #0]
 8008884:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	75fa      	strb	r2, [r7, #23]
 800888c:	461a      	mov	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4413      	add	r3, r2
 8008892:	2203      	movs	r2, #3
 8008894:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008896:	e012      	b.n	80088be <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	60fa      	str	r2, [r7, #12]
 800889e:	7dfa      	ldrb	r2, [r7, #23]
 80088a0:	1c51      	adds	r1, r2, #1
 80088a2:	75f9      	strb	r1, [r7, #23]
 80088a4:	4611      	mov	r1, r2
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	440a      	add	r2, r1
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	75fa      	strb	r2, [r7, #23]
 80088b4:	461a      	mov	r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4413      	add	r3, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e8      	bne.n	8008898 <USBD_GetString+0x4e>
    }
  }
}
 80088c6:	bf00      	nop
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b085      	sub	sp, #20
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80088da:	e005      	b.n	80088e8 <USBD_GetLen+0x1a>
  {
    len++;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	3301      	adds	r3, #1
 80088e0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3301      	adds	r3, #1
 80088e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1f5      	bne.n	80088dc <USBD_GetLen+0xe>
  }

  return len;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	4613      	mov	r3, r2
 800890a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2202      	movs	r2, #2
 8008910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008914:	88fa      	ldrh	r2, [r7, #6]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800891a:	88fa      	ldrh	r2, [r7, #6]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	2100      	movs	r1, #0
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f003 f902 	bl	800bb30 <USBD_LL_Transmit>

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	4613      	mov	r3, r2
 8008942:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008944:	88fb      	ldrh	r3, [r7, #6]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	2100      	movs	r1, #0
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f003 f8f0 	bl	800bb30 <USBD_LL_Transmit>

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	4613      	mov	r3, r2
 8008966:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2203      	movs	r2, #3
 800896c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008970:	88fa      	ldrh	r2, [r7, #6]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008978:	88fa      	ldrh	r2, [r7, #6]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	2100      	movs	r1, #0
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f003 f8f5 	bl	800bb76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089a4:	88fb      	ldrh	r3, [r7, #6]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	2100      	movs	r1, #0
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f003 f8e3 	bl	800bb76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2204      	movs	r2, #4
 80089c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089ca:	2300      	movs	r3, #0
 80089cc:	2200      	movs	r2, #0
 80089ce:	2100      	movs	r1, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f003 f8ad 	bl	800bb30 <USBD_LL_Transmit>

  return USBD_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2205      	movs	r2, #5
 80089ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089f0:	2300      	movs	r3, #0
 80089f2:	2200      	movs	r2, #0
 80089f4:	2100      	movs	r1, #0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f003 f8bd 	bl	800bb76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f103 0208 	add.w	r2, r3, #8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f103 0208 	add.w	r2, r3, #8
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f103 0208 	add.w	r2, r3, #8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689a      	ldr	r2, [r3, #8]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	601a      	str	r2, [r3, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abe:	d103      	bne.n	8008ac8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	e00c      	b.n	8008ae2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3308      	adds	r3, #8
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e002      	b.n	8008ad6 <vListInsert+0x2e>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d2f6      	bcs.n	8008ad0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	601a      	str	r2, [r3, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6892      	ldr	r2, [r2, #8]
 8008b30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6852      	ldr	r2, [r2, #4]
 8008b3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d103      	bne.n	8008b4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	1e5a      	subs	r2, r3, #1
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
	...

08008b70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b9a:	f002 f883 	bl	800aca4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008baa:	fb01 f303 	mul.w	r3, r1, r3
 8008bae:	441a      	add	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	68f9      	ldr	r1, [r7, #12]
 8008bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	441a      	add	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	22ff      	movs	r2, #255	; 0xff
 8008bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	22ff      	movs	r2, #255	; 0xff
 8008be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d114      	bne.n	8008c1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01a      	beq.n	8008c2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3310      	adds	r3, #16
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 f909 	bl	8009e14 <xTaskRemoveFromEventList>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d012      	beq.n	8008c2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <xQueueGenericReset+0xcc>)
 8008c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	e009      	b.n	8008c2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3310      	adds	r3, #16
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fef1 	bl	8008a06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3324      	adds	r3, #36	; 0x24
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff feec 	bl	8008a06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c2e:	f002 f869 	bl	800ad04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c32:	2301      	movs	r3, #1
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08e      	sub	sp, #56	; 0x38
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <xQueueGenericCreateStatic+0x52>
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <xQueueGenericCreateStatic+0x56>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <xQueueGenericCreateStatic+0x58>
 8008c96:	2300      	movs	r3, #0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	623b      	str	r3, [r7, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	e7fe      	b.n	8008cb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d102      	bne.n	8008cbe <xQueueGenericCreateStatic+0x7e>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <xQueueGenericCreateStatic+0x82>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <xQueueGenericCreateStatic+0x84>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	61fb      	str	r3, [r7, #28]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cde:	2348      	movs	r3, #72	; 0x48
 8008ce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b48      	cmp	r3, #72	; 0x48
 8008ce6:	d00a      	beq.n	8008cfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	61bb      	str	r3, [r7, #24]
}
 8008cfa:	bf00      	nop
 8008cfc:	e7fe      	b.n	8008cfc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00d      	beq.n	8008d24 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d10:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 f805 	bl	8008d2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3730      	adds	r7, #48	; 0x30
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	607a      	str	r2, [r7, #4]
 8008d3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d103      	bne.n	8008d4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	e002      	b.n	8008d50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	69b8      	ldr	r0, [r7, #24]
 8008d60:	f7ff ff06 	bl	8008b70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08e      	sub	sp, #56	; 0x38
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <xQueueGenericSend+0x32>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d103      	bne.n	8008dac <xQueueGenericSend+0x40>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <xQueueGenericSend+0x44>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <xQueueGenericSend+0x46>
 8008db0:	2300      	movs	r3, #0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10a      	bne.n	8008dcc <xQueueGenericSend+0x60>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d103      	bne.n	8008dda <xQueueGenericSend+0x6e>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <xQueueGenericSend+0x72>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueGenericSend+0x74>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xQueueGenericSend+0x8e>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	623b      	str	r3, [r7, #32]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dfa:	f001 f9d1 	bl	800a1a0 <xTaskGetSchedulerState>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <xQueueGenericSend+0x9e>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <xQueueGenericSend+0xa2>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e000      	b.n	8008e10 <xQueueGenericSend+0xa4>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <xQueueGenericSend+0xbe>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	61fb      	str	r3, [r7, #28]
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e2a:	f001 ff3b 	bl	800aca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d302      	bcc.n	8008e40 <xQueueGenericSend+0xd4>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d129      	bne.n	8008e94 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e46:	f000 fa07 	bl	8009258 <prvCopyDataToQueue>
 8008e4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d010      	beq.n	8008e76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	3324      	adds	r3, #36	; 0x24
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 ffdb 	bl	8009e14 <xTaskRemoveFromEventList>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d013      	beq.n	8008e8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e64:	4b3f      	ldr	r3, [pc, #252]	; (8008f64 <xQueueGenericSend+0x1f8>)
 8008e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	e00a      	b.n	8008e8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d007      	beq.n	8008e8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e7c:	4b39      	ldr	r3, [pc, #228]	; (8008f64 <xQueueGenericSend+0x1f8>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e8c:	f001 ff3a 	bl	800ad04 <vPortExitCritical>
				return pdPASS;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e063      	b.n	8008f5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e9a:	f001 ff33 	bl	800ad04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e05c      	b.n	8008f5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d106      	bne.n	8008eb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ea8:	f107 0314 	add.w	r3, r7, #20
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 f813 	bl	8009ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eb6:	f001 ff25 	bl	800ad04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008eba:	f000 fd81 	bl	80099c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ebe:	f001 fef1 	bl	800aca4 <vPortEnterCritical>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ec8:	b25b      	sxtb	r3, r3
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ece:	d103      	bne.n	8008ed8 <xQueueGenericSend+0x16c>
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee4:	d103      	bne.n	8008eee <xQueueGenericSend+0x182>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eee:	f001 ff09 	bl	800ad04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ef2:	1d3a      	adds	r2, r7, #4
 8008ef4:	f107 0314 	add.w	r3, r7, #20
 8008ef8:	4611      	mov	r1, r2
 8008efa:	4618      	mov	r0, r3
 8008efc:	f001 f802 	bl	8009f04 <xTaskCheckForTimeOut>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d124      	bne.n	8008f50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f08:	f000 fa9e 	bl	8009448 <prvIsQueueFull>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d018      	beq.n	8008f44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	3310      	adds	r3, #16
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 ff2a 	bl	8009d74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f22:	f000 fa29 	bl	8009378 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f26:	f000 fd59 	bl	80099dc <xTaskResumeAll>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f47f af7c 	bne.w	8008e2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <xQueueGenericSend+0x1f8>)
 8008f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	e772      	b.n	8008e2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f46:	f000 fa17 	bl	8009378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f4a:	f000 fd47 	bl	80099dc <xTaskResumeAll>
 8008f4e:	e76c      	b.n	8008e2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f52:	f000 fa11 	bl	8009378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f56:	f000 fd41 	bl	80099dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f5a:	2300      	movs	r3, #0
		}
	}
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3738      	adds	r7, #56	; 0x38
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08e      	sub	sp, #56	; 0x38
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d103      	bne.n	8008fa4 <xQueueGenericSendFromISR+0x3c>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <xQueueGenericSendFromISR+0x40>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <xQueueGenericSendFromISR+0x42>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	623b      	str	r3, [r7, #32]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d103      	bne.n	8008fd2 <xQueueGenericSendFromISR+0x6a>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d101      	bne.n	8008fd6 <xQueueGenericSendFromISR+0x6e>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <xQueueGenericSendFromISR+0x70>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10a      	bne.n	8008ff2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61fb      	str	r3, [r7, #28]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ff2:	f001 ff39 	bl	800ae68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	61ba      	str	r2, [r7, #24]
 800900c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800900e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901a:	429a      	cmp	r2, r3
 800901c:	d302      	bcc.n	8009024 <xQueueGenericSendFromISR+0xbc>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d12c      	bne.n	800907e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800902a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	68b9      	ldr	r1, [r7, #8]
 8009032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009034:	f000 f910 	bl	8009258 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009038:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d112      	bne.n	8009068 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	d016      	beq.n	8009078 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	3324      	adds	r3, #36	; 0x24
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fee0 	bl	8009e14 <xTaskRemoveFromEventList>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00e      	beq.n	8009078 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	e007      	b.n	8009078 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800906c:	3301      	adds	r3, #1
 800906e:	b2db      	uxtb	r3, r3
 8009070:	b25a      	sxtb	r2, r3
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009078:	2301      	movs	r3, #1
 800907a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800907c:	e001      	b.n	8009082 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800907e:	2300      	movs	r3, #0
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800908c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009090:	4618      	mov	r0, r3
 8009092:	3738      	adds	r7, #56	; 0x38
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08c      	sub	sp, #48	; 0x30
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <xQueueReceive+0x30>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	623b      	str	r3, [r7, #32]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d103      	bne.n	80090d6 <xQueueReceive+0x3e>
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <xQueueReceive+0x42>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <xQueueReceive+0x44>
 80090da:	2300      	movs	r3, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <xQueueReceive+0x5e>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	61fb      	str	r3, [r7, #28]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090f6:	f001 f853 	bl	800a1a0 <xTaskGetSchedulerState>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <xQueueReceive+0x6e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <xQueueReceive+0x72>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xQueueReceive+0x74>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xQueueReceive+0x8e>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	61bb      	str	r3, [r7, #24]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009126:	f001 fdbd 	bl	800aca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01f      	beq.n	8009176 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800913a:	f000 f8f7 	bl	800932c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	1e5a      	subs	r2, r3, #1
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00f      	beq.n	800916e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	3310      	adds	r3, #16
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fe5e 	bl	8009e14 <xTaskRemoveFromEventList>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800915e:	4b3d      	ldr	r3, [pc, #244]	; (8009254 <xQueueReceive+0x1bc>)
 8009160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800916e:	f001 fdc9 	bl	800ad04 <vPortExitCritical>
				return pdPASS;
 8009172:	2301      	movs	r3, #1
 8009174:	e069      	b.n	800924a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d103      	bne.n	8009184 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800917c:	f001 fdc2 	bl	800ad04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009180:	2300      	movs	r3, #0
 8009182:	e062      	b.n	800924a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800918a:	f107 0310 	add.w	r3, r7, #16
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fea2 	bl	8009ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009198:	f001 fdb4 	bl	800ad04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800919c:	f000 fc10 	bl	80099c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091a0:	f001 fd80 	bl	800aca4 <vPortEnterCritical>
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d103      	bne.n	80091ba <xQueueReceive+0x122>
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c6:	d103      	bne.n	80091d0 <xQueueReceive+0x138>
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091d0:	f001 fd98 	bl	800ad04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091d4:	1d3a      	adds	r2, r7, #4
 80091d6:	f107 0310 	add.w	r3, r7, #16
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fe91 	bl	8009f04 <xTaskCheckForTimeOut>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d123      	bne.n	8009230 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ea:	f000 f917 	bl	800941c <prvIsQueueEmpty>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d017      	beq.n	8009224 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	3324      	adds	r3, #36	; 0x24
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fdb9 	bl	8009d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009204:	f000 f8b8 	bl	8009378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009208:	f000 fbe8 	bl	80099dc <xTaskResumeAll>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d189      	bne.n	8009126 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009212:	4b10      	ldr	r3, [pc, #64]	; (8009254 <xQueueReceive+0x1bc>)
 8009214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	e780      	b.n	8009126 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009226:	f000 f8a7 	bl	8009378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800922a:	f000 fbd7 	bl	80099dc <xTaskResumeAll>
 800922e:	e77a      	b.n	8009126 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009232:	f000 f8a1 	bl	8009378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009236:	f000 fbd1 	bl	80099dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800923a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800923c:	f000 f8ee 	bl	800941c <prvIsQueueEmpty>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	f43f af6f 	beq.w	8009126 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009248:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800924a:	4618      	mov	r0, r3
 800924c:	3730      	adds	r7, #48	; 0x30
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10d      	bne.n	8009292 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d14d      	bne.n	800931a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 ffaa 	bl	800a1dc <xTaskPriorityDisinherit>
 8009288:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	605a      	str	r2, [r3, #4]
 8009290:	e043      	b.n	800931a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d119      	bne.n	80092cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6898      	ldr	r0, [r3, #8]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a0:	461a      	mov	r2, r3
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	f002 fd98 	bl	800bdd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d32b      	bcc.n	800931a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	609a      	str	r2, [r3, #8]
 80092ca:	e026      	b.n	800931a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68d8      	ldr	r0, [r3, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d4:	461a      	mov	r2, r3
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	f002 fd7e 	bl	800bdd8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e4:	425b      	negs	r3, r3
 80092e6:	441a      	add	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d207      	bcs.n	8009308 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009300:	425b      	negs	r3, r3
 8009302:	441a      	add	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d105      	bne.n	800931a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	3b01      	subs	r3, #1
 8009318:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009322:	697b      	ldr	r3, [r7, #20]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	d018      	beq.n	8009370 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009346:	441a      	add	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d303      	bcc.n	8009360 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68d9      	ldr	r1, [r3, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009368:	461a      	mov	r2, r3
 800936a:	6838      	ldr	r0, [r7, #0]
 800936c:	f002 fd34 	bl	800bdd8 <memcpy>
	}
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009380:	f001 fc90 	bl	800aca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800938a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800938c:	e011      	b.n	80093b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	d012      	beq.n	80093bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3324      	adds	r3, #36	; 0x24
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fd3a 	bl	8009e14 <xTaskRemoveFromEventList>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093a6:	f000 fe0f 	bl	8009fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	dce9      	bgt.n	800938e <prvUnlockQueue+0x16>
 80093ba:	e000      	b.n	80093be <prvUnlockQueue+0x46>
					break;
 80093bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	22ff      	movs	r2, #255	; 0xff
 80093c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093c6:	f001 fc9d 	bl	800ad04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093ca:	f001 fc6b 	bl	800aca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093d6:	e011      	b.n	80093fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d012      	beq.n	8009406 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3310      	adds	r3, #16
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fd15 	bl	8009e14 <xTaskRemoveFromEventList>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093f0:	f000 fdea 	bl	8009fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009400:	2b00      	cmp	r3, #0
 8009402:	dce9      	bgt.n	80093d8 <prvUnlockQueue+0x60>
 8009404:	e000      	b.n	8009408 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009406:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	22ff      	movs	r2, #255	; 0xff
 800940c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009410:	f001 fc78 	bl	800ad04 <vPortExitCritical>
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009424:	f001 fc3e 	bl	800aca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	e001      	b.n	800943a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800943a:	f001 fc63 	bl	800ad04 <vPortExitCritical>

	return xReturn;
 800943e:	68fb      	ldr	r3, [r7, #12]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009450:	f001 fc28 	bl	800aca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945c:	429a      	cmp	r2, r3
 800945e:	d102      	bne.n	8009466 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009460:	2301      	movs	r3, #1
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e001      	b.n	800946a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800946a:	f001 fc4b 	bl	800ad04 <vPortExitCritical>

	return xReturn;
 800946e:	68fb      	ldr	r3, [r7, #12]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	e014      	b.n	80094b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009488:	4a0f      	ldr	r2, [pc, #60]	; (80094c8 <vQueueAddToRegistry+0x50>)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10b      	bne.n	80094ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009494:	490c      	ldr	r1, [pc, #48]	; (80094c8 <vQueueAddToRegistry+0x50>)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800949e:	4a0a      	ldr	r2, [pc, #40]	; (80094c8 <vQueueAddToRegistry+0x50>)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094aa:	e006      	b.n	80094ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b07      	cmp	r3, #7
 80094b6:	d9e7      	bls.n	8009488 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20000a90 	.word	0x20000a90

080094cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094dc:	f001 fbe2 	bl	800aca4 <vPortEnterCritical>
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e6:	b25b      	sxtb	r3, r3
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ec:	d103      	bne.n	80094f6 <vQueueWaitForMessageRestricted+0x2a>
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fc:	b25b      	sxtb	r3, r3
 80094fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009502:	d103      	bne.n	800950c <vQueueWaitForMessageRestricted+0x40>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800950c:	f001 fbfa 	bl	800ad04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	3324      	adds	r3, #36	; 0x24
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fc4b 	bl	8009dbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009526:	6978      	ldr	r0, [r7, #20]
 8009528:	f7ff ff26 	bl	8009378 <prvUnlockQueue>
	}
 800952c:	bf00      	nop
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08e      	sub	sp, #56	; 0x38
 8009538:	af04      	add	r7, sp, #16
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	623b      	str	r3, [r7, #32]
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xTaskCreateStatic+0x46>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	61fb      	str	r3, [r7, #28]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800957a:	23a0      	movs	r3, #160	; 0xa0
 800957c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2ba0      	cmp	r3, #160	; 0xa0
 8009582:	d00a      	beq.n	800959a <xTaskCreateStatic+0x66>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	61bb      	str	r3, [r7, #24]
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01e      	beq.n	80095de <xTaskCreateStatic+0xaa>
 80095a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d01b      	beq.n	80095de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095b8:	2300      	movs	r3, #0
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	f107 0314 	add.w	r3, r7, #20
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 f851 	bl	8009678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095d8:	f000 f8e4 	bl	80097a4 <prvAddNewTaskToReadyList>
 80095dc:	e001      	b.n	80095e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095e2:	697b      	ldr	r3, [r7, #20]
	}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3728      	adds	r7, #40	; 0x28
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08c      	sub	sp, #48	; 0x30
 80095f0:	af04      	add	r7, sp, #16
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4618      	mov	r0, r3
 8009602:	f001 fc71 	bl	800aee8 <pvPortMalloc>
 8009606:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00e      	beq.n	800962c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800960e:	20a0      	movs	r0, #160	; 0xa0
 8009610:	f001 fc6a 	bl	800aee8 <pvPortMalloc>
 8009614:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	631a      	str	r2, [r3, #48]	; 0x30
 8009622:	e005      	b.n	8009630 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009624:	6978      	ldr	r0, [r7, #20]
 8009626:	f001 fd23 	bl	800b070 <vPortFree>
 800962a:	e001      	b.n	8009630 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d017      	beq.n	8009666 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800963e:	88fa      	ldrh	r2, [r7, #6]
 8009640:	2300      	movs	r3, #0
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	9302      	str	r3, [sp, #8]
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 f80f 	bl	8009678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800965a:	69f8      	ldr	r0, [r7, #28]
 800965c:	f000 f8a2 	bl	80097a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009660:	2301      	movs	r3, #1
 8009662:	61bb      	str	r3, [r7, #24]
 8009664:	e002      	b.n	800966c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009666:	f04f 33ff 	mov.w	r3, #4294967295
 800966a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800966c:	69bb      	ldr	r3, [r7, #24]
	}
 800966e:	4618      	mov	r0, r3
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009690:	3b01      	subs	r3, #1
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	f023 0307 	bic.w	r3, r3, #7
 800969e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	617b      	str	r3, [r7, #20]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096c0:	2300      	movs	r3, #0
 80096c2:	61fb      	str	r3, [r7, #28]
 80096c4:	e012      	b.n	80096ec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	4413      	add	r3, r2
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	4413      	add	r3, r2
 80096d4:	3334      	adds	r3, #52	; 0x34
 80096d6:	460a      	mov	r2, r1
 80096d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d006      	beq.n	80096f4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3301      	adds	r3, #1
 80096ea:	61fb      	str	r3, [r7, #28]
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	2b0f      	cmp	r3, #15
 80096f0:	d9e9      	bls.n	80096c6 <prvInitialiseNewTask+0x4e>
 80096f2:	e000      	b.n	80096f6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80096f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	2b06      	cmp	r3, #6
 8009702:	d901      	bls.n	8009708 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009704:	2306      	movs	r3, #6
 8009706:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800970c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009712:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	2200      	movs	r2, #0
 8009718:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	3304      	adds	r3, #4
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff f991 	bl	8008a46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	3318      	adds	r3, #24
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff f98c 	bl	8008a46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	f1c3 0207 	rsb	r2, r3, #7
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009742:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	2200      	movs	r2, #0
 8009750:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	334c      	adds	r3, #76	; 0x4c
 8009758:	224c      	movs	r2, #76	; 0x4c
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f002 fab1 	bl	800bcc4 <memset>
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	4a0c      	ldr	r2, [pc, #48]	; (8009798 <prvInitialiseNewTask+0x120>)
 8009766:	651a      	str	r2, [r3, #80]	; 0x50
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	4a0c      	ldr	r2, [pc, #48]	; (800979c <prvInitialiseNewTask+0x124>)
 800976c:	655a      	str	r2, [r3, #84]	; 0x54
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	4a0b      	ldr	r2, [pc, #44]	; (80097a0 <prvInitialiseNewTask+0x128>)
 8009772:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	68f9      	ldr	r1, [r7, #12]
 8009778:	69b8      	ldr	r0, [r7, #24]
 800977a:	f001 f967 	bl	800aa4c <pxPortInitialiseStack>
 800977e:	4602      	mov	r2, r0
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009790:	bf00      	nop
 8009792:	3720      	adds	r7, #32
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20002ae8 	.word	0x20002ae8
 800979c:	20002b50 	.word	0x20002b50
 80097a0:	20002bb8 	.word	0x20002bb8

080097a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097ac:	f001 fa7a 	bl	800aca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097b0:	4b2a      	ldr	r3, [pc, #168]	; (800985c <prvAddNewTaskToReadyList+0xb8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3301      	adds	r3, #1
 80097b6:	4a29      	ldr	r2, [pc, #164]	; (800985c <prvAddNewTaskToReadyList+0xb8>)
 80097b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097ba:	4b29      	ldr	r3, [pc, #164]	; (8009860 <prvAddNewTaskToReadyList+0xbc>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097c2:	4a27      	ldr	r2, [pc, #156]	; (8009860 <prvAddNewTaskToReadyList+0xbc>)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097c8:	4b24      	ldr	r3, [pc, #144]	; (800985c <prvAddNewTaskToReadyList+0xb8>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d110      	bne.n	80097f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097d0:	f000 fc1e 	bl	800a010 <prvInitialiseTaskLists>
 80097d4:	e00d      	b.n	80097f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097d6:	4b23      	ldr	r3, [pc, #140]	; (8009864 <prvAddNewTaskToReadyList+0xc0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097de:	4b20      	ldr	r3, [pc, #128]	; (8009860 <prvAddNewTaskToReadyList+0xbc>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d802      	bhi.n	80097f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097ec:	4a1c      	ldr	r2, [pc, #112]	; (8009860 <prvAddNewTaskToReadyList+0xbc>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097f2:	4b1d      	ldr	r3, [pc, #116]	; (8009868 <prvAddNewTaskToReadyList+0xc4>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3301      	adds	r3, #1
 80097f8:	4a1b      	ldr	r2, [pc, #108]	; (8009868 <prvAddNewTaskToReadyList+0xc4>)
 80097fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	2201      	movs	r2, #1
 8009802:	409a      	lsls	r2, r3
 8009804:	4b19      	ldr	r3, [pc, #100]	; (800986c <prvAddNewTaskToReadyList+0xc8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4313      	orrs	r3, r2
 800980a:	4a18      	ldr	r2, [pc, #96]	; (800986c <prvAddNewTaskToReadyList+0xc8>)
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4a15      	ldr	r2, [pc, #84]	; (8009870 <prvAddNewTaskToReadyList+0xcc>)
 800981c:	441a      	add	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3304      	adds	r3, #4
 8009822:	4619      	mov	r1, r3
 8009824:	4610      	mov	r0, r2
 8009826:	f7ff f91b 	bl	8008a60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800982a:	f001 fa6b 	bl	800ad04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800982e:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <prvAddNewTaskToReadyList+0xc0>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00e      	beq.n	8009854 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <prvAddNewTaskToReadyList+0xbc>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	429a      	cmp	r2, r3
 8009842:	d207      	bcs.n	8009854 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009844:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <prvAddNewTaskToReadyList+0xd0>)
 8009846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009854:	bf00      	nop
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	20000bd0 	.word	0x20000bd0
 8009860:	20000ad0 	.word	0x20000ad0
 8009864:	20000bdc 	.word	0x20000bdc
 8009868:	20000bec 	.word	0x20000bec
 800986c:	20000bd8 	.word	0x20000bd8
 8009870:	20000ad4 	.word	0x20000ad4
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d017      	beq.n	80098ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800988a:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <vTaskDelay+0x60>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <vTaskDelay+0x30>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	60bb      	str	r3, [r7, #8]
}
 80098a4:	bf00      	nop
 80098a6:	e7fe      	b.n	80098a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098a8:	f000 f88a 	bl	80099c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098ac:	2100      	movs	r1, #0
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fd1a 	bl	800a2e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098b4:	f000 f892 	bl	80099dc <xTaskResumeAll>
 80098b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d107      	bne.n	80098d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098c0:	4b06      	ldr	r3, [pc, #24]	; (80098dc <vTaskDelay+0x64>)
 80098c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20000bf8 	.word	0x20000bf8
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	; 0x28
 80098e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098ee:	463a      	mov	r2, r7
 80098f0:	1d39      	adds	r1, r7, #4
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f6 fcc2 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	9202      	str	r2, [sp, #8]
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	2300      	movs	r3, #0
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	2300      	movs	r3, #0
 800990c:	460a      	mov	r2, r1
 800990e:	4924      	ldr	r1, [pc, #144]	; (80099a0 <vTaskStartScheduler+0xc0>)
 8009910:	4824      	ldr	r0, [pc, #144]	; (80099a4 <vTaskStartScheduler+0xc4>)
 8009912:	f7ff fe0f 	bl	8009534 <xTaskCreateStatic>
 8009916:	4603      	mov	r3, r0
 8009918:	4a23      	ldr	r2, [pc, #140]	; (80099a8 <vTaskStartScheduler+0xc8>)
 800991a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800991c:	4b22      	ldr	r3, [pc, #136]	; (80099a8 <vTaskStartScheduler+0xc8>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009924:	2301      	movs	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e001      	b.n	800992e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d102      	bne.n	800993a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009934:	f000 fd3e 	bl	800a3b4 <xTimerCreateTimerTask>
 8009938:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d11b      	bne.n	8009978 <vTaskStartScheduler+0x98>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009954:	4b15      	ldr	r3, [pc, #84]	; (80099ac <vTaskStartScheduler+0xcc>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	334c      	adds	r3, #76	; 0x4c
 800995a:	4a15      	ldr	r2, [pc, #84]	; (80099b0 <vTaskStartScheduler+0xd0>)
 800995c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800995e:	4b15      	ldr	r3, [pc, #84]	; (80099b4 <vTaskStartScheduler+0xd4>)
 8009960:	f04f 32ff 	mov.w	r2, #4294967295
 8009964:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <vTaskStartScheduler+0xd8>)
 8009968:	2201      	movs	r2, #1
 800996a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800996c:	4b13      	ldr	r3, [pc, #76]	; (80099bc <vTaskStartScheduler+0xdc>)
 800996e:	2200      	movs	r2, #0
 8009970:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009972:	f001 f8f5 	bl	800ab60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009976:	e00e      	b.n	8009996 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997e:	d10a      	bne.n	8009996 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	60fb      	str	r3, [r7, #12]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <vTaskStartScheduler+0xb4>
}
 8009996:	bf00      	nop
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	0800c6d4 	.word	0x0800c6d4
 80099a4:	08009fe1 	.word	0x08009fe1
 80099a8:	20000bf4 	.word	0x20000bf4
 80099ac:	20000ad0 	.word	0x20000ad0
 80099b0:	200001cc 	.word	0x200001cc
 80099b4:	20000bf0 	.word	0x20000bf0
 80099b8:	20000bdc 	.word	0x20000bdc
 80099bc:	20000bd4 	.word	0x20000bd4

080099c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80099c4:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <vTaskSuspendAll+0x18>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	4a03      	ldr	r2, [pc, #12]	; (80099d8 <vTaskSuspendAll+0x18>)
 80099cc:	6013      	str	r3, [r2, #0]
}
 80099ce:	bf00      	nop
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	20000bf8 	.word	0x20000bf8

080099dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099ea:	4b41      	ldr	r3, [pc, #260]	; (8009af0 <xTaskResumeAll+0x114>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <xTaskResumeAll+0x2c>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	603b      	str	r3, [r7, #0]
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a08:	f001 f94c 	bl	800aca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a0c:	4b38      	ldr	r3, [pc, #224]	; (8009af0 <xTaskResumeAll+0x114>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	4a37      	ldr	r2, [pc, #220]	; (8009af0 <xTaskResumeAll+0x114>)
 8009a14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a16:	4b36      	ldr	r3, [pc, #216]	; (8009af0 <xTaskResumeAll+0x114>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d161      	bne.n	8009ae2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a1e:	4b35      	ldr	r3, [pc, #212]	; (8009af4 <xTaskResumeAll+0x118>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d05d      	beq.n	8009ae2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a26:	e02e      	b.n	8009a86 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009a28:	4b33      	ldr	r3, [pc, #204]	; (8009af8 <xTaskResumeAll+0x11c>)
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3318      	adds	r3, #24
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7ff f870 	bl	8008b1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff f86b 	bl	8008b1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	2201      	movs	r2, #1
 8009a4a:	409a      	lsls	r2, r3
 8009a4c:	4b2b      	ldr	r3, [pc, #172]	; (8009afc <xTaskResumeAll+0x120>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	4a2a      	ldr	r2, [pc, #168]	; (8009afc <xTaskResumeAll+0x120>)
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4a27      	ldr	r2, [pc, #156]	; (8009b00 <xTaskResumeAll+0x124>)
 8009a64:	441a      	add	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7fe fff7 	bl	8008a60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a76:	4b23      	ldr	r3, [pc, #140]	; (8009b04 <xTaskResumeAll+0x128>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d302      	bcc.n	8009a86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009a80:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <xTaskResumeAll+0x12c>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a86:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <xTaskResumeAll+0x11c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1cc      	bne.n	8009a28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a94:	f000 fb5e 	bl	800a154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a98:	4b1c      	ldr	r3, [pc, #112]	; (8009b0c <xTaskResumeAll+0x130>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d010      	beq.n	8009ac6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009aa4:	f000 f846 	bl	8009b34 <xTaskIncrementTick>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009aae:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <xTaskResumeAll+0x12c>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1f1      	bne.n	8009aa4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009ac0:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <xTaskResumeAll+0x130>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ac6:	4b10      	ldr	r3, [pc, #64]	; (8009b08 <xTaskResumeAll+0x12c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <xTaskResumeAll+0x134>)
 8009ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ae2:	f001 f90f 	bl	800ad04 <vPortExitCritical>

	return xAlreadyYielded;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20000bf8 	.word	0x20000bf8
 8009af4:	20000bd0 	.word	0x20000bd0
 8009af8:	20000b90 	.word	0x20000b90
 8009afc:	20000bd8 	.word	0x20000bd8
 8009b00:	20000ad4 	.word	0x20000ad4
 8009b04:	20000ad0 	.word	0x20000ad0
 8009b08:	20000be4 	.word	0x20000be4
 8009b0c:	20000be0 	.word	0x20000be0
 8009b10:	e000ed04 	.word	0xe000ed04

08009b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <xTaskGetTickCount+0x1c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b20:	687b      	ldr	r3, [r7, #4]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	20000bd4 	.word	0x20000bd4

08009b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b3e:	4b51      	ldr	r3, [pc, #324]	; (8009c84 <xTaskIncrementTick+0x150>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 808d 	bne.w	8009c62 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b48:	4b4f      	ldr	r3, [pc, #316]	; (8009c88 <xTaskIncrementTick+0x154>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b50:	4a4d      	ldr	r2, [pc, #308]	; (8009c88 <xTaskIncrementTick+0x154>)
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d120      	bne.n	8009b9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b5c:	4b4b      	ldr	r3, [pc, #300]	; (8009c8c <xTaskIncrementTick+0x158>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <xTaskIncrementTick+0x48>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	603b      	str	r3, [r7, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <xTaskIncrementTick+0x46>
 8009b7c:	4b43      	ldr	r3, [pc, #268]	; (8009c8c <xTaskIncrementTick+0x158>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	60fb      	str	r3, [r7, #12]
 8009b82:	4b43      	ldr	r3, [pc, #268]	; (8009c90 <xTaskIncrementTick+0x15c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a41      	ldr	r2, [pc, #260]	; (8009c8c <xTaskIncrementTick+0x158>)
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	4a41      	ldr	r2, [pc, #260]	; (8009c90 <xTaskIncrementTick+0x15c>)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	4b40      	ldr	r3, [pc, #256]	; (8009c94 <xTaskIncrementTick+0x160>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3301      	adds	r3, #1
 8009b96:	4a3f      	ldr	r2, [pc, #252]	; (8009c94 <xTaskIncrementTick+0x160>)
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	f000 fadb 	bl	800a154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b9e:	4b3e      	ldr	r3, [pc, #248]	; (8009c98 <xTaskIncrementTick+0x164>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d34d      	bcc.n	8009c44 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ba8:	4b38      	ldr	r3, [pc, #224]	; (8009c8c <xTaskIncrementTick+0x158>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <xTaskIncrementTick+0x82>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <xTaskIncrementTick+0x84>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bbc:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <xTaskIncrementTick+0x164>)
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	601a      	str	r2, [r3, #0]
					break;
 8009bc4:	e03e      	b.n	8009c44 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009bc6:	4b31      	ldr	r3, [pc, #196]	; (8009c8c <xTaskIncrementTick+0x158>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d203      	bcs.n	8009be6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bde:	4a2e      	ldr	r2, [pc, #184]	; (8009c98 <xTaskIncrementTick+0x164>)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6013      	str	r3, [r2, #0]
						break;
 8009be4:	e02e      	b.n	8009c44 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe ff95 	bl	8008b1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3318      	adds	r3, #24
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe ff8c 	bl	8008b1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	2201      	movs	r2, #1
 8009c08:	409a      	lsls	r2, r3
 8009c0a:	4b24      	ldr	r3, [pc, #144]	; (8009c9c <xTaskIncrementTick+0x168>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	4a22      	ldr	r2, [pc, #136]	; (8009c9c <xTaskIncrementTick+0x168>)
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <xTaskIncrementTick+0x16c>)
 8009c22:	441a      	add	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f7fe ff18 	bl	8008a60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <xTaskIncrementTick+0x170>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d3b4      	bcc.n	8009ba8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c42:	e7b1      	b.n	8009ba8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c44:	4b17      	ldr	r3, [pc, #92]	; (8009ca4 <xTaskIncrementTick+0x170>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	4915      	ldr	r1, [pc, #84]	; (8009ca0 <xTaskIncrementTick+0x16c>)
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d907      	bls.n	8009c6c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	617b      	str	r3, [r7, #20]
 8009c60:	e004      	b.n	8009c6c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c62:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <xTaskIncrementTick+0x174>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3301      	adds	r3, #1
 8009c68:	4a0f      	ldr	r2, [pc, #60]	; (8009ca8 <xTaskIncrementTick+0x174>)
 8009c6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <xTaskIncrementTick+0x178>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009c74:	2301      	movs	r3, #1
 8009c76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c78:	697b      	ldr	r3, [r7, #20]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20000bf8 	.word	0x20000bf8
 8009c88:	20000bd4 	.word	0x20000bd4
 8009c8c:	20000b88 	.word	0x20000b88
 8009c90:	20000b8c 	.word	0x20000b8c
 8009c94:	20000be8 	.word	0x20000be8
 8009c98:	20000bf0 	.word	0x20000bf0
 8009c9c:	20000bd8 	.word	0x20000bd8
 8009ca0:	20000ad4 	.word	0x20000ad4
 8009ca4:	20000ad0 	.word	0x20000ad0
 8009ca8:	20000be0 	.word	0x20000be0
 8009cac:	20000be4 	.word	0x20000be4

08009cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cb6:	4b29      	ldr	r3, [pc, #164]	; (8009d5c <vTaskSwitchContext+0xac>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cbe:	4b28      	ldr	r3, [pc, #160]	; (8009d60 <vTaskSwitchContext+0xb0>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cc4:	e044      	b.n	8009d50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009cc6:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <vTaskSwitchContext+0xb0>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ccc:	4b25      	ldr	r3, [pc, #148]	; (8009d64 <vTaskSwitchContext+0xb4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	fab3 f383 	clz	r3, r3
 8009cd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	f1c3 031f 	rsb	r3, r3, #31
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	4921      	ldr	r1, [pc, #132]	; (8009d68 <vTaskSwitchContext+0xb8>)
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	440b      	add	r3, r1
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	607b      	str	r3, [r7, #4]
}
 8009d08:	bf00      	nop
 8009d0a:	e7fe      	b.n	8009d0a <vTaskSwitchContext+0x5a>
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4a14      	ldr	r2, [pc, #80]	; (8009d68 <vTaskSwitchContext+0xb8>)
 8009d18:	4413      	add	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	605a      	str	r2, [r3, #4]
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d104      	bne.n	8009d3c <vTaskSwitchContext+0x8c>
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	605a      	str	r2, [r3, #4]
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	4a0a      	ldr	r2, [pc, #40]	; (8009d6c <vTaskSwitchContext+0xbc>)
 8009d44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <vTaskSwitchContext+0xbc>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	334c      	adds	r3, #76	; 0x4c
 8009d4c:	4a08      	ldr	r2, [pc, #32]	; (8009d70 <vTaskSwitchContext+0xc0>)
 8009d4e:	6013      	str	r3, [r2, #0]
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	20000bf8 	.word	0x20000bf8
 8009d60:	20000be4 	.word	0x20000be4
 8009d64:	20000bd8 	.word	0x20000bd8
 8009d68:	20000ad4 	.word	0x20000ad4
 8009d6c:	20000ad0 	.word	0x20000ad0
 8009d70:	200001cc 	.word	0x200001cc

08009d74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	60fb      	str	r3, [r7, #12]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d9a:	4b07      	ldr	r3, [pc, #28]	; (8009db8 <vTaskPlaceOnEventList+0x44>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3318      	adds	r3, #24
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7fe fe80 	bl	8008aa8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009da8:	2101      	movs	r1, #1
 8009daa:	6838      	ldr	r0, [r7, #0]
 8009dac:	f000 fa9c 	bl	800a2e8 <prvAddCurrentTaskToDelayedList>
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000ad0 	.word	0x20000ad0

08009dbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	617b      	str	r3, [r7, #20]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009de4:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <vTaskPlaceOnEventListRestricted+0x54>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3318      	adds	r3, #24
 8009dea:	4619      	mov	r1, r3
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7fe fe37 	bl	8008a60 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009df8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	68b8      	ldr	r0, [r7, #8]
 8009e02:	f000 fa71 	bl	800a2e8 <prvAddCurrentTaskToDelayedList>
	}
 8009e06:	bf00      	nop
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	20000ad0 	.word	0x20000ad0

08009e14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	60fb      	str	r3, [r7, #12]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	3318      	adds	r3, #24
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fe68 	bl	8008b1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e4a:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <xTaskRemoveFromEventList+0xac>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d11c      	bne.n	8009e8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fe5f 	bl	8008b1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	2201      	movs	r2, #1
 8009e62:	409a      	lsls	r2, r3
 8009e64:	4b17      	ldr	r3, [pc, #92]	; (8009ec4 <xTaskRemoveFromEventList+0xb0>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	4a16      	ldr	r2, [pc, #88]	; (8009ec4 <xTaskRemoveFromEventList+0xb0>)
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4a13      	ldr	r2, [pc, #76]	; (8009ec8 <xTaskRemoveFromEventList+0xb4>)
 8009e7c:	441a      	add	r2, r3
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4619      	mov	r1, r3
 8009e84:	4610      	mov	r0, r2
 8009e86:	f7fe fdeb 	bl	8008a60 <vListInsertEnd>
 8009e8a:	e005      	b.n	8009e98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	3318      	adds	r3, #24
 8009e90:	4619      	mov	r1, r3
 8009e92:	480e      	ldr	r0, [pc, #56]	; (8009ecc <xTaskRemoveFromEventList+0xb8>)
 8009e94:	f7fe fde4 	bl	8008a60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ed0 <xTaskRemoveFromEventList+0xbc>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d905      	bls.n	8009eb2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009eaa:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <xTaskRemoveFromEventList+0xc0>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	e001      	b.n	8009eb6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009eb6:	697b      	ldr	r3, [r7, #20]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20000bf8 	.word	0x20000bf8
 8009ec4:	20000bd8 	.word	0x20000bd8
 8009ec8:	20000ad4 	.word	0x20000ad4
 8009ecc:	20000b90 	.word	0x20000b90
 8009ed0:	20000ad0 	.word	0x20000ad0
 8009ed4:	20000be4 	.word	0x20000be4

08009ed8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ee0:	4b06      	ldr	r3, [pc, #24]	; (8009efc <vTaskInternalSetTimeOutState+0x24>)
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ee8:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <vTaskInternalSetTimeOutState+0x28>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	605a      	str	r2, [r3, #4]
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	20000be8 	.word	0x20000be8
 8009f00:	20000bd4 	.word	0x20000bd4

08009f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	613b      	str	r3, [r7, #16]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10a      	bne.n	8009f46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	60fb      	str	r3, [r7, #12]
}
 8009f42:	bf00      	nop
 8009f44:	e7fe      	b.n	8009f44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f46:	f000 fead 	bl	800aca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f4a:	4b1d      	ldr	r3, [pc, #116]	; (8009fc0 <xTaskCheckForTimeOut+0xbc>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f62:	d102      	bne.n	8009f6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61fb      	str	r3, [r7, #28]
 8009f68:	e023      	b.n	8009fb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4b15      	ldr	r3, [pc, #84]	; (8009fc4 <xTaskCheckForTimeOut+0xc0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d007      	beq.n	8009f86 <xTaskCheckForTimeOut+0x82>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	69ba      	ldr	r2, [r7, #24]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d302      	bcc.n	8009f86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	61fb      	str	r3, [r7, #28]
 8009f84:	e015      	b.n	8009fb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d20b      	bcs.n	8009fa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff ff9b 	bl	8009ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	e004      	b.n	8009fb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fb2:	f000 fea7 	bl	800ad04 <vPortExitCritical>

	return xReturn;
 8009fb6:	69fb      	ldr	r3, [r7, #28]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000bd4 	.word	0x20000bd4
 8009fc4:	20000be8 	.word	0x20000be8

08009fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fcc:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <vTaskMissedYield+0x14>)
 8009fce:	2201      	movs	r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
}
 8009fd2:	bf00      	nop
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	20000be4 	.word	0x20000be4

08009fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fe8:	f000 f852 	bl	800a090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fec:	4b06      	ldr	r3, [pc, #24]	; (800a008 <prvIdleTask+0x28>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d9f9      	bls.n	8009fe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ff4:	4b05      	ldr	r3, [pc, #20]	; (800a00c <prvIdleTask+0x2c>)
 8009ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a004:	e7f0      	b.n	8009fe8 <prvIdleTask+0x8>
 800a006:	bf00      	nop
 800a008:	20000ad4 	.word	0x20000ad4
 800a00c:	e000ed04 	.word	0xe000ed04

0800a010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a016:	2300      	movs	r3, #0
 800a018:	607b      	str	r3, [r7, #4]
 800a01a:	e00c      	b.n	800a036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4a12      	ldr	r2, [pc, #72]	; (800a070 <prvInitialiseTaskLists+0x60>)
 800a028:	4413      	add	r3, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fceb 	bl	8008a06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3301      	adds	r3, #1
 800a034:	607b      	str	r3, [r7, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b06      	cmp	r3, #6
 800a03a:	d9ef      	bls.n	800a01c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a03c:	480d      	ldr	r0, [pc, #52]	; (800a074 <prvInitialiseTaskLists+0x64>)
 800a03e:	f7fe fce2 	bl	8008a06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a042:	480d      	ldr	r0, [pc, #52]	; (800a078 <prvInitialiseTaskLists+0x68>)
 800a044:	f7fe fcdf 	bl	8008a06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a048:	480c      	ldr	r0, [pc, #48]	; (800a07c <prvInitialiseTaskLists+0x6c>)
 800a04a:	f7fe fcdc 	bl	8008a06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a04e:	480c      	ldr	r0, [pc, #48]	; (800a080 <prvInitialiseTaskLists+0x70>)
 800a050:	f7fe fcd9 	bl	8008a06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a054:	480b      	ldr	r0, [pc, #44]	; (800a084 <prvInitialiseTaskLists+0x74>)
 800a056:	f7fe fcd6 	bl	8008a06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a05a:	4b0b      	ldr	r3, [pc, #44]	; (800a088 <prvInitialiseTaskLists+0x78>)
 800a05c:	4a05      	ldr	r2, [pc, #20]	; (800a074 <prvInitialiseTaskLists+0x64>)
 800a05e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a060:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <prvInitialiseTaskLists+0x7c>)
 800a062:	4a05      	ldr	r2, [pc, #20]	; (800a078 <prvInitialiseTaskLists+0x68>)
 800a064:	601a      	str	r2, [r3, #0]
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000ad4 	.word	0x20000ad4
 800a074:	20000b60 	.word	0x20000b60
 800a078:	20000b74 	.word	0x20000b74
 800a07c:	20000b90 	.word	0x20000b90
 800a080:	20000ba4 	.word	0x20000ba4
 800a084:	20000bbc 	.word	0x20000bbc
 800a088:	20000b88 	.word	0x20000b88
 800a08c:	20000b8c 	.word	0x20000b8c

0800a090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a096:	e019      	b.n	800a0cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a098:	f000 fe04 	bl	800aca4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a09c:	4b10      	ldr	r3, [pc, #64]	; (800a0e0 <prvCheckTasksWaitingTermination+0x50>)
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fd36 	bl	8008b1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <prvCheckTasksWaitingTermination+0x54>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	4a0b      	ldr	r2, [pc, #44]	; (800a0e4 <prvCheckTasksWaitingTermination+0x54>)
 800a0b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0b8:	4b0b      	ldr	r3, [pc, #44]	; (800a0e8 <prvCheckTasksWaitingTermination+0x58>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <prvCheckTasksWaitingTermination+0x58>)
 800a0c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0c2:	f000 fe1f 	bl	800ad04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f810 	bl	800a0ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <prvCheckTasksWaitingTermination+0x58>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e1      	bne.n	800a098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20000ba4 	.word	0x20000ba4
 800a0e4:	20000bd0 	.word	0x20000bd0
 800a0e8:	20000bb8 	.word	0x20000bb8

0800a0ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	334c      	adds	r3, #76	; 0x4c
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fdeb 	bl	800bcd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a104:	2b00      	cmp	r3, #0
 800a106:	d108      	bne.n	800a11a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 ffaf 	bl	800b070 <vPortFree>
				vPortFree( pxTCB );
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 ffac 	bl	800b070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a118:	e018      	b.n	800a14c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a120:	2b01      	cmp	r3, #1
 800a122:	d103      	bne.n	800a12c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 ffa3 	bl	800b070 <vPortFree>
	}
 800a12a:	e00f      	b.n	800a14c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a132:	2b02      	cmp	r3, #2
 800a134:	d00a      	beq.n	800a14c <prvDeleteTCB+0x60>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60fb      	str	r3, [r7, #12]
}
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <prvDeleteTCB+0x5e>
	}
 800a14c:	bf00      	nop
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a15a:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <prvResetNextTaskUnblockTime+0x44>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <prvResetNextTaskUnblockTime+0x14>
 800a164:	2301      	movs	r3, #1
 800a166:	e000      	b.n	800a16a <prvResetNextTaskUnblockTime+0x16>
 800a168:	2300      	movs	r3, #0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d004      	beq.n	800a178 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a16e:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <prvResetNextTaskUnblockTime+0x48>)
 800a170:	f04f 32ff 	mov.w	r2, #4294967295
 800a174:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a176:	e008      	b.n	800a18a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <prvResetNextTaskUnblockTime+0x44>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	4a05      	ldr	r2, [pc, #20]	; (800a19c <prvResetNextTaskUnblockTime+0x48>)
 800a188:	6013      	str	r3, [r2, #0]
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20000b88 	.word	0x20000b88
 800a19c:	20000bf0 	.word	0x20000bf0

0800a1a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <xTaskGetSchedulerState+0x34>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d102      	bne.n	800a1b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	607b      	str	r3, [r7, #4]
 800a1b2:	e008      	b.n	800a1c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1b4:	4b08      	ldr	r3, [pc, #32]	; (800a1d8 <xTaskGetSchedulerState+0x38>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	e001      	b.n	800a1c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1c6:	687b      	ldr	r3, [r7, #4]
	}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	20000bdc 	.word	0x20000bdc
 800a1d8:	20000bf8 	.word	0x20000bf8

0800a1dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d06e      	beq.n	800a2d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a1f2:	4b3a      	ldr	r3, [pc, #232]	; (800a2dc <xTaskPriorityDisinherit+0x100>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d00a      	beq.n	800a212 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	60fb      	str	r3, [r7, #12]
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10a      	bne.n	800a230 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	60bb      	str	r3, [r7, #8]
}
 800a22c:	bf00      	nop
 800a22e:	e7fe      	b.n	800a22e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a242:	429a      	cmp	r2, r3
 800a244:	d044      	beq.n	800a2d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d140      	bne.n	800a2d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3304      	adds	r3, #4
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fc61 	bl	8008b1a <uxListRemove>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d115      	bne.n	800a28a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a262:	491f      	ldr	r1, [pc, #124]	; (800a2e0 <xTaskPriorityDisinherit+0x104>)
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	440b      	add	r3, r1
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10a      	bne.n	800a28a <xTaskPriorityDisinherit+0xae>
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	2201      	movs	r2, #1
 800a27a:	fa02 f303 	lsl.w	r3, r2, r3
 800a27e:	43da      	mvns	r2, r3
 800a280:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <xTaskPriorityDisinherit+0x108>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4013      	ands	r3, r2
 800a286:	4a17      	ldr	r2, [pc, #92]	; (800a2e4 <xTaskPriorityDisinherit+0x108>)
 800a288:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	f1c3 0207 	rsb	r2, r3, #7
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	409a      	lsls	r2, r3
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <xTaskPriorityDisinherit+0x108>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	4a0d      	ldr	r2, [pc, #52]	; (800a2e4 <xTaskPriorityDisinherit+0x108>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a08      	ldr	r2, [pc, #32]	; (800a2e0 <xTaskPriorityDisinherit+0x104>)
 800a2be:	441a      	add	r2, r3
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe fbca 	bl	8008a60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2d0:	697b      	ldr	r3, [r7, #20]
	}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000ad0 	.word	0x20000ad0
 800a2e0:	20000ad4 	.word	0x20000ad4
 800a2e4:	20000bd8 	.word	0x20000bd8

0800a2e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2f2:	4b29      	ldr	r3, [pc, #164]	; (800a398 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2f8:	4b28      	ldr	r3, [pc, #160]	; (800a39c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fc0b 	bl	8008b1a <uxListRemove>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10b      	bne.n	800a322 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a30a:	4b24      	ldr	r3, [pc, #144]	; (800a39c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	2201      	movs	r2, #1
 800a312:	fa02 f303 	lsl.w	r3, r2, r3
 800a316:	43da      	mvns	r2, r3
 800a318:	4b21      	ldr	r3, [pc, #132]	; (800a3a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4013      	ands	r3, r2
 800a31e:	4a20      	ldr	r2, [pc, #128]	; (800a3a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a320:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a328:	d10a      	bne.n	800a340 <prvAddCurrentTaskToDelayedList+0x58>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d007      	beq.n	800a340 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a330:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3304      	adds	r3, #4
 800a336:	4619      	mov	r1, r3
 800a338:	481a      	ldr	r0, [pc, #104]	; (800a3a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a33a:	f7fe fb91 	bl	8008a60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a33e:	e026      	b.n	800a38e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4413      	add	r3, r2
 800a346:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a348:	4b14      	ldr	r3, [pc, #80]	; (800a39c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	429a      	cmp	r2, r3
 800a356:	d209      	bcs.n	800a36c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a358:	4b13      	ldr	r3, [pc, #76]	; (800a3a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3304      	adds	r3, #4
 800a362:	4619      	mov	r1, r3
 800a364:	4610      	mov	r0, r2
 800a366:	f7fe fb9f 	bl	8008aa8 <vListInsert>
}
 800a36a:	e010      	b.n	800a38e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a36c:	4b0f      	ldr	r3, [pc, #60]	; (800a3ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3304      	adds	r3, #4
 800a376:	4619      	mov	r1, r3
 800a378:	4610      	mov	r0, r2
 800a37a:	f7fe fb95 	bl	8008aa8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a37e:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	429a      	cmp	r2, r3
 800a386:	d202      	bcs.n	800a38e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a388:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	6013      	str	r3, [r2, #0]
}
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000bd4 	.word	0x20000bd4
 800a39c:	20000ad0 	.word	0x20000ad0
 800a3a0:	20000bd8 	.word	0x20000bd8
 800a3a4:	20000bbc 	.word	0x20000bbc
 800a3a8:	20000b8c 	.word	0x20000b8c
 800a3ac:	20000b88 	.word	0x20000b88
 800a3b0:	20000bf0 	.word	0x20000bf0

0800a3b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08a      	sub	sp, #40	; 0x28
 800a3b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3be:	f000 fb05 	bl	800a9cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3c2:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <xTimerCreateTimerTask+0x80>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d021      	beq.n	800a40e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3d2:	1d3a      	adds	r2, r7, #4
 800a3d4:	f107 0108 	add.w	r1, r7, #8
 800a3d8:	f107 030c 	add.w	r3, r7, #12
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7f5 ff69 	bl	80002b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	9202      	str	r2, [sp, #8]
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	2306      	movs	r3, #6
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	460a      	mov	r2, r1
 800a3f4:	4910      	ldr	r1, [pc, #64]	; (800a438 <xTimerCreateTimerTask+0x84>)
 800a3f6:	4811      	ldr	r0, [pc, #68]	; (800a43c <xTimerCreateTimerTask+0x88>)
 800a3f8:	f7ff f89c 	bl	8009534 <xTaskCreateStatic>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	4a10      	ldr	r2, [pc, #64]	; (800a440 <xTimerCreateTimerTask+0x8c>)
 800a400:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a402:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <xTimerCreateTimerTask+0x8c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a40a:	2301      	movs	r3, #1
 800a40c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10a      	bne.n	800a42a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	613b      	str	r3, [r7, #16]
}
 800a426:	bf00      	nop
 800a428:	e7fe      	b.n	800a428 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a42a:	697b      	ldr	r3, [r7, #20]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000c2c 	.word	0x20000c2c
 800a438:	0800c6dc 	.word	0x0800c6dc
 800a43c:	0800a609 	.word	0x0800a609
 800a440:	20000c30 	.word	0x20000c30

0800a444 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af02      	add	r7, sp, #8
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a452:	202c      	movs	r0, #44	; 0x2c
 800a454:	f000 fd48 	bl	800aee8 <pvPortMalloc>
 800a458:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00d      	beq.n	800a47c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	68b9      	ldr	r1, [r7, #8]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 f809 	bl	800a486 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800a47c:	697b      	ldr	r3, [r7, #20]
	}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b086      	sub	sp, #24
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
 800a492:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	617b      	str	r3, [r7, #20]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d015      	beq.n	800a4e2 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a4b6:	f000 fa89 	bl	800a9cc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	6a3a      	ldr	r2, [r7, #32]
 800a4d6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fab2 	bl	8008a46 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a4e2:	bf00      	nop
 800a4e4:	3718      	adds	r7, #24
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08a      	sub	sp, #40	; 0x28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	623b      	str	r3, [r7, #32]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a51a:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <xTimerGenericCommand+0x98>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d02a      	beq.n	800a578 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	2b05      	cmp	r3, #5
 800a532:	dc18      	bgt.n	800a566 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a534:	f7ff fe34 	bl	800a1a0 <xTaskGetSchedulerState>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d109      	bne.n	800a552 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a53e:	4b11      	ldr	r3, [pc, #68]	; (800a584 <xTimerGenericCommand+0x98>)
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	f107 0114 	add.w	r1, r7, #20
 800a546:	2300      	movs	r3, #0
 800a548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a54a:	f7fe fc0f 	bl	8008d6c <xQueueGenericSend>
 800a54e:	6278      	str	r0, [r7, #36]	; 0x24
 800a550:	e012      	b.n	800a578 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a552:	4b0c      	ldr	r3, [pc, #48]	; (800a584 <xTimerGenericCommand+0x98>)
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	f107 0114 	add.w	r1, r7, #20
 800a55a:	2300      	movs	r3, #0
 800a55c:	2200      	movs	r2, #0
 800a55e:	f7fe fc05 	bl	8008d6c <xQueueGenericSend>
 800a562:	6278      	str	r0, [r7, #36]	; 0x24
 800a564:	e008      	b.n	800a578 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a566:	4b07      	ldr	r3, [pc, #28]	; (800a584 <xTimerGenericCommand+0x98>)
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f107 0114 	add.w	r1, r7, #20
 800a56e:	2300      	movs	r3, #0
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	f7fe fcf9 	bl	8008f68 <xQueueGenericSendFromISR>
 800a576:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3728      	adds	r7, #40	; 0x28
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20000c2c 	.word	0x20000c2c

0800a588 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af02      	add	r7, sp, #8
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a592:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <prvProcessExpiredTimer+0x7c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe faba 	bl	8008b1a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d122      	bne.n	800a5f4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	18d1      	adds	r1, r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	6978      	ldr	r0, [r7, #20]
 800a5bc:	f000 f8c8 	bl	800a750 <prvInsertTimerInActiveList>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d016      	beq.n	800a5f4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	6978      	ldr	r0, [r7, #20]
 800a5d2:	f7ff ff8b 	bl	800a4ec <xTimerGenericCommand>
 800a5d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60fb      	str	r3, [r7, #12]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	6978      	ldr	r0, [r7, #20]
 800a5fa:	4798      	blx	r3
}
 800a5fc:	bf00      	nop
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20000c24 	.word	0x20000c24

0800a608 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a610:	f107 0308 	add.w	r3, r7, #8
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f857 	bl	800a6c8 <prvGetNextExpireTime>
 800a61a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4619      	mov	r1, r3
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 f803 	bl	800a62c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a626:	f000 f8d5 	bl	800a7d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a62a:	e7f1      	b.n	800a610 <prvTimerTask+0x8>

0800a62c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a636:	f7ff f9c3 	bl	80099c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a63a:	f107 0308 	add.w	r3, r7, #8
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f866 	bl	800a710 <prvSampleTimeNow>
 800a644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d130      	bne.n	800a6ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10a      	bne.n	800a668 <prvProcessTimerOrBlockTask+0x3c>
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	429a      	cmp	r2, r3
 800a658:	d806      	bhi.n	800a668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a65a:	f7ff f9bf 	bl	80099dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a65e:	68f9      	ldr	r1, [r7, #12]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff ff91 	bl	800a588 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a666:	e024      	b.n	800a6b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d008      	beq.n	800a680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a66e:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <prvProcessTimerOrBlockTask+0x90>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	bf0c      	ite	eq
 800a678:	2301      	moveq	r3, #1
 800a67a:	2300      	movne	r3, #0
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a680:	4b0f      	ldr	r3, [pc, #60]	; (800a6c0 <prvProcessTimerOrBlockTask+0x94>)
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	4619      	mov	r1, r3
 800a68e:	f7fe ff1d 	bl	80094cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a692:	f7ff f9a3 	bl	80099dc <xTaskResumeAll>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10a      	bne.n	800a6b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <prvProcessTimerOrBlockTask+0x98>)
 800a69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	f3bf 8f6f 	isb	sy
}
 800a6ac:	e001      	b.n	800a6b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6ae:	f7ff f995 	bl	80099dc <xTaskResumeAll>
}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000c28 	.word	0x20000c28
 800a6c0:	20000c2c 	.word	0x20000c2c
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6d0:	4b0e      	ldr	r3, [pc, #56]	; (800a70c <prvGetNextExpireTime+0x44>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	bf0c      	ite	eq
 800a6da:	2301      	moveq	r3, #1
 800a6dc:	2300      	movne	r3, #0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d105      	bne.n	800a6fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6ee:	4b07      	ldr	r3, [pc, #28]	; (800a70c <prvGetNextExpireTime+0x44>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	e001      	b.n	800a6fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20000c24 	.word	0x20000c24

0800a710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a718:	f7ff f9fc 	bl	8009b14 <xTaskGetTickCount>
 800a71c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a71e:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <prvSampleTimeNow+0x3c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	429a      	cmp	r2, r3
 800a726:	d205      	bcs.n	800a734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a728:	f000 f8ee 	bl	800a908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	e002      	b.n	800a73a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a73a:	4a04      	ldr	r2, [pc, #16]	; (800a74c <prvSampleTimeNow+0x3c>)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a740:	68fb      	ldr	r3, [r7, #12]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20000c34 	.word	0x20000c34

0800a750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	429a      	cmp	r2, r3
 800a774:	d812      	bhi.n	800a79c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	1ad2      	subs	r2, r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	429a      	cmp	r2, r3
 800a782:	d302      	bcc.n	800a78a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	e01b      	b.n	800a7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a78a:	4b10      	ldr	r3, [pc, #64]	; (800a7cc <prvInsertTimerInActiveList+0x7c>)
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3304      	adds	r3, #4
 800a792:	4619      	mov	r1, r3
 800a794:	4610      	mov	r0, r2
 800a796:	f7fe f987 	bl	8008aa8 <vListInsert>
 800a79a:	e012      	b.n	800a7c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d206      	bcs.n	800a7b2 <prvInsertTimerInActiveList+0x62>
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d302      	bcc.n	800a7b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e007      	b.n	800a7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7b2:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <prvInsertTimerInActiveList+0x80>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4610      	mov	r0, r2
 800a7be:	f7fe f973 	bl	8008aa8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7c2:	697b      	ldr	r3, [r7, #20]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000c28 	.word	0x20000c28
 800a7d0:	20000c24 	.word	0x20000c24

0800a7d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08c      	sub	sp, #48	; 0x30
 800a7d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7da:	e081      	b.n	800a8e0 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	db7e      	blt.n	800a8e0 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d004      	beq.n	800a7f8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe f991 	bl	8008b1a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7f8:	1d3b      	adds	r3, r7, #4
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff ff88 	bl	800a710 <prvSampleTimeNow>
 800a800:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2b09      	cmp	r3, #9
 800a806:	d86a      	bhi.n	800a8de <prvProcessReceivedCommands+0x10a>
 800a808:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <prvProcessReceivedCommands+0x3c>)
 800a80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80e:	bf00      	nop
 800a810:	0800a839 	.word	0x0800a839
 800a814:	0800a839 	.word	0x0800a839
 800a818:	0800a839 	.word	0x0800a839
 800a81c:	0800a8e1 	.word	0x0800a8e1
 800a820:	0800a895 	.word	0x0800a895
 800a824:	0800a8cd 	.word	0x0800a8cd
 800a828:	0800a839 	.word	0x0800a839
 800a82c:	0800a839 	.word	0x0800a839
 800a830:	0800a8e1 	.word	0x0800a8e1
 800a834:	0800a895 	.word	0x0800a895
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	18d1      	adds	r1, r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6a3a      	ldr	r2, [r7, #32]
 800a844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a846:	f7ff ff83 	bl	800a750 <prvInsertTimerInActiveList>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d047      	beq.n	800a8e0 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a856:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d13f      	bne.n	800a8e0 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	441a      	add	r2, r3
 800a868:	2300      	movs	r3, #0
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	2300      	movs	r3, #0
 800a86e:	2100      	movs	r1, #0
 800a870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a872:	f7ff fe3b 	bl	800a4ec <xTimerGenericCommand>
 800a876:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d130      	bne.n	800a8e0 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	61bb      	str	r3, [r7, #24]
}
 800a890:	bf00      	nop
 800a892:	e7fe      	b.n	800a892 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	617b      	str	r3, [r7, #20]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	699a      	ldr	r2, [r3, #24]
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	18d1      	adds	r1, r2, r3
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	6a3a      	ldr	r2, [r7, #32]
 800a8c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8c6:	f7ff ff43 	bl	800a750 <prvInsertTimerInActiveList>
					break;
 800a8ca:	e009      	b.n	800a8e0 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d104      	bne.n	800a8e0 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800a8d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8d8:	f000 fbca 	bl	800b070 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8dc:	e000      	b.n	800a8e0 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800a8de:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8e0:	4b08      	ldr	r3, [pc, #32]	; (800a904 <prvProcessReceivedCommands+0x130>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f107 0108 	add.w	r1, r7, #8
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fbd4 	bl	8009098 <xQueueReceive>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f47f af72 	bne.w	800a7dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	3728      	adds	r7, #40	; 0x28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000c2c 	.word	0x20000c2c

0800a908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a90e:	e045      	b.n	800a99c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a910:	4b2c      	ldr	r3, [pc, #176]	; (800a9c4 <prvSwitchTimerLists+0xbc>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a91a:	4b2a      	ldr	r3, [pc, #168]	; (800a9c4 <prvSwitchTimerLists+0xbc>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3304      	adds	r3, #4
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fe f8f6 	bl	8008b1a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d12e      	bne.n	800a99c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4413      	add	r3, r2
 800a946:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d90e      	bls.n	800a96e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a95c:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <prvSwitchTimerLists+0xbc>)
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3304      	adds	r3, #4
 800a964:	4619      	mov	r1, r3
 800a966:	4610      	mov	r0, r2
 800a968:	f7fe f89e 	bl	8008aa8 <vListInsert>
 800a96c:	e016      	b.n	800a99c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a96e:	2300      	movs	r3, #0
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	2300      	movs	r3, #0
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	2100      	movs	r1, #0
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff fdb7 	bl	800a4ec <xTimerGenericCommand>
 800a97e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10a      	bne.n	800a99c <prvSwitchTimerLists+0x94>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	603b      	str	r3, [r7, #0]
}
 800a998:	bf00      	nop
 800a99a:	e7fe      	b.n	800a99a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <prvSwitchTimerLists+0xbc>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1b4      	bne.n	800a910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9a6:	4b07      	ldr	r3, [pc, #28]	; (800a9c4 <prvSwitchTimerLists+0xbc>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9ac:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <prvSwitchTimerLists+0xc0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a04      	ldr	r2, [pc, #16]	; (800a9c4 <prvSwitchTimerLists+0xbc>)
 800a9b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9b4:	4a04      	ldr	r2, [pc, #16]	; (800a9c8 <prvSwitchTimerLists+0xc0>)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	6013      	str	r3, [r2, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	3718      	adds	r7, #24
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20000c24 	.word	0x20000c24
 800a9c8:	20000c28 	.word	0x20000c28

0800a9cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9d2:	f000 f967 	bl	800aca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9d6:	4b15      	ldr	r3, [pc, #84]	; (800aa2c <prvCheckForValidListAndQueue+0x60>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d120      	bne.n	800aa20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9de:	4814      	ldr	r0, [pc, #80]	; (800aa30 <prvCheckForValidListAndQueue+0x64>)
 800a9e0:	f7fe f811 	bl	8008a06 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9e4:	4813      	ldr	r0, [pc, #76]	; (800aa34 <prvCheckForValidListAndQueue+0x68>)
 800a9e6:	f7fe f80e 	bl	8008a06 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9ea:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <prvCheckForValidListAndQueue+0x6c>)
 800a9ec:	4a10      	ldr	r2, [pc, #64]	; (800aa30 <prvCheckForValidListAndQueue+0x64>)
 800a9ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9f0:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <prvCheckForValidListAndQueue+0x70>)
 800a9f2:	4a10      	ldr	r2, [pc, #64]	; (800aa34 <prvCheckForValidListAndQueue+0x68>)
 800a9f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <prvCheckForValidListAndQueue+0x74>)
 800a9fc:	4a11      	ldr	r2, [pc, #68]	; (800aa44 <prvCheckForValidListAndQueue+0x78>)
 800a9fe:	210c      	movs	r1, #12
 800aa00:	200a      	movs	r0, #10
 800aa02:	f7fe f91d 	bl	8008c40 <xQueueGenericCreateStatic>
 800aa06:	4603      	mov	r3, r0
 800aa08:	4a08      	ldr	r2, [pc, #32]	; (800aa2c <prvCheckForValidListAndQueue+0x60>)
 800aa0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa0c:	4b07      	ldr	r3, [pc, #28]	; (800aa2c <prvCheckForValidListAndQueue+0x60>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa14:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <prvCheckForValidListAndQueue+0x60>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	490b      	ldr	r1, [pc, #44]	; (800aa48 <prvCheckForValidListAndQueue+0x7c>)
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fe fd2c 	bl	8009478 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa20:	f000 f970 	bl	800ad04 <vPortExitCritical>
}
 800aa24:	bf00      	nop
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20000c2c 	.word	0x20000c2c
 800aa30:	20000bfc 	.word	0x20000bfc
 800aa34:	20000c10 	.word	0x20000c10
 800aa38:	20000c24 	.word	0x20000c24
 800aa3c:	20000c28 	.word	0x20000c28
 800aa40:	20000cb0 	.word	0x20000cb0
 800aa44:	20000c38 	.word	0x20000c38
 800aa48:	0800c6e4 	.word	0x0800c6e4

0800aa4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3b04      	subs	r3, #4
 800aa5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3b04      	subs	r3, #4
 800aa6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f023 0201 	bic.w	r2, r3, #1
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3b04      	subs	r3, #4
 800aa7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa7c:	4a0c      	ldr	r2, [pc, #48]	; (800aab0 <pxPortInitialiseStack+0x64>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3b14      	subs	r3, #20
 800aa86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3b04      	subs	r3, #4
 800aa92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f06f 0202 	mvn.w	r2, #2
 800aa9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3b20      	subs	r3, #32
 800aaa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	0800aab5 	.word	0x0800aab5

0800aab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aabe:	4b12      	ldr	r3, [pc, #72]	; (800ab08 <prvTaskExitError+0x54>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d00a      	beq.n	800aade <prvTaskExitError+0x2a>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	60fb      	str	r3, [r7, #12]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <prvTaskExitError+0x28>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60bb      	str	r3, [r7, #8]
}
 800aaf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aaf2:	bf00      	nop
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0fc      	beq.n	800aaf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aafa:	bf00      	nop
 800aafc:	bf00      	nop
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	2000011c 	.word	0x2000011c
 800ab0c:	00000000 	.word	0x00000000

0800ab10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab10:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <pxCurrentTCBConst2>)
 800ab12:	6819      	ldr	r1, [r3, #0]
 800ab14:	6808      	ldr	r0, [r1, #0]
 800ab16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1a:	f380 8809 	msr	PSP, r0
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f04f 0000 	mov.w	r0, #0
 800ab26:	f380 8811 	msr	BASEPRI, r0
 800ab2a:	4770      	bx	lr
 800ab2c:	f3af 8000 	nop.w

0800ab30 <pxCurrentTCBConst2>:
 800ab30:	20000ad0 	.word	0x20000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop

0800ab38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab38:	4808      	ldr	r0, [pc, #32]	; (800ab5c <prvPortStartFirstTask+0x24>)
 800ab3a:	6800      	ldr	r0, [r0, #0]
 800ab3c:	6800      	ldr	r0, [r0, #0]
 800ab3e:	f380 8808 	msr	MSP, r0
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	f380 8814 	msr	CONTROL, r0
 800ab4a:	b662      	cpsie	i
 800ab4c:	b661      	cpsie	f
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	df00      	svc	0
 800ab58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab5a:	bf00      	nop
 800ab5c:	e000ed08 	.word	0xe000ed08

0800ab60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab66:	4b46      	ldr	r3, [pc, #280]	; (800ac80 <xPortStartScheduler+0x120>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a46      	ldr	r2, [pc, #280]	; (800ac84 <xPortStartScheduler+0x124>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d10a      	bne.n	800ab86 <xPortStartScheduler+0x26>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	613b      	str	r3, [r7, #16]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab86:	4b3e      	ldr	r3, [pc, #248]	; (800ac80 <xPortStartScheduler+0x120>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a3f      	ldr	r2, [pc, #252]	; (800ac88 <xPortStartScheduler+0x128>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d10a      	bne.n	800aba6 <xPortStartScheduler+0x46>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	60fb      	str	r3, [r7, #12]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aba6:	4b39      	ldr	r3, [pc, #228]	; (800ac8c <xPortStartScheduler+0x12c>)
 800aba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	22ff      	movs	r2, #255	; 0xff
 800abb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	4b31      	ldr	r3, [pc, #196]	; (800ac90 <xPortStartScheduler+0x130>)
 800abcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abce:	4b31      	ldr	r3, [pc, #196]	; (800ac94 <xPortStartScheduler+0x134>)
 800abd0:	2207      	movs	r2, #7
 800abd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abd4:	e009      	b.n	800abea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800abd6:	4b2f      	ldr	r3, [pc, #188]	; (800ac94 <xPortStartScheduler+0x134>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3b01      	subs	r3, #1
 800abdc:	4a2d      	ldr	r2, [pc, #180]	; (800ac94 <xPortStartScheduler+0x134>)
 800abde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abe0:	78fb      	ldrb	r3, [r7, #3]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abea:	78fb      	ldrb	r3, [r7, #3]
 800abec:	b2db      	uxtb	r3, r3
 800abee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf2:	2b80      	cmp	r3, #128	; 0x80
 800abf4:	d0ef      	beq.n	800abd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abf6:	4b27      	ldr	r3, [pc, #156]	; (800ac94 <xPortStartScheduler+0x134>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f1c3 0307 	rsb	r3, r3, #7
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d00a      	beq.n	800ac18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	60bb      	str	r3, [r7, #8]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac18:	4b1e      	ldr	r3, [pc, #120]	; (800ac94 <xPortStartScheduler+0x134>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	021b      	lsls	r3, r3, #8
 800ac1e:	4a1d      	ldr	r2, [pc, #116]	; (800ac94 <xPortStartScheduler+0x134>)
 800ac20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac22:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <xPortStartScheduler+0x134>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac2a:	4a1a      	ldr	r2, [pc, #104]	; (800ac94 <xPortStartScheduler+0x134>)
 800ac2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac36:	4b18      	ldr	r3, [pc, #96]	; (800ac98 <xPortStartScheduler+0x138>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a17      	ldr	r2, [pc, #92]	; (800ac98 <xPortStartScheduler+0x138>)
 800ac3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac42:	4b15      	ldr	r3, [pc, #84]	; (800ac98 <xPortStartScheduler+0x138>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a14      	ldr	r2, [pc, #80]	; (800ac98 <xPortStartScheduler+0x138>)
 800ac48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac4e:	f000 f8dd 	bl	800ae0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac52:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <xPortStartScheduler+0x13c>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac58:	f000 f8fc 	bl	800ae54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac5c:	4b10      	ldr	r3, [pc, #64]	; (800aca0 <xPortStartScheduler+0x140>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a0f      	ldr	r2, [pc, #60]	; (800aca0 <xPortStartScheduler+0x140>)
 800ac62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac68:	f7ff ff66 	bl	800ab38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac6c:	f7ff f820 	bl	8009cb0 <vTaskSwitchContext>
	prvTaskExitError();
 800ac70:	f7ff ff20 	bl	800aab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	e000ed00 	.word	0xe000ed00
 800ac84:	410fc271 	.word	0x410fc271
 800ac88:	410fc270 	.word	0x410fc270
 800ac8c:	e000e400 	.word	0xe000e400
 800ac90:	20000cf8 	.word	0x20000cf8
 800ac94:	20000cfc 	.word	0x20000cfc
 800ac98:	e000ed20 	.word	0xe000ed20
 800ac9c:	2000011c 	.word	0x2000011c
 800aca0:	e000ef34 	.word	0xe000ef34

0800aca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	607b      	str	r3, [r7, #4]
}
 800acbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acbe:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <vPortEnterCritical+0x58>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	4a0d      	ldr	r2, [pc, #52]	; (800acfc <vPortEnterCritical+0x58>)
 800acc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acc8:	4b0c      	ldr	r3, [pc, #48]	; (800acfc <vPortEnterCritical+0x58>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d10f      	bne.n	800acf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acd0:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <vPortEnterCritical+0x5c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	603b      	str	r3, [r7, #0]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <vPortEnterCritical+0x4a>
	}
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	2000011c 	.word	0x2000011c
 800ad00:	e000ed04 	.word	0xe000ed04

0800ad04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad0a:	4b12      	ldr	r3, [pc, #72]	; (800ad54 <vPortExitCritical+0x50>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10a      	bne.n	800ad28 <vPortExitCritical+0x24>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	607b      	str	r3, [r7, #4]
}
 800ad24:	bf00      	nop
 800ad26:	e7fe      	b.n	800ad26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad28:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <vPortExitCritical+0x50>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	4a09      	ldr	r2, [pc, #36]	; (800ad54 <vPortExitCritical+0x50>)
 800ad30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad32:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <vPortExitCritical+0x50>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d105      	bne.n	800ad46 <vPortExitCritical+0x42>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	f383 8811 	msr	BASEPRI, r3
}
 800ad44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad46:	bf00      	nop
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	2000011c 	.word	0x2000011c
	...

0800ad60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad60:	f3ef 8009 	mrs	r0, PSP
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	4b15      	ldr	r3, [pc, #84]	; (800adc0 <pxCurrentTCBConst>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	f01e 0f10 	tst.w	lr, #16
 800ad70:	bf08      	it	eq
 800ad72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7a:	6010      	str	r0, [r2, #0]
 800ad7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad84:	f380 8811 	msr	BASEPRI, r0
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f7fe ff8e 	bl	8009cb0 <vTaskSwitchContext>
 800ad94:	f04f 0000 	mov.w	r0, #0
 800ad98:	f380 8811 	msr	BASEPRI, r0
 800ad9c:	bc09      	pop	{r0, r3}
 800ad9e:	6819      	ldr	r1, [r3, #0]
 800ada0:	6808      	ldr	r0, [r1, #0]
 800ada2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada6:	f01e 0f10 	tst.w	lr, #16
 800adaa:	bf08      	it	eq
 800adac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800adb0:	f380 8809 	msr	PSP, r0
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	f3af 8000 	nop.w

0800adc0 <pxCurrentTCBConst>:
 800adc0:	20000ad0 	.word	0x20000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800adc4:	bf00      	nop
 800adc6:	bf00      	nop

0800adc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	607b      	str	r3, [r7, #4]
}
 800ade0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ade2:	f7fe fea7 	bl	8009b34 <xTaskIncrementTick>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adec:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <SysTick_Handler+0x40>)
 800adee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	2300      	movs	r3, #0
 800adf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	f383 8811 	msr	BASEPRI, r3
}
 800adfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <vPortSetupTimerInterrupt+0x34>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae16:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <vPortSetupTimerInterrupt+0x38>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <vPortSetupTimerInterrupt+0x3c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a0a      	ldr	r2, [pc, #40]	; (800ae4c <vPortSetupTimerInterrupt+0x40>)
 800ae22:	fba2 2303 	umull	r2, r3, r2, r3
 800ae26:	099b      	lsrs	r3, r3, #6
 800ae28:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <vPortSetupTimerInterrupt+0x44>)
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae2e:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <vPortSetupTimerInterrupt+0x34>)
 800ae30:	2207      	movs	r2, #7
 800ae32:	601a      	str	r2, [r3, #0]
}
 800ae34:	bf00      	nop
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	e000e010 	.word	0xe000e010
 800ae44:	e000e018 	.word	0xe000e018
 800ae48:	20000000 	.word	0x20000000
 800ae4c:	10624dd3 	.word	0x10624dd3
 800ae50:	e000e014 	.word	0xe000e014

0800ae54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae64 <vPortEnableVFP+0x10>
 800ae58:	6801      	ldr	r1, [r0, #0]
 800ae5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae5e:	6001      	str	r1, [r0, #0]
 800ae60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae62:	bf00      	nop
 800ae64:	e000ed88 	.word	0xe000ed88

0800ae68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae6e:	f3ef 8305 	mrs	r3, IPSR
 800ae72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b0f      	cmp	r3, #15
 800ae78:	d914      	bls.n	800aea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae7a:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <vPortValidateInterruptPriority+0x70>)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	4413      	add	r3, r2
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae84:	4b15      	ldr	r3, [pc, #84]	; (800aedc <vPortValidateInterruptPriority+0x74>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	7afa      	ldrb	r2, [r7, #11]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d20a      	bcs.n	800aea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	607b      	str	r3, [r7, #4]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aea4:	4b0e      	ldr	r3, [pc, #56]	; (800aee0 <vPortValidateInterruptPriority+0x78>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <vPortValidateInterruptPriority+0x7c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d90a      	bls.n	800aeca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	603b      	str	r3, [r7, #0]
}
 800aec6:	bf00      	nop
 800aec8:	e7fe      	b.n	800aec8 <vPortValidateInterruptPriority+0x60>
	}
 800aeca:	bf00      	nop
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	e000e3f0 	.word	0xe000e3f0
 800aedc:	20000cf8 	.word	0x20000cf8
 800aee0:	e000ed0c 	.word	0xe000ed0c
 800aee4:	20000cfc 	.word	0x20000cfc

0800aee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08a      	sub	sp, #40	; 0x28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aef0:	2300      	movs	r3, #0
 800aef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aef4:	f7fe fd64 	bl	80099c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aef8:	4b58      	ldr	r3, [pc, #352]	; (800b05c <pvPortMalloc+0x174>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af00:	f000 f910 	bl	800b124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af04:	4b56      	ldr	r3, [pc, #344]	; (800b060 <pvPortMalloc+0x178>)
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4013      	ands	r3, r2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f040 808e 	bne.w	800b02e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d01d      	beq.n	800af54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af18:	2208      	movs	r2, #8
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4413      	add	r3, r2
 800af1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f003 0307 	and.w	r3, r3, #7
 800af26:	2b00      	cmp	r3, #0
 800af28:	d014      	beq.n	800af54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f023 0307 	bic.w	r3, r3, #7
 800af30:	3308      	adds	r3, #8
 800af32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <pvPortMalloc+0x6c>
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	617b      	str	r3, [r7, #20]
}
 800af50:	bf00      	nop
 800af52:	e7fe      	b.n	800af52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d069      	beq.n	800b02e <pvPortMalloc+0x146>
 800af5a:	4b42      	ldr	r3, [pc, #264]	; (800b064 <pvPortMalloc+0x17c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d864      	bhi.n	800b02e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af64:	4b40      	ldr	r3, [pc, #256]	; (800b068 <pvPortMalloc+0x180>)
 800af66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af68:	4b3f      	ldr	r3, [pc, #252]	; (800b068 <pvPortMalloc+0x180>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af6e:	e004      	b.n	800af7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d903      	bls.n	800af8c <pvPortMalloc+0xa4>
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1f1      	bne.n	800af70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af8c:	4b33      	ldr	r3, [pc, #204]	; (800b05c <pvPortMalloc+0x174>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af92:	429a      	cmp	r2, r3
 800af94:	d04b      	beq.n	800b02e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2208      	movs	r2, #8
 800af9c:	4413      	add	r3, r2
 800af9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	2308      	movs	r3, #8
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d91f      	bls.n	800aff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4413      	add	r3, r2
 800afbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <pvPortMalloc+0xf8>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	613b      	str	r3, [r7, #16]
}
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	1ad2      	subs	r2, r2, r3
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aff2:	69b8      	ldr	r0, [r7, #24]
 800aff4:	f000 f8f8 	bl	800b1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aff8:	4b1a      	ldr	r3, [pc, #104]	; (800b064 <pvPortMalloc+0x17c>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	4a18      	ldr	r2, [pc, #96]	; (800b064 <pvPortMalloc+0x17c>)
 800b004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b006:	4b17      	ldr	r3, [pc, #92]	; (800b064 <pvPortMalloc+0x17c>)
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	4b18      	ldr	r3, [pc, #96]	; (800b06c <pvPortMalloc+0x184>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d203      	bcs.n	800b01a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b012:	4b14      	ldr	r3, [pc, #80]	; (800b064 <pvPortMalloc+0x17c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a15      	ldr	r2, [pc, #84]	; (800b06c <pvPortMalloc+0x184>)
 800b018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	4b10      	ldr	r3, [pc, #64]	; (800b060 <pvPortMalloc+0x178>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	431a      	orrs	r2, r3
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	2200      	movs	r2, #0
 800b02c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b02e:	f7fe fcd5 	bl	80099dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	f003 0307 	and.w	r3, r3, #7
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00a      	beq.n	800b052 <pvPortMalloc+0x16a>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	60fb      	str	r3, [r7, #12]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <pvPortMalloc+0x168>
	return pvReturn;
 800b052:	69fb      	ldr	r3, [r7, #28]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3728      	adds	r7, #40	; 0x28
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20001908 	.word	0x20001908
 800b060:	20001914 	.word	0x20001914
 800b064:	2000190c 	.word	0x2000190c
 800b068:	20001900 	.word	0x20001900
 800b06c:	20001910 	.word	0x20001910

0800b070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d048      	beq.n	800b114 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b082:	2308      	movs	r3, #8
 800b084:	425b      	negs	r3, r3
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	4413      	add	r3, r2
 800b08a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	4b21      	ldr	r3, [pc, #132]	; (800b11c <vPortFree+0xac>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4013      	ands	r3, r2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10a      	bne.n	800b0b4 <vPortFree+0x44>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	60fb      	str	r3, [r7, #12]
}
 800b0b0:	bf00      	nop
 800b0b2:	e7fe      	b.n	800b0b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <vPortFree+0x62>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	60bb      	str	r3, [r7, #8]
}
 800b0ce:	bf00      	nop
 800b0d0:	e7fe      	b.n	800b0d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	4b11      	ldr	r3, [pc, #68]	; (800b11c <vPortFree+0xac>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d019      	beq.n	800b114 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d115      	bne.n	800b114 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <vPortFree+0xac>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	43db      	mvns	r3, r3
 800b0f2:	401a      	ands	r2, r3
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0f8:	f7fe fc62 	bl	80099c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	4b07      	ldr	r3, [pc, #28]	; (800b120 <vPortFree+0xb0>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4413      	add	r3, r2
 800b106:	4a06      	ldr	r2, [pc, #24]	; (800b120 <vPortFree+0xb0>)
 800b108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b10a:	6938      	ldr	r0, [r7, #16]
 800b10c:	f000 f86c 	bl	800b1e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b110:	f7fe fc64 	bl	80099dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b114:	bf00      	nop
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20001914 	.word	0x20001914
 800b120:	2000190c 	.word	0x2000190c

0800b124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b12a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b130:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <prvHeapInit+0xac>)
 800b132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f003 0307 	and.w	r3, r3, #7
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00c      	beq.n	800b158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3307      	adds	r3, #7
 800b142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f023 0307 	bic.w	r3, r3, #7
 800b14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	4a1f      	ldr	r2, [pc, #124]	; (800b1d0 <prvHeapInit+0xac>)
 800b154:	4413      	add	r3, r2
 800b156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b15c:	4a1d      	ldr	r2, [pc, #116]	; (800b1d4 <prvHeapInit+0xb0>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b162:	4b1c      	ldr	r3, [pc, #112]	; (800b1d4 <prvHeapInit+0xb0>)
 800b164:	2200      	movs	r2, #0
 800b166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	4413      	add	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b170:	2208      	movs	r2, #8
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0307 	bic.w	r3, r3, #7
 800b17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4a15      	ldr	r2, [pc, #84]	; (800b1d8 <prvHeapInit+0xb4>)
 800b184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b186:	4b14      	ldr	r3, [pc, #80]	; (800b1d8 <prvHeapInit+0xb4>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2200      	movs	r2, #0
 800b18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b18e:	4b12      	ldr	r3, [pc, #72]	; (800b1d8 <prvHeapInit+0xb4>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	1ad2      	subs	r2, r2, r3
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1a4:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <prvHeapInit+0xb4>)
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	4a0a      	ldr	r2, [pc, #40]	; (800b1dc <prvHeapInit+0xb8>)
 800b1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	4a09      	ldr	r2, [pc, #36]	; (800b1e0 <prvHeapInit+0xbc>)
 800b1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1bc:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <prvHeapInit+0xc0>)
 800b1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1c2:	601a      	str	r2, [r3, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	20000d00 	.word	0x20000d00
 800b1d4:	20001900 	.word	0x20001900
 800b1d8:	20001908 	.word	0x20001908
 800b1dc:	20001910 	.word	0x20001910
 800b1e0:	2000190c 	.word	0x2000190c
 800b1e4:	20001914 	.word	0x20001914

0800b1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1f0:	4b28      	ldr	r3, [pc, #160]	; (800b294 <prvInsertBlockIntoFreeList+0xac>)
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	e002      	b.n	800b1fc <prvInsertBlockIntoFreeList+0x14>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	429a      	cmp	r2, r3
 800b204:	d8f7      	bhi.n	800b1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	4413      	add	r3, r2
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	429a      	cmp	r2, r3
 800b216:	d108      	bne.n	800b22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	441a      	add	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	441a      	add	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d118      	bne.n	800b270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <prvInsertBlockIntoFreeList+0xb0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d00d      	beq.n	800b266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	441a      	add	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	e008      	b.n	800b278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b266:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <prvInsertBlockIntoFreeList+0xb0>)
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	e003      	b.n	800b278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d002      	beq.n	800b286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b286:	bf00      	nop
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20001900 	.word	0x20001900
 800b298:	20001908 	.word	0x20001908

0800b29c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4912      	ldr	r1, [pc, #72]	; (800b2ec <MX_USB_DEVICE_Init+0x50>)
 800b2a4:	4812      	ldr	r0, [pc, #72]	; (800b2f0 <MX_USB_DEVICE_Init+0x54>)
 800b2a6:	f7fc fb0d 	bl	80078c4 <USBD_Init>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2b0:	f7f5 fa7a 	bl	80007a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b2b4:	490f      	ldr	r1, [pc, #60]	; (800b2f4 <MX_USB_DEVICE_Init+0x58>)
 800b2b6:	480e      	ldr	r0, [pc, #56]	; (800b2f0 <MX_USB_DEVICE_Init+0x54>)
 800b2b8:	f7fc fb2f 	bl	800791a <USBD_RegisterClass>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b2c2:	f7f5 fa71 	bl	80007a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b2c6:	490c      	ldr	r1, [pc, #48]	; (800b2f8 <MX_USB_DEVICE_Init+0x5c>)
 800b2c8:	4809      	ldr	r0, [pc, #36]	; (800b2f0 <MX_USB_DEVICE_Init+0x54>)
 800b2ca:	f7fc fa5d 	bl	8007788 <USBD_CDC_RegisterInterface>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b2d4:	f7f5 fa68 	bl	80007a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b2d8:	4805      	ldr	r0, [pc, #20]	; (800b2f0 <MX_USB_DEVICE_Init+0x54>)
 800b2da:	f7fc fb38 	bl	800794e <USBD_Start>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b2e4:	f7f5 fa60 	bl	80007a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b2e8:	bf00      	nop
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	20000130 	.word	0x20000130
 800b2f0:	20001918 	.word	0x20001918
 800b2f4:	20000018 	.word	0x20000018
 800b2f8:	20000120 	.word	0x20000120

0800b2fc <LED_ON_OFF>:
static int8_t CDC_DeInit_FS(void);
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void LED_ON_OFF(uint8_t *data) {
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t *) data, strlen((char *)data));
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7f4 ff63 	bl	80001d0 <strlen>
 800b30a:	4603      	mov	r3, r0
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f8ab 	bl	800b46c <CDC_Transmit_FS>
				HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_RESET);
			else if(data[3] == '1' && data[4] == '0')
				HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
		}
	}*/
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b324:	2200      	movs	r2, #0
 800b326:	4905      	ldr	r1, [pc, #20]	; (800b33c <CDC_Init_FS+0x1c>)
 800b328:	4805      	ldr	r0, [pc, #20]	; (800b340 <CDC_Init_FS+0x20>)
 800b32a:	f7fc fa44 	bl	80077b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b32e:	4905      	ldr	r1, [pc, #20]	; (800b344 <CDC_Init_FS+0x24>)
 800b330:	4803      	ldr	r0, [pc, #12]	; (800b340 <CDC_Init_FS+0x20>)
 800b332:	f7fc fa5a 	bl	80077ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b336:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b338:	4618      	mov	r0, r3
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	20001fdc 	.word	0x20001fdc
 800b340:	20001918 	.word	0x20001918
 800b344:	20001bdc 	.word	0x20001bdc

0800b348 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b34c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b34e:	4618      	mov	r0, r3
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	6039      	str	r1, [r7, #0]
 800b362:	71fb      	strb	r3, [r7, #7]
 800b364:	4613      	mov	r3, r2
 800b366:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b368:	79fb      	ldrb	r3, [r7, #7]
 800b36a:	2b23      	cmp	r3, #35	; 0x23
 800b36c:	d84a      	bhi.n	800b404 <CDC_Control_FS+0xac>
 800b36e:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <CDC_Control_FS+0x1c>)
 800b370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b374:	0800b405 	.word	0x0800b405
 800b378:	0800b405 	.word	0x0800b405
 800b37c:	0800b405 	.word	0x0800b405
 800b380:	0800b405 	.word	0x0800b405
 800b384:	0800b405 	.word	0x0800b405
 800b388:	0800b405 	.word	0x0800b405
 800b38c:	0800b405 	.word	0x0800b405
 800b390:	0800b405 	.word	0x0800b405
 800b394:	0800b405 	.word	0x0800b405
 800b398:	0800b405 	.word	0x0800b405
 800b39c:	0800b405 	.word	0x0800b405
 800b3a0:	0800b405 	.word	0x0800b405
 800b3a4:	0800b405 	.word	0x0800b405
 800b3a8:	0800b405 	.word	0x0800b405
 800b3ac:	0800b405 	.word	0x0800b405
 800b3b0:	0800b405 	.word	0x0800b405
 800b3b4:	0800b405 	.word	0x0800b405
 800b3b8:	0800b405 	.word	0x0800b405
 800b3bc:	0800b405 	.word	0x0800b405
 800b3c0:	0800b405 	.word	0x0800b405
 800b3c4:	0800b405 	.word	0x0800b405
 800b3c8:	0800b405 	.word	0x0800b405
 800b3cc:	0800b405 	.word	0x0800b405
 800b3d0:	0800b405 	.word	0x0800b405
 800b3d4:	0800b405 	.word	0x0800b405
 800b3d8:	0800b405 	.word	0x0800b405
 800b3dc:	0800b405 	.word	0x0800b405
 800b3e0:	0800b405 	.word	0x0800b405
 800b3e4:	0800b405 	.word	0x0800b405
 800b3e8:	0800b405 	.word	0x0800b405
 800b3ec:	0800b405 	.word	0x0800b405
 800b3f0:	0800b405 	.word	0x0800b405
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b405 	.word	0x0800b405
 800b3fc:	0800b405 	.word	0x0800b405
 800b400:	0800b405 	.word	0x0800b405
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b404:	bf00      	nop
  }

  return (USBD_OK);
 800b406:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	4810      	ldr	r0, [pc, #64]	; (800b464 <CDC_Receive_FS+0x50>)
 800b422:	f7fc f9e2 	bl	80077ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b426:	480f      	ldr	r0, [pc, #60]	; (800b464 <CDC_Receive_FS+0x50>)
 800b428:	f7fc fa22 	bl	8007870 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	73fb      	strb	r3, [r7, #15]
  memset(USB_RX_Buffer, '\0', 64);
 800b432:	2240      	movs	r2, #64	; 0x40
 800b434:	2100      	movs	r1, #0
 800b436:	480c      	ldr	r0, [pc, #48]	; (800b468 <CDC_Receive_FS+0x54>)
 800b438:	f000 fc44 	bl	800bcc4 <memset>
  memcpy(USB_RX_Buffer, Buf, len);
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	461a      	mov	r2, r3
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	4809      	ldr	r0, [pc, #36]	; (800b468 <CDC_Receive_FS+0x54>)
 800b444:	f000 fcc8 	bl	800bdd8 <memcpy>
  memset(Buf, '\0', len);
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	461a      	mov	r2, r3
 800b44c:	2100      	movs	r1, #0
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fc38 	bl	800bcc4 <memset>
  LED_ON_OFF(USB_RX_Buffer);
 800b454:	4804      	ldr	r0, [pc, #16]	; (800b468 <CDC_Receive_FS+0x54>)
 800b456:	f7ff ff51 	bl	800b2fc <LED_ON_OFF>
  return (USBD_OK);
 800b45a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	20001918 	.word	0x20001918
 800b468:	200009e8 	.word	0x200009e8

0800b46c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b47c:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <CDC_Transmit_FS+0x48>)
 800b47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b482:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b48e:	2301      	movs	r3, #1
 800b490:	e00b      	b.n	800b4aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b492:	887b      	ldrh	r3, [r7, #2]
 800b494:	461a      	mov	r2, r3
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	4806      	ldr	r0, [pc, #24]	; (800b4b4 <CDC_Transmit_FS+0x48>)
 800b49a:	f7fc f98c 	bl	80077b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b49e:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <CDC_Transmit_FS+0x48>)
 800b4a0:	f7fc f9b7 	bl	8007812 <USBD_CDC_TransmitPacket>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20001918 	.word	0x20001918

0800b4b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	6039      	str	r1, [r7, #0]
 800b4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2212      	movs	r2, #18
 800b4c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4ca:	4b03      	ldr	r3, [pc, #12]	; (800b4d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	2000014c 	.word	0x2000014c

0800b4dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2204      	movs	r2, #4
 800b4ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4ee:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	20000160 	.word	0x20000160

0800b500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	6039      	str	r1, [r7, #0]
 800b50a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b50c:	79fb      	ldrb	r3, [r7, #7]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d105      	bne.n	800b51e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	4907      	ldr	r1, [pc, #28]	; (800b534 <USBD_FS_ProductStrDescriptor+0x34>)
 800b516:	4808      	ldr	r0, [pc, #32]	; (800b538 <USBD_FS_ProductStrDescriptor+0x38>)
 800b518:	f7fd f997 	bl	800884a <USBD_GetString>
 800b51c:	e004      	b.n	800b528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	4904      	ldr	r1, [pc, #16]	; (800b534 <USBD_FS_ProductStrDescriptor+0x34>)
 800b522:	4805      	ldr	r0, [pc, #20]	; (800b538 <USBD_FS_ProductStrDescriptor+0x38>)
 800b524:	f7fd f991 	bl	800884a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b528:	4b02      	ldr	r3, [pc, #8]	; (800b534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	200023dc 	.word	0x200023dc
 800b538:	0800c6ec 	.word	0x0800c6ec

0800b53c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	6039      	str	r1, [r7, #0]
 800b546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	4904      	ldr	r1, [pc, #16]	; (800b55c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b54c:	4804      	ldr	r0, [pc, #16]	; (800b560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b54e:	f7fd f97c 	bl	800884a <USBD_GetString>
  return USBD_StrDesc;
 800b552:	4b02      	ldr	r3, [pc, #8]	; (800b55c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	200023dc 	.word	0x200023dc
 800b560:	0800c700 	.word	0x0800c700

0800b564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	6039      	str	r1, [r7, #0]
 800b56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	221a      	movs	r2, #26
 800b574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b576:	f000 f843 	bl	800b600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b57a:	4b02      	ldr	r3, [pc, #8]	; (800b584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000164 	.word	0x20000164

0800b588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	6039      	str	r1, [r7, #0]
 800b592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d105      	bne.n	800b5a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	4907      	ldr	r1, [pc, #28]	; (800b5bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b59e:	4808      	ldr	r0, [pc, #32]	; (800b5c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5a0:	f7fd f953 	bl	800884a <USBD_GetString>
 800b5a4:	e004      	b.n	800b5b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	4904      	ldr	r1, [pc, #16]	; (800b5bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5aa:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5ac:	f7fd f94d 	bl	800884a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5b0:	4b02      	ldr	r3, [pc, #8]	; (800b5bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200023dc 	.word	0x200023dc
 800b5c0:	0800c714 	.word	0x0800c714

0800b5c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	6039      	str	r1, [r7, #0]
 800b5ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d105      	bne.n	800b5e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	4907      	ldr	r1, [pc, #28]	; (800b5f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5da:	4808      	ldr	r0, [pc, #32]	; (800b5fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5dc:	f7fd f935 	bl	800884a <USBD_GetString>
 800b5e0:	e004      	b.n	800b5ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	4904      	ldr	r1, [pc, #16]	; (800b5f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5e6:	4805      	ldr	r0, [pc, #20]	; (800b5fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5e8:	f7fd f92f 	bl	800884a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5ec:	4b02      	ldr	r3, [pc, #8]	; (800b5f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	200023dc 	.word	0x200023dc
 800b5fc:	0800c720 	.word	0x0800c720

0800b600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b606:	4b0f      	ldr	r3, [pc, #60]	; (800b644 <Get_SerialNum+0x44>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b60c:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <Get_SerialNum+0x48>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b612:	4b0e      	ldr	r3, [pc, #56]	; (800b64c <Get_SerialNum+0x4c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4413      	add	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b626:	2208      	movs	r2, #8
 800b628:	4909      	ldr	r1, [pc, #36]	; (800b650 <Get_SerialNum+0x50>)
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f000 f814 	bl	800b658 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b630:	2204      	movs	r2, #4
 800b632:	4908      	ldr	r1, [pc, #32]	; (800b654 <Get_SerialNum+0x54>)
 800b634:	68b8      	ldr	r0, [r7, #8]
 800b636:	f000 f80f 	bl	800b658 <IntToUnicode>
  }
}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	1ffff7ac 	.word	0x1ffff7ac
 800b648:	1ffff7b0 	.word	0x1ffff7b0
 800b64c:	1ffff7b4 	.word	0x1ffff7b4
 800b650:	20000166 	.word	0x20000166
 800b654:	20000176 	.word	0x20000176

0800b658 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b658:	b480      	push	{r7}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	4613      	mov	r3, r2
 800b664:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b66a:	2300      	movs	r3, #0
 800b66c:	75fb      	strb	r3, [r7, #23]
 800b66e:	e027      	b.n	800b6c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	0f1b      	lsrs	r3, r3, #28
 800b674:	2b09      	cmp	r3, #9
 800b676:	d80b      	bhi.n	800b690 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	0f1b      	lsrs	r3, r3, #28
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	005b      	lsls	r3, r3, #1
 800b682:	4619      	mov	r1, r3
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	440b      	add	r3, r1
 800b688:	3230      	adds	r2, #48	; 0x30
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
 800b68e:	e00a      	b.n	800b6a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	0f1b      	lsrs	r3, r3, #28
 800b694:	b2da      	uxtb	r2, r3
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	4619      	mov	r1, r3
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	440b      	add	r3, r1
 800b6a0:	3237      	adds	r2, #55	; 0x37
 800b6a2:	b2d2      	uxtb	r2, r2
 800b6a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6ac:	7dfb      	ldrb	r3, [r7, #23]
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	75fb      	strb	r3, [r7, #23]
 800b6c0:	7dfa      	ldrb	r2, [r7, #23]
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d3d3      	bcc.n	800b670 <IntToUnicode+0x18>
  }
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08a      	sub	sp, #40	; 0x28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6e0:	f107 0314 	add.w	r3, r7, #20
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	605a      	str	r2, [r3, #4]
 800b6ea:	609a      	str	r2, [r3, #8]
 800b6ec:	60da      	str	r2, [r3, #12]
 800b6ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a1c      	ldr	r2, [pc, #112]	; (800b768 <HAL_PCD_MspInit+0x90>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d131      	bne.n	800b75e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6fa:	4b1c      	ldr	r3, [pc, #112]	; (800b76c <HAL_PCD_MspInit+0x94>)
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	4a1b      	ldr	r2, [pc, #108]	; (800b76c <HAL_PCD_MspInit+0x94>)
 800b700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b704:	6153      	str	r3, [r2, #20]
 800b706:	4b19      	ldr	r3, [pc, #100]	; (800b76c <HAL_PCD_MspInit+0x94>)
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b712:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b718:	2302      	movs	r3, #2
 800b71a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b71c:	2300      	movs	r3, #0
 800b71e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b720:	2303      	movs	r3, #3
 800b722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b724:	230e      	movs	r3, #14
 800b726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b728:	f107 0314 	add.w	r3, r7, #20
 800b72c:	4619      	mov	r1, r3
 800b72e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b732:	f7f5 fb11 	bl	8000d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b736:	4b0d      	ldr	r3, [pc, #52]	; (800b76c <HAL_PCD_MspInit+0x94>)
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	4a0c      	ldr	r2, [pc, #48]	; (800b76c <HAL_PCD_MspInit+0x94>)
 800b73c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b740:	61d3      	str	r3, [r2, #28]
 800b742:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <HAL_PCD_MspInit+0x94>)
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800b74e:	2200      	movs	r2, #0
 800b750:	2105      	movs	r1, #5
 800b752:	2014      	movs	r0, #20
 800b754:	f7f5 fad6 	bl	8000d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b758:	2014      	movs	r0, #20
 800b75a:	f7f5 faef 	bl	8000d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b75e:	bf00      	nop
 800b760:	3728      	adds	r7, #40	; 0x28
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	40005c00 	.word	0x40005c00
 800b76c:	40021000 	.word	0x40021000

0800b770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b784:	4619      	mov	r1, r3
 800b786:	4610      	mov	r0, r2
 800b788:	f7fc f92a 	bl	80079e0 <USBD_LL_SetupStage>
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7a6:	78fa      	ldrb	r2, [r7, #3]
 800b7a8:	6879      	ldr	r1, [r7, #4]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	00db      	lsls	r3, r3, #3
 800b7b2:	440b      	add	r3, r1
 800b7b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	78fb      	ldrb	r3, [r7, #3]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	f7fc f95c 	bl	8007a7a <USBD_LL_DataOutStage>
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7dc:	78fa      	ldrb	r2, [r7, #3]
 800b7de:	6879      	ldr	r1, [r7, #4]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	00db      	lsls	r3, r3, #3
 800b7e8:	440b      	add	r3, r1
 800b7ea:	333c      	adds	r3, #60	; 0x3c
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	78fb      	ldrb	r3, [r7, #3]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	f7fc f9b3 	bl	8007b5c <USBD_LL_DataInStage>
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b082      	sub	sp, #8
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fc fac6 	bl	8007d9e <USBD_LL_SOF>
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b822:	2301      	movs	r3, #1
 800b824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d001      	beq.n	800b832 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b82e:	f7f4 ffbb 	bl	80007a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b838:	7bfa      	ldrb	r2, [r7, #15]
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fc fa73 	bl	8007d28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fc fa2c 	bl	8007ca6 <USBD_LL_Reset>
}
 800b84e:	bf00      	nop
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b866:	4618      	mov	r0, r3
 800b868:	f7fc fa6e 	bl	8007d48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d005      	beq.n	800b880 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b874:	4b04      	ldr	r3, [pc, #16]	; (800b888 <HAL_PCD_SuspendCallback+0x30>)
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	4a03      	ldr	r2, [pc, #12]	; (800b888 <HAL_PCD_SuspendCallback+0x30>)
 800b87a:	f043 0306 	orr.w	r3, r3, #6
 800b87e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	e000ed00 	.word	0xe000ed00

0800b88c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fc fa69 	bl	8007d72 <USBD_LL_Resume>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b8b0:	4a28      	ldr	r2, [pc, #160]	; (800b954 <USBD_LL_Init+0xac>)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a26      	ldr	r2, [pc, #152]	; (800b954 <USBD_LL_Init+0xac>)
 800b8bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b8c0:	4b24      	ldr	r3, [pc, #144]	; (800b954 <USBD_LL_Init+0xac>)
 800b8c2:	4a25      	ldr	r2, [pc, #148]	; (800b958 <USBD_LL_Init+0xb0>)
 800b8c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8c6:	4b23      	ldr	r3, [pc, #140]	; (800b954 <USBD_LL_Init+0xac>)
 800b8c8:	2208      	movs	r2, #8
 800b8ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8cc:	4b21      	ldr	r3, [pc, #132]	; (800b954 <USBD_LL_Init+0xac>)
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8d2:	4b20      	ldr	r3, [pc, #128]	; (800b954 <USBD_LL_Init+0xac>)
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8d8:	4b1e      	ldr	r3, [pc, #120]	; (800b954 <USBD_LL_Init+0xac>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b8de:	4b1d      	ldr	r3, [pc, #116]	; (800b954 <USBD_LL_Init+0xac>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b8e4:	481b      	ldr	r0, [pc, #108]	; (800b954 <USBD_LL_Init+0xac>)
 800b8e6:	f7f5 fd21 	bl	800132c <HAL_PCD_Init>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b8f0:	f7f4 ff5a 	bl	80007a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8fa:	2318      	movs	r3, #24
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2100      	movs	r1, #0
 800b900:	f7f7 f9aa 	bl	8002c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b90a:	2358      	movs	r3, #88	; 0x58
 800b90c:	2200      	movs	r2, #0
 800b90e:	2180      	movs	r1, #128	; 0x80
 800b910:	f7f7 f9a2 	bl	8002c58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b91a:	23c0      	movs	r3, #192	; 0xc0
 800b91c:	2200      	movs	r2, #0
 800b91e:	2181      	movs	r1, #129	; 0x81
 800b920:	f7f7 f99a 	bl	8002c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b92a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b92e:	2200      	movs	r2, #0
 800b930:	2101      	movs	r1, #1
 800b932:	f7f7 f991 	bl	8002c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b93c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b940:	2200      	movs	r2, #0
 800b942:	2182      	movs	r1, #130	; 0x82
 800b944:	f7f7 f988 	bl	8002c58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	200025dc 	.word	0x200025dc
 800b958:	40005c00 	.word	0x40005c00

0800b95c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b968:	2300      	movs	r3, #0
 800b96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b972:	4618      	mov	r0, r3
 800b974:	f7f5 fdac 	bl	80014d0 <HAL_PCD_Start>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 f954 	bl	800bc2c <USBD_Get_USB_Status>
 800b984:	4603      	mov	r3, r0
 800b986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b988:	7bbb      	ldrb	r3, [r7, #14]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	461a      	mov	r2, r3
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	70fb      	strb	r3, [r7, #3]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70bb      	strb	r3, [r7, #2]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9ba:	78bb      	ldrb	r3, [r7, #2]
 800b9bc:	883a      	ldrh	r2, [r7, #0]
 800b9be:	78f9      	ldrb	r1, [r7, #3]
 800b9c0:	f7f5 fea5 	bl	800170e <HAL_PCD_EP_Open>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 f92e 	bl	800bc2c <USBD_Get_USB_Status>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9f8:	78fa      	ldrb	r2, [r7, #3]
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7f5 fee3 	bl	80017c8 <HAL_PCD_EP_Close>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 f90f 	bl	800bc2c <USBD_Get_USB_Status>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba36:	78fa      	ldrb	r2, [r7, #3]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f5 ff8c 	bl	8001958 <HAL_PCD_EP_SetStall>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f8f0 	bl	800bc2c <USBD_Get_USB_Status>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	460b      	mov	r3, r1
 800ba64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f5 ffbf 	bl	80019fc <HAL_PCD_EP_ClrStall>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 f8d1 	bl	800bc2c <USBD_Get_USB_Status>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800baac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	da0c      	bge.n	800bace <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baba:	68f9      	ldr	r1, [r7, #12]
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	00db      	lsls	r3, r3, #3
 800bac6:	440b      	add	r3, r1
 800bac8:	3302      	adds	r3, #2
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	e00b      	b.n	800bae6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bace:	78fb      	ldrb	r3, [r7, #3]
 800bad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bad4:	68f9      	ldr	r1, [r7, #12]
 800bad6:	4613      	mov	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	00db      	lsls	r3, r3, #3
 800bade:	440b      	add	r3, r1
 800bae0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bae4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb0c:	78fa      	ldrb	r2, [r7, #3]
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7f5 fdd7 	bl	80016c4 <HAL_PCD_SetAddress>
 800bb16:	4603      	mov	r3, r0
 800bb18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f000 f885 	bl	800bc2c <USBD_Get_USB_Status>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	607a      	str	r2, [r7, #4]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	72fb      	strb	r3, [r7, #11]
 800bb40:	4613      	mov	r3, r2
 800bb42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb52:	893b      	ldrh	r3, [r7, #8]
 800bb54:	7af9      	ldrb	r1, [r7, #11]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	f7f5 fec7 	bl	80018ea <HAL_PCD_EP_Transmit>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 f862 	bl	800bc2c <USBD_Get_USB_Status>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b086      	sub	sp, #24
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	461a      	mov	r2, r3
 800bb82:	460b      	mov	r3, r1
 800bb84:	72fb      	strb	r3, [r7, #11]
 800bb86:	4613      	mov	r3, r2
 800bb88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb98:	893b      	ldrh	r3, [r7, #8]
 800bb9a:	7af9      	ldrb	r1, [r7, #11]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	f7f5 fe5b 	bl	8001858 <HAL_PCD_EP_Receive>
 800bba2:	4603      	mov	r3, r0
 800bba4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba6:	7dfb      	ldrb	r3, [r7, #23]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 f83f 	bl	800bc2c <USBD_Get_USB_Status>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3718      	adds	r7, #24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbce:	78fa      	ldrb	r2, [r7, #3]
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7f5 fe71 	bl	80018ba <HAL_PCD_EP_GetRxCount>
 800bbd8:	4603      	mov	r3, r0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbec:	4b03      	ldr	r3, [pc, #12]	; (800bbfc <USBD_static_malloc+0x18>)
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	200028c8 	.word	0x200028c8

0800bc00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]

}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	4603      	mov	r3, r0
 800bc34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	2b03      	cmp	r3, #3
 800bc3e:	d817      	bhi.n	800bc70 <USBD_Get_USB_Status+0x44>
 800bc40:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <USBD_Get_USB_Status+0x1c>)
 800bc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc46:	bf00      	nop
 800bc48:	0800bc59 	.word	0x0800bc59
 800bc4c:	0800bc5f 	.word	0x0800bc5f
 800bc50:	0800bc65 	.word	0x0800bc65
 800bc54:	0800bc6b 	.word	0x0800bc6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5c:	e00b      	b.n	800bc76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc5e:	2302      	movs	r3, #2
 800bc60:	73fb      	strb	r3, [r7, #15]
    break;
 800bc62:	e008      	b.n	800bc76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc64:	2301      	movs	r3, #1
 800bc66:	73fb      	strb	r3, [r7, #15]
    break;
 800bc68:	e005      	b.n	800bc76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc6e:	e002      	b.n	800bc76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc70:	2302      	movs	r3, #2
 800bc72:	73fb      	strb	r3, [r7, #15]
    break;
 800bc74:	bf00      	nop
  }
  return usb_status;
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <siprintf>:
 800bc84:	b40e      	push	{r1, r2, r3}
 800bc86:	b500      	push	{lr}
 800bc88:	b09c      	sub	sp, #112	; 0x70
 800bc8a:	ab1d      	add	r3, sp, #116	; 0x74
 800bc8c:	9002      	str	r0, [sp, #8]
 800bc8e:	9006      	str	r0, [sp, #24]
 800bc90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc94:	4809      	ldr	r0, [pc, #36]	; (800bcbc <siprintf+0x38>)
 800bc96:	9107      	str	r1, [sp, #28]
 800bc98:	9104      	str	r1, [sp, #16]
 800bc9a:	4909      	ldr	r1, [pc, #36]	; (800bcc0 <siprintf+0x3c>)
 800bc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca0:	9105      	str	r1, [sp, #20]
 800bca2:	6800      	ldr	r0, [r0, #0]
 800bca4:	9301      	str	r3, [sp, #4]
 800bca6:	a902      	add	r1, sp, #8
 800bca8:	f000 f9f6 	bl	800c098 <_svfiprintf_r>
 800bcac:	9b02      	ldr	r3, [sp, #8]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	701a      	strb	r2, [r3, #0]
 800bcb2:	b01c      	add	sp, #112	; 0x70
 800bcb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcb8:	b003      	add	sp, #12
 800bcba:	4770      	bx	lr
 800bcbc:	200001cc 	.word	0x200001cc
 800bcc0:	ffff0208 	.word	0xffff0208

0800bcc4 <memset>:
 800bcc4:	4402      	add	r2, r0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d100      	bne.n	800bcce <memset+0xa>
 800bccc:	4770      	bx	lr
 800bcce:	f803 1b01 	strb.w	r1, [r3], #1
 800bcd2:	e7f9      	b.n	800bcc8 <memset+0x4>

0800bcd4 <_reclaim_reent>:
 800bcd4:	4b29      	ldr	r3, [pc, #164]	; (800bd7c <_reclaim_reent+0xa8>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4283      	cmp	r3, r0
 800bcda:	b570      	push	{r4, r5, r6, lr}
 800bcdc:	4604      	mov	r4, r0
 800bcde:	d04b      	beq.n	800bd78 <_reclaim_reent+0xa4>
 800bce0:	69c3      	ldr	r3, [r0, #28]
 800bce2:	b143      	cbz	r3, 800bcf6 <_reclaim_reent+0x22>
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d144      	bne.n	800bd74 <_reclaim_reent+0xa0>
 800bcea:	69e3      	ldr	r3, [r4, #28]
 800bcec:	6819      	ldr	r1, [r3, #0]
 800bcee:	b111      	cbz	r1, 800bcf6 <_reclaim_reent+0x22>
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 f87f 	bl	800bdf4 <_free_r>
 800bcf6:	6961      	ldr	r1, [r4, #20]
 800bcf8:	b111      	cbz	r1, 800bd00 <_reclaim_reent+0x2c>
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 f87a 	bl	800bdf4 <_free_r>
 800bd00:	69e1      	ldr	r1, [r4, #28]
 800bd02:	b111      	cbz	r1, 800bd0a <_reclaim_reent+0x36>
 800bd04:	4620      	mov	r0, r4
 800bd06:	f000 f875 	bl	800bdf4 <_free_r>
 800bd0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bd0c:	b111      	cbz	r1, 800bd14 <_reclaim_reent+0x40>
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 f870 	bl	800bdf4 <_free_r>
 800bd14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd16:	b111      	cbz	r1, 800bd1e <_reclaim_reent+0x4a>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 f86b 	bl	800bdf4 <_free_r>
 800bd1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bd20:	b111      	cbz	r1, 800bd28 <_reclaim_reent+0x54>
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 f866 	bl	800bdf4 <_free_r>
 800bd28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd2a:	b111      	cbz	r1, 800bd32 <_reclaim_reent+0x5e>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 f861 	bl	800bdf4 <_free_r>
 800bd32:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bd34:	b111      	cbz	r1, 800bd3c <_reclaim_reent+0x68>
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 f85c 	bl	800bdf4 <_free_r>
 800bd3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bd3e:	b111      	cbz	r1, 800bd46 <_reclaim_reent+0x72>
 800bd40:	4620      	mov	r0, r4
 800bd42:	f000 f857 	bl	800bdf4 <_free_r>
 800bd46:	6a23      	ldr	r3, [r4, #32]
 800bd48:	b1b3      	cbz	r3, 800bd78 <_reclaim_reent+0xa4>
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd50:	4718      	bx	r3
 800bd52:	5949      	ldr	r1, [r1, r5]
 800bd54:	b941      	cbnz	r1, 800bd68 <_reclaim_reent+0x94>
 800bd56:	3504      	adds	r5, #4
 800bd58:	69e3      	ldr	r3, [r4, #28]
 800bd5a:	2d80      	cmp	r5, #128	; 0x80
 800bd5c:	68d9      	ldr	r1, [r3, #12]
 800bd5e:	d1f8      	bne.n	800bd52 <_reclaim_reent+0x7e>
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 f847 	bl	800bdf4 <_free_r>
 800bd66:	e7c0      	b.n	800bcea <_reclaim_reent+0x16>
 800bd68:	680e      	ldr	r6, [r1, #0]
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 f842 	bl	800bdf4 <_free_r>
 800bd70:	4631      	mov	r1, r6
 800bd72:	e7ef      	b.n	800bd54 <_reclaim_reent+0x80>
 800bd74:	2500      	movs	r5, #0
 800bd76:	e7ef      	b.n	800bd58 <_reclaim_reent+0x84>
 800bd78:	bd70      	pop	{r4, r5, r6, pc}
 800bd7a:	bf00      	nop
 800bd7c:	200001cc 	.word	0x200001cc

0800bd80 <__errno>:
 800bd80:	4b01      	ldr	r3, [pc, #4]	; (800bd88 <__errno+0x8>)
 800bd82:	6818      	ldr	r0, [r3, #0]
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	200001cc 	.word	0x200001cc

0800bd8c <__libc_init_array>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	4d0d      	ldr	r5, [pc, #52]	; (800bdc4 <__libc_init_array+0x38>)
 800bd90:	4c0d      	ldr	r4, [pc, #52]	; (800bdc8 <__libc_init_array+0x3c>)
 800bd92:	1b64      	subs	r4, r4, r5
 800bd94:	10a4      	asrs	r4, r4, #2
 800bd96:	2600      	movs	r6, #0
 800bd98:	42a6      	cmp	r6, r4
 800bd9a:	d109      	bne.n	800bdb0 <__libc_init_array+0x24>
 800bd9c:	4d0b      	ldr	r5, [pc, #44]	; (800bdcc <__libc_init_array+0x40>)
 800bd9e:	4c0c      	ldr	r4, [pc, #48]	; (800bdd0 <__libc_init_array+0x44>)
 800bda0:	f000 fc6a 	bl	800c678 <_init>
 800bda4:	1b64      	subs	r4, r4, r5
 800bda6:	10a4      	asrs	r4, r4, #2
 800bda8:	2600      	movs	r6, #0
 800bdaa:	42a6      	cmp	r6, r4
 800bdac:	d105      	bne.n	800bdba <__libc_init_array+0x2e>
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb4:	4798      	blx	r3
 800bdb6:	3601      	adds	r6, #1
 800bdb8:	e7ee      	b.n	800bd98 <__libc_init_array+0xc>
 800bdba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdbe:	4798      	blx	r3
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	e7f2      	b.n	800bdaa <__libc_init_array+0x1e>
 800bdc4:	0800c79c 	.word	0x0800c79c
 800bdc8:	0800c79c 	.word	0x0800c79c
 800bdcc:	0800c79c 	.word	0x0800c79c
 800bdd0:	0800c7a0 	.word	0x0800c7a0

0800bdd4 <__retarget_lock_acquire_recursive>:
 800bdd4:	4770      	bx	lr

0800bdd6 <__retarget_lock_release_recursive>:
 800bdd6:	4770      	bx	lr

0800bdd8 <memcpy>:
 800bdd8:	440a      	add	r2, r1
 800bdda:	4291      	cmp	r1, r2
 800bddc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bde0:	d100      	bne.n	800bde4 <memcpy+0xc>
 800bde2:	4770      	bx	lr
 800bde4:	b510      	push	{r4, lr}
 800bde6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdee:	4291      	cmp	r1, r2
 800bdf0:	d1f9      	bne.n	800bde6 <memcpy+0xe>
 800bdf2:	bd10      	pop	{r4, pc}

0800bdf4 <_free_r>:
 800bdf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdf6:	2900      	cmp	r1, #0
 800bdf8:	d044      	beq.n	800be84 <_free_r+0x90>
 800bdfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdfe:	9001      	str	r0, [sp, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	f1a1 0404 	sub.w	r4, r1, #4
 800be06:	bfb8      	it	lt
 800be08:	18e4      	addlt	r4, r4, r3
 800be0a:	f000 f8df 	bl	800bfcc <__malloc_lock>
 800be0e:	4a1e      	ldr	r2, [pc, #120]	; (800be88 <_free_r+0x94>)
 800be10:	9801      	ldr	r0, [sp, #4]
 800be12:	6813      	ldr	r3, [r2, #0]
 800be14:	b933      	cbnz	r3, 800be24 <_free_r+0x30>
 800be16:	6063      	str	r3, [r4, #4]
 800be18:	6014      	str	r4, [r2, #0]
 800be1a:	b003      	add	sp, #12
 800be1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be20:	f000 b8da 	b.w	800bfd8 <__malloc_unlock>
 800be24:	42a3      	cmp	r3, r4
 800be26:	d908      	bls.n	800be3a <_free_r+0x46>
 800be28:	6825      	ldr	r5, [r4, #0]
 800be2a:	1961      	adds	r1, r4, r5
 800be2c:	428b      	cmp	r3, r1
 800be2e:	bf01      	itttt	eq
 800be30:	6819      	ldreq	r1, [r3, #0]
 800be32:	685b      	ldreq	r3, [r3, #4]
 800be34:	1949      	addeq	r1, r1, r5
 800be36:	6021      	streq	r1, [r4, #0]
 800be38:	e7ed      	b.n	800be16 <_free_r+0x22>
 800be3a:	461a      	mov	r2, r3
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	b10b      	cbz	r3, 800be44 <_free_r+0x50>
 800be40:	42a3      	cmp	r3, r4
 800be42:	d9fa      	bls.n	800be3a <_free_r+0x46>
 800be44:	6811      	ldr	r1, [r2, #0]
 800be46:	1855      	adds	r5, r2, r1
 800be48:	42a5      	cmp	r5, r4
 800be4a:	d10b      	bne.n	800be64 <_free_r+0x70>
 800be4c:	6824      	ldr	r4, [r4, #0]
 800be4e:	4421      	add	r1, r4
 800be50:	1854      	adds	r4, r2, r1
 800be52:	42a3      	cmp	r3, r4
 800be54:	6011      	str	r1, [r2, #0]
 800be56:	d1e0      	bne.n	800be1a <_free_r+0x26>
 800be58:	681c      	ldr	r4, [r3, #0]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	6053      	str	r3, [r2, #4]
 800be5e:	440c      	add	r4, r1
 800be60:	6014      	str	r4, [r2, #0]
 800be62:	e7da      	b.n	800be1a <_free_r+0x26>
 800be64:	d902      	bls.n	800be6c <_free_r+0x78>
 800be66:	230c      	movs	r3, #12
 800be68:	6003      	str	r3, [r0, #0]
 800be6a:	e7d6      	b.n	800be1a <_free_r+0x26>
 800be6c:	6825      	ldr	r5, [r4, #0]
 800be6e:	1961      	adds	r1, r4, r5
 800be70:	428b      	cmp	r3, r1
 800be72:	bf04      	itt	eq
 800be74:	6819      	ldreq	r1, [r3, #0]
 800be76:	685b      	ldreq	r3, [r3, #4]
 800be78:	6063      	str	r3, [r4, #4]
 800be7a:	bf04      	itt	eq
 800be7c:	1949      	addeq	r1, r1, r5
 800be7e:	6021      	streq	r1, [r4, #0]
 800be80:	6054      	str	r4, [r2, #4]
 800be82:	e7ca      	b.n	800be1a <_free_r+0x26>
 800be84:	b003      	add	sp, #12
 800be86:	bd30      	pop	{r4, r5, pc}
 800be88:	20002c28 	.word	0x20002c28

0800be8c <sbrk_aligned>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	4e0e      	ldr	r6, [pc, #56]	; (800bec8 <sbrk_aligned+0x3c>)
 800be90:	460c      	mov	r4, r1
 800be92:	6831      	ldr	r1, [r6, #0]
 800be94:	4605      	mov	r5, r0
 800be96:	b911      	cbnz	r1, 800be9e <sbrk_aligned+0x12>
 800be98:	f000 fba6 	bl	800c5e8 <_sbrk_r>
 800be9c:	6030      	str	r0, [r6, #0]
 800be9e:	4621      	mov	r1, r4
 800bea0:	4628      	mov	r0, r5
 800bea2:	f000 fba1 	bl	800c5e8 <_sbrk_r>
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	d00a      	beq.n	800bec0 <sbrk_aligned+0x34>
 800beaa:	1cc4      	adds	r4, r0, #3
 800beac:	f024 0403 	bic.w	r4, r4, #3
 800beb0:	42a0      	cmp	r0, r4
 800beb2:	d007      	beq.n	800bec4 <sbrk_aligned+0x38>
 800beb4:	1a21      	subs	r1, r4, r0
 800beb6:	4628      	mov	r0, r5
 800beb8:	f000 fb96 	bl	800c5e8 <_sbrk_r>
 800bebc:	3001      	adds	r0, #1
 800bebe:	d101      	bne.n	800bec4 <sbrk_aligned+0x38>
 800bec0:	f04f 34ff 	mov.w	r4, #4294967295
 800bec4:	4620      	mov	r0, r4
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	20002c2c 	.word	0x20002c2c

0800becc <_malloc_r>:
 800becc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed0:	1ccd      	adds	r5, r1, #3
 800bed2:	f025 0503 	bic.w	r5, r5, #3
 800bed6:	3508      	adds	r5, #8
 800bed8:	2d0c      	cmp	r5, #12
 800beda:	bf38      	it	cc
 800bedc:	250c      	movcc	r5, #12
 800bede:	2d00      	cmp	r5, #0
 800bee0:	4607      	mov	r7, r0
 800bee2:	db01      	blt.n	800bee8 <_malloc_r+0x1c>
 800bee4:	42a9      	cmp	r1, r5
 800bee6:	d905      	bls.n	800bef4 <_malloc_r+0x28>
 800bee8:	230c      	movs	r3, #12
 800beea:	603b      	str	r3, [r7, #0]
 800beec:	2600      	movs	r6, #0
 800beee:	4630      	mov	r0, r6
 800bef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bfc8 <_malloc_r+0xfc>
 800bef8:	f000 f868 	bl	800bfcc <__malloc_lock>
 800befc:	f8d8 3000 	ldr.w	r3, [r8]
 800bf00:	461c      	mov	r4, r3
 800bf02:	bb5c      	cbnz	r4, 800bf5c <_malloc_r+0x90>
 800bf04:	4629      	mov	r1, r5
 800bf06:	4638      	mov	r0, r7
 800bf08:	f7ff ffc0 	bl	800be8c <sbrk_aligned>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	4604      	mov	r4, r0
 800bf10:	d155      	bne.n	800bfbe <_malloc_r+0xf2>
 800bf12:	f8d8 4000 	ldr.w	r4, [r8]
 800bf16:	4626      	mov	r6, r4
 800bf18:	2e00      	cmp	r6, #0
 800bf1a:	d145      	bne.n	800bfa8 <_malloc_r+0xdc>
 800bf1c:	2c00      	cmp	r4, #0
 800bf1e:	d048      	beq.n	800bfb2 <_malloc_r+0xe6>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	4631      	mov	r1, r6
 800bf24:	4638      	mov	r0, r7
 800bf26:	eb04 0903 	add.w	r9, r4, r3
 800bf2a:	f000 fb5d 	bl	800c5e8 <_sbrk_r>
 800bf2e:	4581      	cmp	r9, r0
 800bf30:	d13f      	bne.n	800bfb2 <_malloc_r+0xe6>
 800bf32:	6821      	ldr	r1, [r4, #0]
 800bf34:	1a6d      	subs	r5, r5, r1
 800bf36:	4629      	mov	r1, r5
 800bf38:	4638      	mov	r0, r7
 800bf3a:	f7ff ffa7 	bl	800be8c <sbrk_aligned>
 800bf3e:	3001      	adds	r0, #1
 800bf40:	d037      	beq.n	800bfb2 <_malloc_r+0xe6>
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	442b      	add	r3, r5
 800bf46:	6023      	str	r3, [r4, #0]
 800bf48:	f8d8 3000 	ldr.w	r3, [r8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d038      	beq.n	800bfc2 <_malloc_r+0xf6>
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	42a2      	cmp	r2, r4
 800bf54:	d12b      	bne.n	800bfae <_malloc_r+0xe2>
 800bf56:	2200      	movs	r2, #0
 800bf58:	605a      	str	r2, [r3, #4]
 800bf5a:	e00f      	b.n	800bf7c <_malloc_r+0xb0>
 800bf5c:	6822      	ldr	r2, [r4, #0]
 800bf5e:	1b52      	subs	r2, r2, r5
 800bf60:	d41f      	bmi.n	800bfa2 <_malloc_r+0xd6>
 800bf62:	2a0b      	cmp	r2, #11
 800bf64:	d917      	bls.n	800bf96 <_malloc_r+0xca>
 800bf66:	1961      	adds	r1, r4, r5
 800bf68:	42a3      	cmp	r3, r4
 800bf6a:	6025      	str	r5, [r4, #0]
 800bf6c:	bf18      	it	ne
 800bf6e:	6059      	strne	r1, [r3, #4]
 800bf70:	6863      	ldr	r3, [r4, #4]
 800bf72:	bf08      	it	eq
 800bf74:	f8c8 1000 	streq.w	r1, [r8]
 800bf78:	5162      	str	r2, [r4, r5]
 800bf7a:	604b      	str	r3, [r1, #4]
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	f104 060b 	add.w	r6, r4, #11
 800bf82:	f000 f829 	bl	800bfd8 <__malloc_unlock>
 800bf86:	f026 0607 	bic.w	r6, r6, #7
 800bf8a:	1d23      	adds	r3, r4, #4
 800bf8c:	1af2      	subs	r2, r6, r3
 800bf8e:	d0ae      	beq.n	800beee <_malloc_r+0x22>
 800bf90:	1b9b      	subs	r3, r3, r6
 800bf92:	50a3      	str	r3, [r4, r2]
 800bf94:	e7ab      	b.n	800beee <_malloc_r+0x22>
 800bf96:	42a3      	cmp	r3, r4
 800bf98:	6862      	ldr	r2, [r4, #4]
 800bf9a:	d1dd      	bne.n	800bf58 <_malloc_r+0x8c>
 800bf9c:	f8c8 2000 	str.w	r2, [r8]
 800bfa0:	e7ec      	b.n	800bf7c <_malloc_r+0xb0>
 800bfa2:	4623      	mov	r3, r4
 800bfa4:	6864      	ldr	r4, [r4, #4]
 800bfa6:	e7ac      	b.n	800bf02 <_malloc_r+0x36>
 800bfa8:	4634      	mov	r4, r6
 800bfaa:	6876      	ldr	r6, [r6, #4]
 800bfac:	e7b4      	b.n	800bf18 <_malloc_r+0x4c>
 800bfae:	4613      	mov	r3, r2
 800bfb0:	e7cc      	b.n	800bf4c <_malloc_r+0x80>
 800bfb2:	230c      	movs	r3, #12
 800bfb4:	603b      	str	r3, [r7, #0]
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	f000 f80e 	bl	800bfd8 <__malloc_unlock>
 800bfbc:	e797      	b.n	800beee <_malloc_r+0x22>
 800bfbe:	6025      	str	r5, [r4, #0]
 800bfc0:	e7dc      	b.n	800bf7c <_malloc_r+0xb0>
 800bfc2:	605b      	str	r3, [r3, #4]
 800bfc4:	deff      	udf	#255	; 0xff
 800bfc6:	bf00      	nop
 800bfc8:	20002c28 	.word	0x20002c28

0800bfcc <__malloc_lock>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	; (800bfd4 <__malloc_lock+0x8>)
 800bfce:	f7ff bf01 	b.w	800bdd4 <__retarget_lock_acquire_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	20002c24 	.word	0x20002c24

0800bfd8 <__malloc_unlock>:
 800bfd8:	4801      	ldr	r0, [pc, #4]	; (800bfe0 <__malloc_unlock+0x8>)
 800bfda:	f7ff befc 	b.w	800bdd6 <__retarget_lock_release_recursive>
 800bfde:	bf00      	nop
 800bfe0:	20002c24 	.word	0x20002c24

0800bfe4 <__ssputs_r>:
 800bfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe8:	688e      	ldr	r6, [r1, #8]
 800bfea:	461f      	mov	r7, r3
 800bfec:	42be      	cmp	r6, r7
 800bfee:	680b      	ldr	r3, [r1, #0]
 800bff0:	4682      	mov	sl, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	4690      	mov	r8, r2
 800bff6:	d82c      	bhi.n	800c052 <__ssputs_r+0x6e>
 800bff8:	898a      	ldrh	r2, [r1, #12]
 800bffa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bffe:	d026      	beq.n	800c04e <__ssputs_r+0x6a>
 800c000:	6965      	ldr	r5, [r4, #20]
 800c002:	6909      	ldr	r1, [r1, #16]
 800c004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c008:	eba3 0901 	sub.w	r9, r3, r1
 800c00c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c010:	1c7b      	adds	r3, r7, #1
 800c012:	444b      	add	r3, r9
 800c014:	106d      	asrs	r5, r5, #1
 800c016:	429d      	cmp	r5, r3
 800c018:	bf38      	it	cc
 800c01a:	461d      	movcc	r5, r3
 800c01c:	0553      	lsls	r3, r2, #21
 800c01e:	d527      	bpl.n	800c070 <__ssputs_r+0x8c>
 800c020:	4629      	mov	r1, r5
 800c022:	f7ff ff53 	bl	800becc <_malloc_r>
 800c026:	4606      	mov	r6, r0
 800c028:	b360      	cbz	r0, 800c084 <__ssputs_r+0xa0>
 800c02a:	6921      	ldr	r1, [r4, #16]
 800c02c:	464a      	mov	r2, r9
 800c02e:	f7ff fed3 	bl	800bdd8 <memcpy>
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	6126      	str	r6, [r4, #16]
 800c040:	6165      	str	r5, [r4, #20]
 800c042:	444e      	add	r6, r9
 800c044:	eba5 0509 	sub.w	r5, r5, r9
 800c048:	6026      	str	r6, [r4, #0]
 800c04a:	60a5      	str	r5, [r4, #8]
 800c04c:	463e      	mov	r6, r7
 800c04e:	42be      	cmp	r6, r7
 800c050:	d900      	bls.n	800c054 <__ssputs_r+0x70>
 800c052:	463e      	mov	r6, r7
 800c054:	6820      	ldr	r0, [r4, #0]
 800c056:	4632      	mov	r2, r6
 800c058:	4641      	mov	r1, r8
 800c05a:	f000 faab 	bl	800c5b4 <memmove>
 800c05e:	68a3      	ldr	r3, [r4, #8]
 800c060:	1b9b      	subs	r3, r3, r6
 800c062:	60a3      	str	r3, [r4, #8]
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	4433      	add	r3, r6
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	2000      	movs	r0, #0
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	462a      	mov	r2, r5
 800c072:	f000 fac9 	bl	800c608 <_realloc_r>
 800c076:	4606      	mov	r6, r0
 800c078:	2800      	cmp	r0, #0
 800c07a:	d1e0      	bne.n	800c03e <__ssputs_r+0x5a>
 800c07c:	6921      	ldr	r1, [r4, #16]
 800c07e:	4650      	mov	r0, sl
 800c080:	f7ff feb8 	bl	800bdf4 <_free_r>
 800c084:	230c      	movs	r3, #12
 800c086:	f8ca 3000 	str.w	r3, [sl]
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	f04f 30ff 	mov.w	r0, #4294967295
 800c096:	e7e9      	b.n	800c06c <__ssputs_r+0x88>

0800c098 <_svfiprintf_r>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	4698      	mov	r8, r3
 800c09e:	898b      	ldrh	r3, [r1, #12]
 800c0a0:	061b      	lsls	r3, r3, #24
 800c0a2:	b09d      	sub	sp, #116	; 0x74
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	460d      	mov	r5, r1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	d50e      	bpl.n	800c0ca <_svfiprintf_r+0x32>
 800c0ac:	690b      	ldr	r3, [r1, #16]
 800c0ae:	b963      	cbnz	r3, 800c0ca <_svfiprintf_r+0x32>
 800c0b0:	2140      	movs	r1, #64	; 0x40
 800c0b2:	f7ff ff0b 	bl	800becc <_malloc_r>
 800c0b6:	6028      	str	r0, [r5, #0]
 800c0b8:	6128      	str	r0, [r5, #16]
 800c0ba:	b920      	cbnz	r0, 800c0c6 <_svfiprintf_r+0x2e>
 800c0bc:	230c      	movs	r3, #12
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c4:	e0d0      	b.n	800c268 <_svfiprintf_r+0x1d0>
 800c0c6:	2340      	movs	r3, #64	; 0x40
 800c0c8:	616b      	str	r3, [r5, #20]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ce:	2320      	movs	r3, #32
 800c0d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0d8:	2330      	movs	r3, #48	; 0x30
 800c0da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c280 <_svfiprintf_r+0x1e8>
 800c0de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0e2:	f04f 0901 	mov.w	r9, #1
 800c0e6:	4623      	mov	r3, r4
 800c0e8:	469a      	mov	sl, r3
 800c0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ee:	b10a      	cbz	r2, 800c0f4 <_svfiprintf_r+0x5c>
 800c0f0:	2a25      	cmp	r2, #37	; 0x25
 800c0f2:	d1f9      	bne.n	800c0e8 <_svfiprintf_r+0x50>
 800c0f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0f8:	d00b      	beq.n	800c112 <_svfiprintf_r+0x7a>
 800c0fa:	465b      	mov	r3, fp
 800c0fc:	4622      	mov	r2, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	4638      	mov	r0, r7
 800c102:	f7ff ff6f 	bl	800bfe4 <__ssputs_r>
 800c106:	3001      	adds	r0, #1
 800c108:	f000 80a9 	beq.w	800c25e <_svfiprintf_r+0x1c6>
 800c10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c10e:	445a      	add	r2, fp
 800c110:	9209      	str	r2, [sp, #36]	; 0x24
 800c112:	f89a 3000 	ldrb.w	r3, [sl]
 800c116:	2b00      	cmp	r3, #0
 800c118:	f000 80a1 	beq.w	800c25e <_svfiprintf_r+0x1c6>
 800c11c:	2300      	movs	r3, #0
 800c11e:	f04f 32ff 	mov.w	r2, #4294967295
 800c122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c126:	f10a 0a01 	add.w	sl, sl, #1
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	9307      	str	r3, [sp, #28]
 800c12e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c132:	931a      	str	r3, [sp, #104]	; 0x68
 800c134:	4654      	mov	r4, sl
 800c136:	2205      	movs	r2, #5
 800c138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c13c:	4850      	ldr	r0, [pc, #320]	; (800c280 <_svfiprintf_r+0x1e8>)
 800c13e:	f7f4 f84f 	bl	80001e0 <memchr>
 800c142:	9a04      	ldr	r2, [sp, #16]
 800c144:	b9d8      	cbnz	r0, 800c17e <_svfiprintf_r+0xe6>
 800c146:	06d0      	lsls	r0, r2, #27
 800c148:	bf44      	itt	mi
 800c14a:	2320      	movmi	r3, #32
 800c14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c150:	0711      	lsls	r1, r2, #28
 800c152:	bf44      	itt	mi
 800c154:	232b      	movmi	r3, #43	; 0x2b
 800c156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c15a:	f89a 3000 	ldrb.w	r3, [sl]
 800c15e:	2b2a      	cmp	r3, #42	; 0x2a
 800c160:	d015      	beq.n	800c18e <_svfiprintf_r+0xf6>
 800c162:	9a07      	ldr	r2, [sp, #28]
 800c164:	4654      	mov	r4, sl
 800c166:	2000      	movs	r0, #0
 800c168:	f04f 0c0a 	mov.w	ip, #10
 800c16c:	4621      	mov	r1, r4
 800c16e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c172:	3b30      	subs	r3, #48	; 0x30
 800c174:	2b09      	cmp	r3, #9
 800c176:	d94d      	bls.n	800c214 <_svfiprintf_r+0x17c>
 800c178:	b1b0      	cbz	r0, 800c1a8 <_svfiprintf_r+0x110>
 800c17a:	9207      	str	r2, [sp, #28]
 800c17c:	e014      	b.n	800c1a8 <_svfiprintf_r+0x110>
 800c17e:	eba0 0308 	sub.w	r3, r0, r8
 800c182:	fa09 f303 	lsl.w	r3, r9, r3
 800c186:	4313      	orrs	r3, r2
 800c188:	9304      	str	r3, [sp, #16]
 800c18a:	46a2      	mov	sl, r4
 800c18c:	e7d2      	b.n	800c134 <_svfiprintf_r+0x9c>
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	1d19      	adds	r1, r3, #4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	9103      	str	r1, [sp, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	bfbb      	ittet	lt
 800c19a:	425b      	neglt	r3, r3
 800c19c:	f042 0202 	orrlt.w	r2, r2, #2
 800c1a0:	9307      	strge	r3, [sp, #28]
 800c1a2:	9307      	strlt	r3, [sp, #28]
 800c1a4:	bfb8      	it	lt
 800c1a6:	9204      	strlt	r2, [sp, #16]
 800c1a8:	7823      	ldrb	r3, [r4, #0]
 800c1aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ac:	d10c      	bne.n	800c1c8 <_svfiprintf_r+0x130>
 800c1ae:	7863      	ldrb	r3, [r4, #1]
 800c1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b2:	d134      	bne.n	800c21e <_svfiprintf_r+0x186>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	1d1a      	adds	r2, r3, #4
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	9203      	str	r2, [sp, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	bfb8      	it	lt
 800c1c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1c4:	3402      	adds	r4, #2
 800c1c6:	9305      	str	r3, [sp, #20]
 800c1c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c290 <_svfiprintf_r+0x1f8>
 800c1cc:	7821      	ldrb	r1, [r4, #0]
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	4650      	mov	r0, sl
 800c1d2:	f7f4 f805 	bl	80001e0 <memchr>
 800c1d6:	b138      	cbz	r0, 800c1e8 <_svfiprintf_r+0x150>
 800c1d8:	9b04      	ldr	r3, [sp, #16]
 800c1da:	eba0 000a 	sub.w	r0, r0, sl
 800c1de:	2240      	movs	r2, #64	; 0x40
 800c1e0:	4082      	lsls	r2, r0
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	3401      	adds	r4, #1
 800c1e6:	9304      	str	r3, [sp, #16]
 800c1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ec:	4825      	ldr	r0, [pc, #148]	; (800c284 <_svfiprintf_r+0x1ec>)
 800c1ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1f2:	2206      	movs	r2, #6
 800c1f4:	f7f3 fff4 	bl	80001e0 <memchr>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d038      	beq.n	800c26e <_svfiprintf_r+0x1d6>
 800c1fc:	4b22      	ldr	r3, [pc, #136]	; (800c288 <_svfiprintf_r+0x1f0>)
 800c1fe:	bb1b      	cbnz	r3, 800c248 <_svfiprintf_r+0x1b0>
 800c200:	9b03      	ldr	r3, [sp, #12]
 800c202:	3307      	adds	r3, #7
 800c204:	f023 0307 	bic.w	r3, r3, #7
 800c208:	3308      	adds	r3, #8
 800c20a:	9303      	str	r3, [sp, #12]
 800c20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c20e:	4433      	add	r3, r6
 800c210:	9309      	str	r3, [sp, #36]	; 0x24
 800c212:	e768      	b.n	800c0e6 <_svfiprintf_r+0x4e>
 800c214:	fb0c 3202 	mla	r2, ip, r2, r3
 800c218:	460c      	mov	r4, r1
 800c21a:	2001      	movs	r0, #1
 800c21c:	e7a6      	b.n	800c16c <_svfiprintf_r+0xd4>
 800c21e:	2300      	movs	r3, #0
 800c220:	3401      	adds	r4, #1
 800c222:	9305      	str	r3, [sp, #20]
 800c224:	4619      	mov	r1, r3
 800c226:	f04f 0c0a 	mov.w	ip, #10
 800c22a:	4620      	mov	r0, r4
 800c22c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c230:	3a30      	subs	r2, #48	; 0x30
 800c232:	2a09      	cmp	r2, #9
 800c234:	d903      	bls.n	800c23e <_svfiprintf_r+0x1a6>
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0c6      	beq.n	800c1c8 <_svfiprintf_r+0x130>
 800c23a:	9105      	str	r1, [sp, #20]
 800c23c:	e7c4      	b.n	800c1c8 <_svfiprintf_r+0x130>
 800c23e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c242:	4604      	mov	r4, r0
 800c244:	2301      	movs	r3, #1
 800c246:	e7f0      	b.n	800c22a <_svfiprintf_r+0x192>
 800c248:	ab03      	add	r3, sp, #12
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	462a      	mov	r2, r5
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <_svfiprintf_r+0x1f4>)
 800c250:	a904      	add	r1, sp, #16
 800c252:	4638      	mov	r0, r7
 800c254:	f3af 8000 	nop.w
 800c258:	1c42      	adds	r2, r0, #1
 800c25a:	4606      	mov	r6, r0
 800c25c:	d1d6      	bne.n	800c20c <_svfiprintf_r+0x174>
 800c25e:	89ab      	ldrh	r3, [r5, #12]
 800c260:	065b      	lsls	r3, r3, #25
 800c262:	f53f af2d 	bmi.w	800c0c0 <_svfiprintf_r+0x28>
 800c266:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c268:	b01d      	add	sp, #116	; 0x74
 800c26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26e:	ab03      	add	r3, sp, #12
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	462a      	mov	r2, r5
 800c274:	4b05      	ldr	r3, [pc, #20]	; (800c28c <_svfiprintf_r+0x1f4>)
 800c276:	a904      	add	r1, sp, #16
 800c278:	4638      	mov	r0, r7
 800c27a:	f000 f879 	bl	800c370 <_printf_i>
 800c27e:	e7eb      	b.n	800c258 <_svfiprintf_r+0x1c0>
 800c280:	0800c768 	.word	0x0800c768
 800c284:	0800c772 	.word	0x0800c772
 800c288:	00000000 	.word	0x00000000
 800c28c:	0800bfe5 	.word	0x0800bfe5
 800c290:	0800c76e 	.word	0x0800c76e

0800c294 <_printf_common>:
 800c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c298:	4616      	mov	r6, r2
 800c29a:	4699      	mov	r9, r3
 800c29c:	688a      	ldr	r2, [r1, #8]
 800c29e:	690b      	ldr	r3, [r1, #16]
 800c2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	bfb8      	it	lt
 800c2a8:	4613      	movlt	r3, r2
 800c2aa:	6033      	str	r3, [r6, #0]
 800c2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2b0:	4607      	mov	r7, r0
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	b10a      	cbz	r2, 800c2ba <_printf_common+0x26>
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	6033      	str	r3, [r6, #0]
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	0699      	lsls	r1, r3, #26
 800c2be:	bf42      	ittt	mi
 800c2c0:	6833      	ldrmi	r3, [r6, #0]
 800c2c2:	3302      	addmi	r3, #2
 800c2c4:	6033      	strmi	r3, [r6, #0]
 800c2c6:	6825      	ldr	r5, [r4, #0]
 800c2c8:	f015 0506 	ands.w	r5, r5, #6
 800c2cc:	d106      	bne.n	800c2dc <_printf_common+0x48>
 800c2ce:	f104 0a19 	add.w	sl, r4, #25
 800c2d2:	68e3      	ldr	r3, [r4, #12]
 800c2d4:	6832      	ldr	r2, [r6, #0]
 800c2d6:	1a9b      	subs	r3, r3, r2
 800c2d8:	42ab      	cmp	r3, r5
 800c2da:	dc26      	bgt.n	800c32a <_printf_common+0x96>
 800c2dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2e0:	1e13      	subs	r3, r2, #0
 800c2e2:	6822      	ldr	r2, [r4, #0]
 800c2e4:	bf18      	it	ne
 800c2e6:	2301      	movne	r3, #1
 800c2e8:	0692      	lsls	r2, r2, #26
 800c2ea:	d42b      	bmi.n	800c344 <_printf_common+0xb0>
 800c2ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	47c0      	blx	r8
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	d01e      	beq.n	800c338 <_printf_common+0xa4>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	6922      	ldr	r2, [r4, #16]
 800c2fe:	f003 0306 	and.w	r3, r3, #6
 800c302:	2b04      	cmp	r3, #4
 800c304:	bf02      	ittt	eq
 800c306:	68e5      	ldreq	r5, [r4, #12]
 800c308:	6833      	ldreq	r3, [r6, #0]
 800c30a:	1aed      	subeq	r5, r5, r3
 800c30c:	68a3      	ldr	r3, [r4, #8]
 800c30e:	bf0c      	ite	eq
 800c310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c314:	2500      	movne	r5, #0
 800c316:	4293      	cmp	r3, r2
 800c318:	bfc4      	itt	gt
 800c31a:	1a9b      	subgt	r3, r3, r2
 800c31c:	18ed      	addgt	r5, r5, r3
 800c31e:	2600      	movs	r6, #0
 800c320:	341a      	adds	r4, #26
 800c322:	42b5      	cmp	r5, r6
 800c324:	d11a      	bne.n	800c35c <_printf_common+0xc8>
 800c326:	2000      	movs	r0, #0
 800c328:	e008      	b.n	800c33c <_printf_common+0xa8>
 800c32a:	2301      	movs	r3, #1
 800c32c:	4652      	mov	r2, sl
 800c32e:	4649      	mov	r1, r9
 800c330:	4638      	mov	r0, r7
 800c332:	47c0      	blx	r8
 800c334:	3001      	adds	r0, #1
 800c336:	d103      	bne.n	800c340 <_printf_common+0xac>
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c340:	3501      	adds	r5, #1
 800c342:	e7c6      	b.n	800c2d2 <_printf_common+0x3e>
 800c344:	18e1      	adds	r1, r4, r3
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	2030      	movs	r0, #48	; 0x30
 800c34a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c34e:	4422      	add	r2, r4
 800c350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c358:	3302      	adds	r3, #2
 800c35a:	e7c7      	b.n	800c2ec <_printf_common+0x58>
 800c35c:	2301      	movs	r3, #1
 800c35e:	4622      	mov	r2, r4
 800c360:	4649      	mov	r1, r9
 800c362:	4638      	mov	r0, r7
 800c364:	47c0      	blx	r8
 800c366:	3001      	adds	r0, #1
 800c368:	d0e6      	beq.n	800c338 <_printf_common+0xa4>
 800c36a:	3601      	adds	r6, #1
 800c36c:	e7d9      	b.n	800c322 <_printf_common+0x8e>
	...

0800c370 <_printf_i>:
 800c370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c374:	7e0f      	ldrb	r7, [r1, #24]
 800c376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c378:	2f78      	cmp	r7, #120	; 0x78
 800c37a:	4691      	mov	r9, r2
 800c37c:	4680      	mov	r8, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	469a      	mov	sl, r3
 800c382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c386:	d807      	bhi.n	800c398 <_printf_i+0x28>
 800c388:	2f62      	cmp	r7, #98	; 0x62
 800c38a:	d80a      	bhi.n	800c3a2 <_printf_i+0x32>
 800c38c:	2f00      	cmp	r7, #0
 800c38e:	f000 80d4 	beq.w	800c53a <_printf_i+0x1ca>
 800c392:	2f58      	cmp	r7, #88	; 0x58
 800c394:	f000 80c0 	beq.w	800c518 <_printf_i+0x1a8>
 800c398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c39c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3a0:	e03a      	b.n	800c418 <_printf_i+0xa8>
 800c3a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3a6:	2b15      	cmp	r3, #21
 800c3a8:	d8f6      	bhi.n	800c398 <_printf_i+0x28>
 800c3aa:	a101      	add	r1, pc, #4	; (adr r1, 800c3b0 <_printf_i+0x40>)
 800c3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3b0:	0800c409 	.word	0x0800c409
 800c3b4:	0800c41d 	.word	0x0800c41d
 800c3b8:	0800c399 	.word	0x0800c399
 800c3bc:	0800c399 	.word	0x0800c399
 800c3c0:	0800c399 	.word	0x0800c399
 800c3c4:	0800c399 	.word	0x0800c399
 800c3c8:	0800c41d 	.word	0x0800c41d
 800c3cc:	0800c399 	.word	0x0800c399
 800c3d0:	0800c399 	.word	0x0800c399
 800c3d4:	0800c399 	.word	0x0800c399
 800c3d8:	0800c399 	.word	0x0800c399
 800c3dc:	0800c521 	.word	0x0800c521
 800c3e0:	0800c449 	.word	0x0800c449
 800c3e4:	0800c4db 	.word	0x0800c4db
 800c3e8:	0800c399 	.word	0x0800c399
 800c3ec:	0800c399 	.word	0x0800c399
 800c3f0:	0800c543 	.word	0x0800c543
 800c3f4:	0800c399 	.word	0x0800c399
 800c3f8:	0800c449 	.word	0x0800c449
 800c3fc:	0800c399 	.word	0x0800c399
 800c400:	0800c399 	.word	0x0800c399
 800c404:	0800c4e3 	.word	0x0800c4e3
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	1d1a      	adds	r2, r3, #4
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	602a      	str	r2, [r5, #0]
 800c410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c418:	2301      	movs	r3, #1
 800c41a:	e09f      	b.n	800c55c <_printf_i+0x1ec>
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	682b      	ldr	r3, [r5, #0]
 800c420:	0607      	lsls	r7, r0, #24
 800c422:	f103 0104 	add.w	r1, r3, #4
 800c426:	6029      	str	r1, [r5, #0]
 800c428:	d501      	bpl.n	800c42e <_printf_i+0xbe>
 800c42a:	681e      	ldr	r6, [r3, #0]
 800c42c:	e003      	b.n	800c436 <_printf_i+0xc6>
 800c42e:	0646      	lsls	r6, r0, #25
 800c430:	d5fb      	bpl.n	800c42a <_printf_i+0xba>
 800c432:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c436:	2e00      	cmp	r6, #0
 800c438:	da03      	bge.n	800c442 <_printf_i+0xd2>
 800c43a:	232d      	movs	r3, #45	; 0x2d
 800c43c:	4276      	negs	r6, r6
 800c43e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c442:	485a      	ldr	r0, [pc, #360]	; (800c5ac <_printf_i+0x23c>)
 800c444:	230a      	movs	r3, #10
 800c446:	e012      	b.n	800c46e <_printf_i+0xfe>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	6820      	ldr	r0, [r4, #0]
 800c44c:	1d19      	adds	r1, r3, #4
 800c44e:	6029      	str	r1, [r5, #0]
 800c450:	0605      	lsls	r5, r0, #24
 800c452:	d501      	bpl.n	800c458 <_printf_i+0xe8>
 800c454:	681e      	ldr	r6, [r3, #0]
 800c456:	e002      	b.n	800c45e <_printf_i+0xee>
 800c458:	0641      	lsls	r1, r0, #25
 800c45a:	d5fb      	bpl.n	800c454 <_printf_i+0xe4>
 800c45c:	881e      	ldrh	r6, [r3, #0]
 800c45e:	4853      	ldr	r0, [pc, #332]	; (800c5ac <_printf_i+0x23c>)
 800c460:	2f6f      	cmp	r7, #111	; 0x6f
 800c462:	bf0c      	ite	eq
 800c464:	2308      	moveq	r3, #8
 800c466:	230a      	movne	r3, #10
 800c468:	2100      	movs	r1, #0
 800c46a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c46e:	6865      	ldr	r5, [r4, #4]
 800c470:	60a5      	str	r5, [r4, #8]
 800c472:	2d00      	cmp	r5, #0
 800c474:	bfa2      	ittt	ge
 800c476:	6821      	ldrge	r1, [r4, #0]
 800c478:	f021 0104 	bicge.w	r1, r1, #4
 800c47c:	6021      	strge	r1, [r4, #0]
 800c47e:	b90e      	cbnz	r6, 800c484 <_printf_i+0x114>
 800c480:	2d00      	cmp	r5, #0
 800c482:	d04b      	beq.n	800c51c <_printf_i+0x1ac>
 800c484:	4615      	mov	r5, r2
 800c486:	fbb6 f1f3 	udiv	r1, r6, r3
 800c48a:	fb03 6711 	mls	r7, r3, r1, r6
 800c48e:	5dc7      	ldrb	r7, [r0, r7]
 800c490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c494:	4637      	mov	r7, r6
 800c496:	42bb      	cmp	r3, r7
 800c498:	460e      	mov	r6, r1
 800c49a:	d9f4      	bls.n	800c486 <_printf_i+0x116>
 800c49c:	2b08      	cmp	r3, #8
 800c49e:	d10b      	bne.n	800c4b8 <_printf_i+0x148>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	07de      	lsls	r6, r3, #31
 800c4a4:	d508      	bpl.n	800c4b8 <_printf_i+0x148>
 800c4a6:	6923      	ldr	r3, [r4, #16]
 800c4a8:	6861      	ldr	r1, [r4, #4]
 800c4aa:	4299      	cmp	r1, r3
 800c4ac:	bfde      	ittt	le
 800c4ae:	2330      	movle	r3, #48	; 0x30
 800c4b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4b8:	1b52      	subs	r2, r2, r5
 800c4ba:	6122      	str	r2, [r4, #16]
 800c4bc:	f8cd a000 	str.w	sl, [sp]
 800c4c0:	464b      	mov	r3, r9
 800c4c2:	aa03      	add	r2, sp, #12
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	f7ff fee4 	bl	800c294 <_printf_common>
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	d14a      	bne.n	800c566 <_printf_i+0x1f6>
 800c4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d4:	b004      	add	sp, #16
 800c4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f043 0320 	orr.w	r3, r3, #32
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	4833      	ldr	r0, [pc, #204]	; (800c5b0 <_printf_i+0x240>)
 800c4e4:	2778      	movs	r7, #120	; 0x78
 800c4e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	6829      	ldr	r1, [r5, #0]
 800c4ee:	061f      	lsls	r7, r3, #24
 800c4f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4f4:	d402      	bmi.n	800c4fc <_printf_i+0x18c>
 800c4f6:	065f      	lsls	r7, r3, #25
 800c4f8:	bf48      	it	mi
 800c4fa:	b2b6      	uxthmi	r6, r6
 800c4fc:	07df      	lsls	r7, r3, #31
 800c4fe:	bf48      	it	mi
 800c500:	f043 0320 	orrmi.w	r3, r3, #32
 800c504:	6029      	str	r1, [r5, #0]
 800c506:	bf48      	it	mi
 800c508:	6023      	strmi	r3, [r4, #0]
 800c50a:	b91e      	cbnz	r6, 800c514 <_printf_i+0x1a4>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	f023 0320 	bic.w	r3, r3, #32
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	2310      	movs	r3, #16
 800c516:	e7a7      	b.n	800c468 <_printf_i+0xf8>
 800c518:	4824      	ldr	r0, [pc, #144]	; (800c5ac <_printf_i+0x23c>)
 800c51a:	e7e4      	b.n	800c4e6 <_printf_i+0x176>
 800c51c:	4615      	mov	r5, r2
 800c51e:	e7bd      	b.n	800c49c <_printf_i+0x12c>
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	6826      	ldr	r6, [r4, #0]
 800c524:	6961      	ldr	r1, [r4, #20]
 800c526:	1d18      	adds	r0, r3, #4
 800c528:	6028      	str	r0, [r5, #0]
 800c52a:	0635      	lsls	r5, r6, #24
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	d501      	bpl.n	800c534 <_printf_i+0x1c4>
 800c530:	6019      	str	r1, [r3, #0]
 800c532:	e002      	b.n	800c53a <_printf_i+0x1ca>
 800c534:	0670      	lsls	r0, r6, #25
 800c536:	d5fb      	bpl.n	800c530 <_printf_i+0x1c0>
 800c538:	8019      	strh	r1, [r3, #0]
 800c53a:	2300      	movs	r3, #0
 800c53c:	6123      	str	r3, [r4, #16]
 800c53e:	4615      	mov	r5, r2
 800c540:	e7bc      	b.n	800c4bc <_printf_i+0x14c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	1d1a      	adds	r2, r3, #4
 800c546:	602a      	str	r2, [r5, #0]
 800c548:	681d      	ldr	r5, [r3, #0]
 800c54a:	6862      	ldr	r2, [r4, #4]
 800c54c:	2100      	movs	r1, #0
 800c54e:	4628      	mov	r0, r5
 800c550:	f7f3 fe46 	bl	80001e0 <memchr>
 800c554:	b108      	cbz	r0, 800c55a <_printf_i+0x1ea>
 800c556:	1b40      	subs	r0, r0, r5
 800c558:	6060      	str	r0, [r4, #4]
 800c55a:	6863      	ldr	r3, [r4, #4]
 800c55c:	6123      	str	r3, [r4, #16]
 800c55e:	2300      	movs	r3, #0
 800c560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c564:	e7aa      	b.n	800c4bc <_printf_i+0x14c>
 800c566:	6923      	ldr	r3, [r4, #16]
 800c568:	462a      	mov	r2, r5
 800c56a:	4649      	mov	r1, r9
 800c56c:	4640      	mov	r0, r8
 800c56e:	47d0      	blx	sl
 800c570:	3001      	adds	r0, #1
 800c572:	d0ad      	beq.n	800c4d0 <_printf_i+0x160>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	079b      	lsls	r3, r3, #30
 800c578:	d413      	bmi.n	800c5a2 <_printf_i+0x232>
 800c57a:	68e0      	ldr	r0, [r4, #12]
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	4298      	cmp	r0, r3
 800c580:	bfb8      	it	lt
 800c582:	4618      	movlt	r0, r3
 800c584:	e7a6      	b.n	800c4d4 <_printf_i+0x164>
 800c586:	2301      	movs	r3, #1
 800c588:	4632      	mov	r2, r6
 800c58a:	4649      	mov	r1, r9
 800c58c:	4640      	mov	r0, r8
 800c58e:	47d0      	blx	sl
 800c590:	3001      	adds	r0, #1
 800c592:	d09d      	beq.n	800c4d0 <_printf_i+0x160>
 800c594:	3501      	adds	r5, #1
 800c596:	68e3      	ldr	r3, [r4, #12]
 800c598:	9903      	ldr	r1, [sp, #12]
 800c59a:	1a5b      	subs	r3, r3, r1
 800c59c:	42ab      	cmp	r3, r5
 800c59e:	dcf2      	bgt.n	800c586 <_printf_i+0x216>
 800c5a0:	e7eb      	b.n	800c57a <_printf_i+0x20a>
 800c5a2:	2500      	movs	r5, #0
 800c5a4:	f104 0619 	add.w	r6, r4, #25
 800c5a8:	e7f5      	b.n	800c596 <_printf_i+0x226>
 800c5aa:	bf00      	nop
 800c5ac:	0800c779 	.word	0x0800c779
 800c5b0:	0800c78a 	.word	0x0800c78a

0800c5b4 <memmove>:
 800c5b4:	4288      	cmp	r0, r1
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	eb01 0402 	add.w	r4, r1, r2
 800c5bc:	d902      	bls.n	800c5c4 <memmove+0x10>
 800c5be:	4284      	cmp	r4, r0
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	d807      	bhi.n	800c5d4 <memmove+0x20>
 800c5c4:	1e43      	subs	r3, r0, #1
 800c5c6:	42a1      	cmp	r1, r4
 800c5c8:	d008      	beq.n	800c5dc <memmove+0x28>
 800c5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5d2:	e7f8      	b.n	800c5c6 <memmove+0x12>
 800c5d4:	4402      	add	r2, r0
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	428a      	cmp	r2, r1
 800c5da:	d100      	bne.n	800c5de <memmove+0x2a>
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5e6:	e7f7      	b.n	800c5d8 <memmove+0x24>

0800c5e8 <_sbrk_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d06      	ldr	r5, [pc, #24]	; (800c604 <_sbrk_r+0x1c>)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	602b      	str	r3, [r5, #0]
 800c5f4:	f7f4 fa26 	bl	8000a44 <_sbrk>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d102      	bne.n	800c602 <_sbrk_r+0x1a>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	b103      	cbz	r3, 800c602 <_sbrk_r+0x1a>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	20002c20 	.word	0x20002c20

0800c608 <_realloc_r>:
 800c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60c:	4680      	mov	r8, r0
 800c60e:	4614      	mov	r4, r2
 800c610:	460e      	mov	r6, r1
 800c612:	b921      	cbnz	r1, 800c61e <_realloc_r+0x16>
 800c614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	4611      	mov	r1, r2
 800c61a:	f7ff bc57 	b.w	800becc <_malloc_r>
 800c61e:	b92a      	cbnz	r2, 800c62c <_realloc_r+0x24>
 800c620:	f7ff fbe8 	bl	800bdf4 <_free_r>
 800c624:	4625      	mov	r5, r4
 800c626:	4628      	mov	r0, r5
 800c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c62c:	f000 f81b 	bl	800c666 <_malloc_usable_size_r>
 800c630:	4284      	cmp	r4, r0
 800c632:	4607      	mov	r7, r0
 800c634:	d802      	bhi.n	800c63c <_realloc_r+0x34>
 800c636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c63a:	d812      	bhi.n	800c662 <_realloc_r+0x5a>
 800c63c:	4621      	mov	r1, r4
 800c63e:	4640      	mov	r0, r8
 800c640:	f7ff fc44 	bl	800becc <_malloc_r>
 800c644:	4605      	mov	r5, r0
 800c646:	2800      	cmp	r0, #0
 800c648:	d0ed      	beq.n	800c626 <_realloc_r+0x1e>
 800c64a:	42bc      	cmp	r4, r7
 800c64c:	4622      	mov	r2, r4
 800c64e:	4631      	mov	r1, r6
 800c650:	bf28      	it	cs
 800c652:	463a      	movcs	r2, r7
 800c654:	f7ff fbc0 	bl	800bdd8 <memcpy>
 800c658:	4631      	mov	r1, r6
 800c65a:	4640      	mov	r0, r8
 800c65c:	f7ff fbca 	bl	800bdf4 <_free_r>
 800c660:	e7e1      	b.n	800c626 <_realloc_r+0x1e>
 800c662:	4635      	mov	r5, r6
 800c664:	e7df      	b.n	800c626 <_realloc_r+0x1e>

0800c666 <_malloc_usable_size_r>:
 800c666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c66a:	1f18      	subs	r0, r3, #4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bfbc      	itt	lt
 800c670:	580b      	ldrlt	r3, [r1, r0]
 800c672:	18c0      	addlt	r0, r0, r3
 800c674:	4770      	bx	lr
	...

0800c678 <_init>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	bf00      	nop
 800c67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67e:	bc08      	pop	{r3}
 800c680:	469e      	mov	lr, r3
 800c682:	4770      	bx	lr

0800c684 <_fini>:
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	bf00      	nop
 800c688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68a:	bc08      	pop	{r3}
 800c68c:	469e      	mov	lr, r3
 800c68e:	4770      	bx	lr
